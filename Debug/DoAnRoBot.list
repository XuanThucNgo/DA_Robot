
DoAnRoBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800c878  0800c878  0000d878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd3c  0800cd3c  0000e1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd3c  0800cd3c  0000dd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd44  0800cd44  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd44  0800cd44  0000dd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd48  0800cd48  0000dd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800cd4c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1e0  2**0
                  CONTENTS
 10 .bss          000044a8  200001e0  200001e0  0000e1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004688  20004688  0000e1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e8d  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a0  00000000  00000000  0002309d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  00026140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  00027418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d83  00000000  00000000  00028588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153ee  00000000  00000000  0004c30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d64fb  00000000  00000000  000616f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137bf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065c4  00000000  00000000  00137c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00000019  00000000  00000000  0013e261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c860 	.word	0x0800c860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c860 	.word	0x0800c860

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001fc 	.word	0x200001fc
 8001014:	20000250 	.word	0x20000250

08001018 <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1,100);
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	2364      	movs	r3, #100	@ 0x64
 8001024:	2201      	movs	r2, #1
 8001026:	4804      	ldr	r0, [pc, #16]	@ (8001038 <__io_putchar+0x20>)
 8001028:	f003 fd7c 	bl	8004b24 <HAL_UART_Transmit>
	return ch;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000570 	.word	0x20000570

0800103c <HAL_UARTEx_RxEventCallback>:

uint8_t Rx_data[100];
bool flagStop = false;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == huart3.Instance) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x48>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d113      	bne.n	800107c <HAL_UARTEx_RxEventCallback+0x40>
    // Null-terminate the received data to ensure it is a proper C string
    Rx_data[Size] = '\0';
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001058:	2100      	movs	r1, #0
 800105a:	54d1      	strb	r1, [r2, r3]
    sscanf((char*)Rx_data, "%f r %f l", &vel_R_getFromRaspi, &vel_L_getFromRaspi);
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_UARTEx_RxEventCallback+0x50>)
 800105e:	4a0c      	ldr	r2, [pc, #48]	@ (8001090 <HAL_UARTEx_RxEventCallback+0x54>)
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <HAL_UARTEx_RxEventCallback+0x58>)
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001064:	f007 fbb4 	bl	80087d0 <siscanf>
    // Clear the buffer
    memset(Rx_data, 0, sizeof(Rx_data));
 8001068:	2264      	movs	r2, #100	@ 0x64
 800106a:	2100      	movs	r1, #0
 800106c:	4806      	ldr	r0, [pc, #24]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x4c>)
 800106e:	f007 fc1e 	bl	80088ae <memset>
    // Re-enable DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, Rx_data, sizeof(Rx_data) - 1);
 8001072:	2263      	movs	r2, #99	@ 0x63
 8001074:	4904      	ldr	r1, [pc, #16]	@ (8001088 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001076:	4803      	ldr	r0, [pc, #12]	@ (8001084 <HAL_UARTEx_RxEventCallback+0x48>)
 8001078:	f003 fddf 	bl	8004c3a <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000570 	.word	0x20000570
 8001088:	20000718 	.word	0x20000718
 800108c:	20000708 	.word	0x20000708
 8001090:	20000704 	.word	0x20000704
 8001094:	0800c878 	.word	0x0800c878

08001098 <RunMotor>:

void RunMotor(float power, int wheel)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a2:	6038      	str	r0, [r7, #0]
// 1: left, 2: right
	if(wheel == 1)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d136      	bne.n	8001118 <RunMotor+0x80>
	{
		if(power > 0)
 80010aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	dd0e      	ble.n	80010d6 <RunMotor+0x3e>
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, (uint16_t)power);
 80010b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c0:	ee17 3a90 	vmov	r3, s15
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b34      	ldr	r3, [pc, #208]	@ (8001198 <RunMotor+0x100>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80010cc:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <RunMotor+0x100>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	639a      	str	r2, [r3, #56]	@ 0x38
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
		}
	}
}
 80010d4:	e059      	b.n	800118a <RunMotor+0xf2>
		else if (power < 0)
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	d510      	bpl.n	8001106 <RunMotor+0x6e>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80010e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <RunMotor+0x100>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2200      	movs	r2, #0
 80010ea:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (uint16_t)(-power));
 80010ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f0:	eef1 7a67 	vneg.f32	s15, s15
 80010f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f8:	ee17 3a90 	vmov	r3, s15
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <RunMotor+0x100>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001104:	e041      	b.n	800118a <RunMotor+0xf2>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001106:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <RunMotor+0x100>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800110e:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <RunMotor+0x100>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001116:	e038      	b.n	800118a <RunMotor+0xf2>
	else if(wheel == 2)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d135      	bne.n	800118a <RunMotor+0xf2>
		if(power > 0)
 800111e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	dd0e      	ble.n	800114a <RunMotor+0xb2>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (uint16_t)power);
 800112c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001134:	ee17 3a90 	vmov	r3, s15
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <RunMotor+0x100>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <RunMotor+0x100>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001148:	e01f      	b.n	800118a <RunMotor+0xf2>
		else if (power < 0)
 800114a:	edd7 7a01 	vldr	s15, [r7, #4]
 800114e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d510      	bpl.n	800117a <RunMotor+0xe2>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <RunMotor+0x100>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, (uint16_t)(-power));
 8001160:	edd7 7a01 	vldr	s15, [r7, #4]
 8001164:	eef1 7a67 	vneg.f32	s15, s15
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	ee17 3a90 	vmov	r3, s15
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <RunMotor+0x100>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001178:	e007      	b.n	800118a <RunMotor+0xf2>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <RunMotor+0x100>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <RunMotor+0x100>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200004e0 	.word	0x200004e0

0800119c <ChayVanTocBanhPhai>:
///////////////////////////////////////////////////////////////////////////////
float debugPIDR = 0;
float debugVelR = 0;

void ChayVanTocBanhPhai(float RPM)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	ed87 0a01 	vstr	s0, [r7, #4]
	Encoder_GetPulse(&encRight, MODE_x1);
 80011a6:	2100      	movs	r1, #0
 80011a8:	4821      	ldr	r0, [pc, #132]	@ (8001230 <ChayVanTocBanhPhai+0x94>)
 80011aa:	f004 fea1 	bl	8005ef0 <Encoder_GetPulse>
	debugVelR = Encoder_GetSpeed(&encRight, MODE_x1);
 80011ae:	2100      	movs	r1, #0
 80011b0:	481f      	ldr	r0, [pc, #124]	@ (8001230 <ChayVanTocBanhPhai+0x94>)
 80011b2:	f004 ff05 	bl	8005fc0 <Encoder_GetSpeed>
 80011b6:	eef0 7a40 	vmov.f32	s15, s0
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <ChayVanTocBanhPhai+0x98>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]
	debugPIDR = PID(&pidVelR, RPM, debugVelR);
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <ChayVanTocBanhPhai+0x98>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	eef0 0a67 	vmov.f32	s1, s15
 80011ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ce:	481a      	ldr	r0, [pc, #104]	@ (8001238 <ChayVanTocBanhPhai+0x9c>)
 80011d0:	f006 fac0 	bl	8007754 <PID>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <ChayVanTocBanhPhai+0xa0>)
 80011da:	edc3 7a00 	vstr	s15, [r3]

	if (abs(debugPIDR) < 105.0) {
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <ChayVanTocBanhPhai+0xa0>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e8:	ee17 3a90 	vmov	r3, s15
 80011ec:	f113 0f68 	cmn.w	r3, #104	@ 0x68
 80011f0:	db11      	blt.n	8001216 <ChayVanTocBanhPhai+0x7a>
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <ChayVanTocBanhPhai+0xa0>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fc:	ee17 3a90 	vmov	r3, s15
 8001200:	2b68      	cmp	r3, #104	@ 0x68
 8001202:	dc08      	bgt.n	8001216 <ChayVanTocBanhPhai+0x7a>
		RunMotor(0, 2);
 8001204:	2002      	movs	r0, #2
 8001206:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001240 <ChayVanTocBanhPhai+0xa4>
 800120a:	f7ff ff45 	bl	8001098 <RunMotor>
		PID_reset(&pidVelR);
 800120e:	480a      	ldr	r0, [pc, #40]	@ (8001238 <ChayVanTocBanhPhai+0x9c>)
 8001210:	f006 fb6c 	bl	80078ec <PID_reset>
 8001214:	e008      	b.n	8001228 <ChayVanTocBanhPhai+0x8c>
	} else {
		RunMotor(debugPIDR, 2);
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <ChayVanTocBanhPhai+0xa0>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	2002      	movs	r0, #2
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	f7ff ff39 	bl	8001098 <RunMotor>
	}
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200006a4 	.word	0x200006a4
 8001234:	20000784 	.word	0x20000784
 8001238:	2000061c 	.word	0x2000061c
 800123c:	20000780 	.word	0x20000780
 8001240:	00000000 	.word	0x00000000

08001244 <ChayVanTocBanhTrai>:

float debugPIDL = 0;
float debugVelL = 0;
void ChayVanTocBanhTrai(float RPM)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	ed87 0a01 	vstr	s0, [r7, #4]
	Encoder_GetPulse(&encLeft, MODE_x1);
 800124e:	2100      	movs	r1, #0
 8001250:	4821      	ldr	r0, [pc, #132]	@ (80012d8 <ChayVanTocBanhTrai+0x94>)
 8001252:	f004 fe4d 	bl	8005ef0 <Encoder_GetPulse>
	debugVelL = Encoder_GetSpeed(&encLeft, MODE_x1);
 8001256:	2100      	movs	r1, #0
 8001258:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <ChayVanTocBanhTrai+0x94>)
 800125a:	f004 feb1 	bl	8005fc0 <Encoder_GetSpeed>
 800125e:	eef0 7a40 	vmov.f32	s15, s0
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <ChayVanTocBanhTrai+0x98>)
 8001264:	edc3 7a00 	vstr	s15, [r3]
	debugPIDL = PID(&pidVelL, RPM, debugVelL);
 8001268:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <ChayVanTocBanhTrai+0x98>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	eef0 0a67 	vmov.f32	s1, s15
 8001272:	ed97 0a01 	vldr	s0, [r7, #4]
 8001276:	481a      	ldr	r0, [pc, #104]	@ (80012e0 <ChayVanTocBanhTrai+0x9c>)
 8001278:	f006 fa6c 	bl	8007754 <PID>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <ChayVanTocBanhTrai+0xa0>)
 8001282:	edc3 7a00 	vstr	s15, [r3]

	if (abs(debugPIDL) < 105.0) {
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <ChayVanTocBanhTrai+0xa0>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001290:	ee17 3a90 	vmov	r3, s15
 8001294:	f113 0f68 	cmn.w	r3, #104	@ 0x68
 8001298:	db11      	blt.n	80012be <ChayVanTocBanhTrai+0x7a>
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <ChayVanTocBanhTrai+0xa0>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 3a90 	vmov	r3, s15
 80012a8:	2b68      	cmp	r3, #104	@ 0x68
 80012aa:	dc08      	bgt.n	80012be <ChayVanTocBanhTrai+0x7a>
		RunMotor(0, 1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80012e8 <ChayVanTocBanhTrai+0xa4>
 80012b2:	f7ff fef1 	bl	8001098 <RunMotor>
		PID_reset(&pidVelL);
 80012b6:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <ChayVanTocBanhTrai+0x9c>)
 80012b8:	f006 fb18 	bl	80078ec <PID_reset>
 80012bc:	e008      	b.n	80012d0 <ChayVanTocBanhTrai+0x8c>
	} else {
		RunMotor(debugPIDL, 1);
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <ChayVanTocBanhTrai+0xa0>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	2001      	movs	r0, #1
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	f7ff fee5 	bl	8001098 <RunMotor>
	}
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200006d4 	.word	0x200006d4
 80012dc:	2000078c 	.word	0x2000078c
 80012e0:	20000660 	.word	0x20000660
 80012e4:	20000788 	.word	0x20000788
 80012e8:	00000000 	.word	0x00000000

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f2:	f000 ff21 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f6:	f000 f8a9 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fa:	f000 fac9 	bl	8001890 <MX_GPIO_Init>
  MX_DMA_Init();
 80012fe:	f000 faa7 	bl	8001850 <MX_DMA_Init>
  MX_TIM2_Init();
 8001302:	f000 f90b 	bl	800151c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001306:	f000 f95d 	bl	80015c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800130a:	f000 f9af 	bl	800166c <MX_TIM4_Init>
  MX_TIM5_Init();
 800130e:	f000 fa27 	bl	8001760 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001312:	f000 fa73 	bl	80017fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Bắt đầu Encoder Mode ở Timer 2, Channel 1 và Channel 2
 8001316:	2104      	movs	r1, #4
 8001318:	4836      	ldr	r0, [pc, #216]	@ (80013f4 <main+0x108>)
 800131a:	f002 fcd7 	bl	8003ccc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Bắt đầu Encoder Mode ở Timer 3, Channel 1 và Channel 2
 800131e:	2104      	movs	r1, #4
 8001320:	4835      	ldr	r0, [pc, #212]	@ (80013f8 <main+0x10c>)
 8001322:	f002 fcd3 	bl	8003ccc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // Bắt đầu PWM ở Timer 4, Channel 1 => Bánh Phải
 8001326:	2100      	movs	r1, #0
 8001328:	4834      	ldr	r0, [pc, #208]	@ (80013fc <main+0x110>)
 800132a:	f002 fb61 	bl	80039f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // Bắt đầu PWM ở Timer 4, Channel 2 => Bánh Phải
 800132e:	2104      	movs	r1, #4
 8001330:	4832      	ldr	r0, [pc, #200]	@ (80013fc <main+0x110>)
 8001332:	f002 fb5d 	bl	80039f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Bắt đầu PWM ở Timer 4, Channel 1 => Bánh Trái
 8001336:	2108      	movs	r1, #8
 8001338:	4830      	ldr	r0, [pc, #192]	@ (80013fc <main+0x110>)
 800133a:	f002 fb59 	bl	80039f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Bắt đầu PWM ở Timer 4, Channel 2 => Bánh Trái
 800133e:	210c      	movs	r1, #12
 8001340:	482e      	ldr	r0, [pc, #184]	@ (80013fc <main+0x110>)
 8001342:	f002 fb55 	bl	80039f0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim5); // khoi tao timer 5
 8001346:	482e      	ldr	r0, [pc, #184]	@ (8001400 <main+0x114>)
 8001348:	f002 fa92 	bl	8003870 <HAL_TIM_Base_Start_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, Rx_data, 50);
 800134c:	2232      	movs	r2, #50	@ 0x32
 800134e:	492d      	ldr	r1, [pc, #180]	@ (8001404 <main+0x118>)
 8001350:	482d      	ldr	r0, [pc, #180]	@ (8001408 <main+0x11c>)
 8001352:	f003 fc72 	bl	8004c3a <HAL_UARTEx_ReceiveToIdle_DMA>

  Encoder_Init(&encLeft, &htim2, Encoder_PPR_Left, deltaT);
 8001356:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <main+0x120>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <main+0x124>)
 800135c:	edd2 7a00 	vldr	s15, [r2]
 8001360:	eeb0 0a67 	vmov.f32	s0, s15
 8001364:	461a      	mov	r2, r3
 8001366:	4923      	ldr	r1, [pc, #140]	@ (80013f4 <main+0x108>)
 8001368:	482a      	ldr	r0, [pc, #168]	@ (8001414 <main+0x128>)
 800136a:	f004 fda9 	bl	8005ec0 <Encoder_Init>
  Encoder_Init(&encRight, &htim3, Encoder_PPR_Right, deltaT);
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <main+0x12c>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4a27      	ldr	r2, [pc, #156]	@ (8001410 <main+0x124>)
 8001374:	edd2 7a00 	vldr	s15, [r2]
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	461a      	mov	r2, r3
 800137e:	491e      	ldr	r1, [pc, #120]	@ (80013f8 <main+0x10c>)
 8001380:	4826      	ldr	r0, [pc, #152]	@ (800141c <main+0x130>)
 8001382:	f004 fd9d 	bl	8005ec0 <Encoder_Init>

  PID_Init(&pidVelR, 500, 4000, 0, 0.8, 0.005, 1000, -1000);
 8001386:	ed9f 3a26 	vldr	s6, [pc, #152]	@ 8001420 <main+0x134>
 800138a:	eddf 2a26 	vldr	s5, [pc, #152]	@ 8001424 <main+0x138>
 800138e:	ed9f 2a26 	vldr	s4, [pc, #152]	@ 8001428 <main+0x13c>
 8001392:	eddf 1a26 	vldr	s3, [pc, #152]	@ 800142c <main+0x140>
 8001396:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8001430 <main+0x144>
 800139a:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001434 <main+0x148>
 800139e:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001438 <main+0x14c>
 80013a2:	4826      	ldr	r0, [pc, #152]	@ (800143c <main+0x150>)
 80013a4:	f006 f97e 	bl	80076a4 <PID_Init>
  PID_Init(&pidVelL, 500, 4000, 0, 0.8, 0.005, 1000, -1000);
 80013a8:	ed9f 3a1d 	vldr	s6, [pc, #116]	@ 8001420 <main+0x134>
 80013ac:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 8001424 <main+0x138>
 80013b0:	ed9f 2a1d 	vldr	s4, [pc, #116]	@ 8001428 <main+0x13c>
 80013b4:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 800142c <main+0x140>
 80013b8:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 8001430 <main+0x144>
 80013bc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001434 <main+0x148>
 80013c0:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8001438 <main+0x14c>
 80013c4:	481e      	ldr	r0, [pc, #120]	@ (8001440 <main+0x154>)
 80013c6:	f006 f96d 	bl	80076a4 <PID_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskRunRobot */
  osThreadDef(TaskRunRobot, StartRunRobot, osPriorityNormal, 0, 256);
 80013ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <main+0x158>)
 80013cc:	1d3c      	adds	r4, r7, #4
 80013ce:	461d      	mov	r5, r3
 80013d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskRunRobotHandle = osThreadCreate(osThread(TaskRunRobot), NULL);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 ff20 	bl	8006226 <osThreadCreate>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <main+0x15c>)
 80013ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013ec:	f004 ff14 	bl	8006218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <main+0x104>
 80013f4:	20000450 	.word	0x20000450
 80013f8:	20000498 	.word	0x20000498
 80013fc:	200004e0 	.word	0x200004e0
 8001400:	20000528 	.word	0x20000528
 8001404:	20000718 	.word	0x20000718
 8001408:	20000570 	.word	0x20000570
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004
 8001414:	200006d4 	.word	0x200006d4
 8001418:	20000002 	.word	0x20000002
 800141c:	200006a4 	.word	0x200006a4
 8001420:	c47a0000 	.word	0xc47a0000
 8001424:	447a0000 	.word	0x447a0000
 8001428:	3ba3d70a 	.word	0x3ba3d70a
 800142c:	3f4ccccd 	.word	0x3f4ccccd
 8001430:	00000000 	.word	0x00000000
 8001434:	457a0000 	.word	0x457a0000
 8001438:	43fa0000 	.word	0x43fa0000
 800143c:	2000061c 	.word	0x2000061c
 8001440:	20000660 	.word	0x20000660
 8001444:	0800c894 	.word	0x0800c894
 8001448:	20000618 	.word	0x20000618

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	@ 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f007 fa27 	bl	80088ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <SystemClock_Config+0xc8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a26      	ldr	r2, [pc, #152]	@ (8001514 <SystemClock_Config+0xc8>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <SystemClock_Config+0xc8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <SystemClock_Config+0xcc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a20      	ldr	r2, [pc, #128]	@ (8001518 <SystemClock_Config+0xcc>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1e      	ldr	r3, [pc, #120]	@ (8001518 <SystemClock_Config+0xcc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014c0:	2348      	movs	r3, #72	@ 0x48
 80014c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c8:	2304      	movs	r3, #4
 80014ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fcf3 	bl	8002ebc <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014dc:	f000 fac0 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 ff55 	bl	80033ac <HAL_RCC_ClockConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001508:	f000 faaa 	bl	8001a60 <Error_Handler>
  }
}
 800150c:	bf00      	nop
 800150e:	3750      	adds	r7, #80	@ 0x50
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2224      	movs	r2, #36	@ 0x24
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f007 f9bf 	bl	80088ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001538:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800153a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800153e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800154e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001560:	2303      	movs	r3, #3
 8001562:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001568:	2301      	movs	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001578:	2301      	movs	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 800158c:	f002 faf8 	bl	8003b80 <HAL_TIM_Encoder_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001596:	f000 fa63 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_TIM2_Init+0xa4>)
 80015a8:	f003 f9dc 	bl	8004964 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80015b2:	f000 fa55 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	@ 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000450 	.word	0x20000450

080015c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 f96b 	bl	80088ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e0:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <MX_TIM3_Init+0xa0>)
 80015e2:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <MX_TIM3_Init+0xa4>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <MX_TIM3_Init+0xa0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <MX_TIM3_Init+0xa0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_TIM3_Init+0xa0>)
 80015f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_TIM3_Init+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <MX_TIM3_Init+0xa0>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001606:	2303      	movs	r3, #3
 8001608:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800161e:	2301      	movs	r3, #1
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <MX_TIM3_Init+0xa0>)
 8001632:	f002 faa5 	bl	8003b80 <HAL_TIM_Encoder_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800163c:	f000 fa10 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_TIM3_Init+0xa0>)
 800164e:	f003 f989 	bl	8004964 <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001658:	f000 fa02 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3730      	adds	r7, #48	@ 0x30
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000498 	.word	0x20000498
 8001668:	40000400 	.word	0x40000400

0800166c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800168e:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <MX_TIM4_Init+0xec>)
 8001690:	4a32      	ldr	r2, [pc, #200]	@ (800175c <MX_TIM4_Init+0xf0>)
 8001692:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001694:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <MX_TIM4_Init+0xec>)
 8001696:	2247      	movs	r2, #71	@ 0x47
 8001698:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b2f      	ldr	r3, [pc, #188]	@ (8001758 <MX_TIM4_Init+0xec>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80016a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <MX_TIM4_Init+0xec>)
 80016a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <MX_TIM4_Init+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001758 <MX_TIM4_Init+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016b4:	4828      	ldr	r0, [pc, #160]	@ (8001758 <MX_TIM4_Init+0xec>)
 80016b6:	f002 f94b 	bl	8003950 <HAL_TIM_PWM_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80016c0:	f000 f9ce 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4619      	mov	r1, r3
 80016d2:	4821      	ldr	r0, [pc, #132]	@ (8001758 <MX_TIM4_Init+0xec>)
 80016d4:	f003 f946 	bl	8004964 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80016de:	f000 f9bf 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	@ 0x60
 80016e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4817      	ldr	r0, [pc, #92]	@ (8001758 <MX_TIM4_Init+0xec>)
 80016fa:	f002 fc65 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001704:	f000 f9ac 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2204      	movs	r2, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4812      	ldr	r0, [pc, #72]	@ (8001758 <MX_TIM4_Init+0xec>)
 8001710:	f002 fc5a 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800171a:	f000 f9a1 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2208      	movs	r2, #8
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <MX_TIM4_Init+0xec>)
 8001726:	f002 fc4f 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001730:	f000 f996 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	220c      	movs	r2, #12
 8001738:	4619      	mov	r1, r3
 800173a:	4807      	ldr	r0, [pc, #28]	@ (8001758 <MX_TIM4_Init+0xec>)
 800173c:	f002 fc44 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001746:	f000 f98b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800174a:	4803      	ldr	r0, [pc, #12]	@ (8001758 <MX_TIM4_Init+0xec>)
 800174c:	f000 fa7e 	bl	8001c4c <HAL_TIM_MspPostInit>

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200004e0 	.word	0x200004e0
 800175c:	40000800 	.word	0x40000800

08001760 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <MX_TIM5_Init+0x94>)
 800177e:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <MX_TIM5_Init+0x98>)
 8001780:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_TIM5_Init+0x94>)
 8001784:	2247      	movs	r2, #71	@ 0x47
 8001786:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_TIM5_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <MX_TIM5_Init+0x94>)
 8001790:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001794:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001796:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_TIM5_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <MX_TIM5_Init+0x94>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017a2:	4814      	ldr	r0, [pc, #80]	@ (80017f4 <MX_TIM5_Init+0x94>)
 80017a4:	f002 f814 	bl	80037d0 <HAL_TIM_Base_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 f957 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <MX_TIM5_Init+0x94>)
 80017c0:	f002 fcc4 	bl	800414c <HAL_TIM_ConfigClockSource>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80017ca:	f000 f949 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017d6:	463b      	mov	r3, r7
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <MX_TIM5_Init+0x94>)
 80017dc:	f003 f8c2 	bl	8004964 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80017e6:	f000 f93b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000528 	.word	0x20000528
 80017f8:	40000c00 	.word	0x40000c00

080017fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <MX_USART3_UART_Init+0x50>)
 8001804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_USART3_UART_Init+0x4c>)
 8001834:	f003 f926 	bl	8004a84 <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800183e:	f000 f90f 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000570 	.word	0x20000570
 800184c:	40004800 	.word	0x40004800

08001850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_DMA_Init+0x3c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <MX_DMA_Init+0x3c>)
 8001860:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_DMA_Init+0x3c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2105      	movs	r1, #5
 8001876:	200c      	movs	r0, #12
 8001878:	f000 fd58 	bl	800232c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800187c:	200c      	movs	r0, #12
 800187e:	f000 fd71 	bl	8002364 <HAL_NVIC_EnableIRQ>

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_GPIO_Init+0x68>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <MX_GPIO_Init+0x68>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <StartRunRobot>:

float testTx1, testTx2 = 0;

/* USER CODE END Header_StartRunRobot */
void StartRunRobot(void const * argument)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

		vel_R_getFromRaspi_LamTron = vel_R_getFromRaspi*100;
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <StartRunRobot+0xa8>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80019a8 <StartRunRobot+0xac>
 800190e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <StartRunRobot+0xb0>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
		vel_L_getFromRaspi_LamTron = vel_L_getFromRaspi*100;
 8001918:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <StartRunRobot+0xb4>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80019a8 <StartRunRobot+0xac>
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	4b23      	ldr	r3, [pc, #140]	@ (80019b4 <StartRunRobot+0xb8>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
	    if (vel_R_getFromRaspi_LamTron == 0 && vel_R_getFromRaspi_LamTron == 0) {
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <StartRunRobot+0xb0>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	d10b      	bne.n	8001954 <StartRunRobot+0x58>
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <StartRunRobot+0xb0>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	d103      	bne.n	8001954 <StartRunRobot+0x58>
	    	flagStop = true;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <StartRunRobot+0xbc>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e002      	b.n	800195a <StartRunRobot+0x5e>
	    	//LED(RED, 1);
	    } else {
	    	flagStop = false;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <StartRunRobot+0xbc>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
	    	//LED(GREEN, 1);
	    }

		ChayVanTocBanhPhai(vel_R_getFromRaspi);
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <StartRunRobot+0xa8>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	f7ff fc1a 	bl	800119c <ChayVanTocBanhPhai>
		ChayVanTocBanhTrai(vel_L_getFromRaspi);
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <StartRunRobot+0xb4>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	f7ff fc67 	bl	8001244 <ChayVanTocBanhTrai>

		tickL = Encoder_GetPulse_return(&encLeft, MODE_x1);
 8001976:	2100      	movs	r1, #0
 8001978:	4810      	ldr	r0, [pc, #64]	@ (80019bc <StartRunRobot+0xc0>)
 800197a:	f004 fae9 	bl	8005f50 <Encoder_GetPulse_return>
 800197e:	eef0 7a40 	vmov.f32	s15, s0
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <StartRunRobot+0xc4>)
 8001984:	edc3 7a00 	vstr	s15, [r3]
		tickR = Encoder_GetPulse_return(&encRight, MODE_x1);
 8001988:	2100      	movs	r1, #0
 800198a:	480e      	ldr	r0, [pc, #56]	@ (80019c4 <StartRunRobot+0xc8>)
 800198c:	f004 fae0 	bl	8005f50 <Encoder_GetPulse_return>
 8001990:	eef0 7a40 	vmov.f32	s15, s0
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <StartRunRobot+0xcc>)
 8001996:	edc3 7a00 	vstr	s15, [r3]
    osDelay(5);
 800199a:	2005      	movs	r0, #5
 800199c:	f004 fc8f 	bl	80062be <osDelay>
		vel_R_getFromRaspi_LamTron = vel_R_getFromRaspi*100;
 80019a0:	e7b0      	b.n	8001904 <StartRunRobot+0x8>
 80019a2:	bf00      	nop
 80019a4:	20000704 	.word	0x20000704
 80019a8:	42c80000 	.word	0x42c80000
 80019ac:	20000790 	.word	0x20000790
 80019b0:	20000708 	.word	0x20000708
 80019b4:	20000794 	.word	0x20000794
 80019b8:	2000077c 	.word	0x2000077c
 80019bc:	200006d4 	.word	0x200006d4
 80019c0:	20000710 	.word	0x20000710
 80019c4:	200006a4 	.word	0x200006a4
 80019c8:	20000714 	.word	0x20000714

080019cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	// TIM5: (72*1000)/72000000hz = 1ms
	if(htim->Instance == TIM5) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d127      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x62>
		tick++;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019e6:	6013      	str	r3, [r2, #0]
		if (tick == 50) {
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b32      	cmp	r3, #50	@ 0x32
 80019ee:	d11e      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x62>
			tick = 0;
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
			if (flagStop == false) {
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	f083 0301 	eor.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d014      	beq.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x62>
				printf("%.0fr%.0fl\n", tickR, tickL);
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd9d 	bl	8000548 <__aeabi_f2d>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	460d      	mov	r5, r1
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd96 	bl	8000548 <__aeabi_f2d>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9cd 2300 	strd	r2, r3, [sp]
 8001a24:	4622      	mov	r2, r4
 8001a26:	462b      	mov	r3, r5
 8001a28:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a2a:	f006 fe9f 	bl	800876c <iprintf>
			}
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_TIM_PeriodElapsedCallback+0x70>
    HAL_IncTick();
 8001a38:	f000 fba0 	bl	800217c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bdb0      	pop	{r4, r5, r7, pc}
 8001a44:	40000c00 	.word	0x40000c00
 8001a48:	2000070c 	.word	0x2000070c
 8001a4c:	2000077c 	.word	0x2000077c
 8001a50:	20000714 	.word	0x20000714
 8001a54:	20000710 	.word	0x20000710
 8001a58:	0800c8b0 	.word	0x0800c8b0
 8001a5c:	40010000 	.word	0x40010000

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <Error_Handler+0x8>

08001a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_MspInit+0x54>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ac0 <HAL_MspInit+0x54>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_MspInit+0x54>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_MspInit+0x54>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <HAL_MspInit+0x54>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_MspInit+0x54>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	210f      	movs	r1, #15
 8001aae:	f06f 0001 	mvn.w	r0, #1
 8001ab2:	f000 fc3b 	bl	800232c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	@ 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ae4:	d12c      	bne.n	8001b40 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a28      	ldr	r2, [pc, #160]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	481d      	ldr	r0, [pc, #116]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001b3a:	f001 f823 	bl	8002b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3e:	e030      	b.n	8001ba2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d12b      	bne.n	8001ba2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a16      	ldr	r2, [pc, #88]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <HAL_TIM_Encoder_MspInit+0xe8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	23c0      	movs	r3, #192	@ 0xc0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b92:	2302      	movs	r3, #2
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001b9e:	f000 fff1 	bl	8002b84 <HAL_GPIO_Init>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40000400 	.word	0x40000400

08001bb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10d      	bne.n	8001be6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x40>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40000800 	.word	0x40000800
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <HAL_TIM_Base_MspInit+0x48>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d115      	bne.n	8001c3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <HAL_TIM_Base_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a0c      	ldr	r2, [pc, #48]	@ (8001c48 <HAL_TIM_Base_MspInit+0x4c>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_TIM_Base_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	2032      	movs	r0, #50	@ 0x32
 8001c30:	f000 fb7c 	bl	800232c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c34:	2032      	movs	r0, #50	@ 0x32
 8001c36:	f000 fb95 	bl	8002364 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40000c00 	.word	0x40000c00
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <HAL_TIM_MspPostInit+0x68>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d11e      	bne.n	8001cac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a10      	ldr	r2, [pc, #64]	@ (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <HAL_TIM_MspPostInit+0x6c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c8a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <HAL_TIM_MspPostInit+0x70>)
 8001ca8:	f000 ff6c 	bl	8002b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020c00 	.word	0x40020c00

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	@ 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a35      	ldr	r2, [pc, #212]	@ (8001db4 <HAL_UART_MspInit+0xf4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d163      	bne.n	8001daa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_UART_MspInit+0xf8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a33      	ldr	r2, [pc, #204]	@ (8001db8 <HAL_UART_MspInit+0xf8>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b31      	ldr	r3, [pc, #196]	@ (8001db8 <HAL_UART_MspInit+0xf8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b2d      	ldr	r3, [pc, #180]	@ (8001db8 <HAL_UART_MspInit+0xf8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a2c      	ldr	r2, [pc, #176]	@ (8001db8 <HAL_UART_MspInit+0xf8>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <HAL_UART_MspInit+0xf8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4821      	ldr	r0, [pc, #132]	@ (8001dbc <HAL_UART_MspInit+0xfc>)
 8001d38:	f000 ff24 	bl	8002b84 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d3e:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <HAL_UART_MspInit+0x104>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d48:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d5e:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d64:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d76:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d7e:	4810      	ldr	r0, [pc, #64]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d80:	f000 fafe 	bl	8002380 <HAL_DMA_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001d8a:	f7ff fe69 	bl	8001a60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d94:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_UART_MspInit+0x100>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	2027      	movs	r0, #39	@ 0x27
 8001da0:	f000 fac4 	bl	800232c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001da4:	2027      	movs	r0, #39	@ 0x27
 8001da6:	f000 fadd 	bl	8002364 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	@ 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40004800 	.word	0x40004800
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	200005b8 	.word	0x200005b8
 8001dc4:	40026028 	.word	0x40026028

08001dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	@ 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_InitTick+0xd0>)
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	4a2d      	ldr	r2, [pc, #180]	@ (8001e98 <HAL_InitTick+0xd0>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <HAL_InitTick+0xd0>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001df4:	f107 020c 	add.w	r2, r7, #12
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fcb4 	bl	800376c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e04:	f001 fc9e 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 8001e08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0c:	4a23      	ldr	r2, [pc, #140]	@ (8001e9c <HAL_InitTick+0xd4>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0c9b      	lsrs	r3, r3, #18
 8001e14:	3b01      	subs	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ea4 <HAL_InitTick+0xdc>)
 8001e1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e3e:	4818      	ldr	r0, [pc, #96]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e40:	f001 fcc6 	bl	80037d0 <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d11b      	bne.n	8001e8a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e52:	4813      	ldr	r0, [pc, #76]	@ (8001ea0 <HAL_InitTick+0xd8>)
 8001e54:	f001 fd0c 	bl	8003870 <HAL_TIM_Base_Start_IT>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d111      	bne.n	8001e8a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e66:	2019      	movs	r0, #25
 8001e68:	f000 fa7c 	bl	8002364 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	d808      	bhi.n	8001e84 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e72:	2200      	movs	r2, #0
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	2019      	movs	r0, #25
 8001e78:	f000 fa58 	bl	800232c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <HAL_InitTick+0xe0>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e002      	b.n	8001e8a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3730      	adds	r7, #48	@ 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	20000798 	.word	0x20000798
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <DMA1_Stream1_IRQHandler+0x10>)
 8001eea:	f000 fbe1 	bl	80026b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200005b8 	.word	0x200005b8

08001ef8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001efe:	f001 ff73 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000798 	.word	0x20000798

08001f0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <USART3_IRQHandler+0x10>)
 8001f12:	f002 feef 	bl	8004cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000570 	.word	0x20000570

08001f20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <TIM5_IRQHandler+0x10>)
 8001f26:	f001 ff5f 	bl	8003de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000528 	.word	0x20000528

08001f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_kill>:

int _kill(int pid, int sig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f4e:	f006 fd01 	bl	8008954 <__errno>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2216      	movs	r2, #22
 8001f56:	601a      	str	r2, [r3, #0]
  return -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_exit>:

void _exit (int status)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ffe7 	bl	8001f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f76:	bf00      	nop
 8001f78:	e7fd      	b.n	8001f76 <_exit+0x12>

08001f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e00a      	b.n	8001fa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f8c:	f3af 8000 	nop.w
 8001f90:	4601      	mov	r1, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	60ba      	str	r2, [r7, #8]
 8001f98:	b2ca      	uxtb	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	dbf0      	blt.n	8001f8c <_read+0x12>
  }

  return len;
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e009      	b.n	8001fda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f822 	bl	8001018 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dbf1      	blt.n	8001fc6 <_write+0x12>
  }
  return len;
 8001fe2:	687b      	ldr	r3, [r7, #4]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_close>:

int _close(int file)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002014:	605a      	str	r2, [r3, #4]
  return 0;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_isatty>:

int _isatty(int file)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	@ (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f006 fc66 	bl	8008954 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20020000 	.word	0x20020000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	200007e0 	.word	0x200007e0
 80020bc:	20004688 	.word	0x20004688

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	@ (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800211c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020e8:	f7ff ffea 	bl	80020c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ee:	490d      	ldr	r1, [pc, #52]	@ (8002124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f4:	e002      	b.n	80020fc <LoopCopyDataInit>

080020f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fa:	3304      	adds	r3, #4

080020fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002100:	d3f9      	bcc.n	80020f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002102:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002104:	4c0a      	ldr	r4, [pc, #40]	@ (8002130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002108:	e001      	b.n	800210e <LoopFillZerobss>

0800210a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800210c:	3204      	adds	r2, #4

0800210e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002110:	d3fb      	bcc.n	800210a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002112:	f006 fc25 	bl	8008960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002116:	f7ff f8e9 	bl	80012ec <main>
  bx  lr    
 800211a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800211c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002128:	0800cd4c 	.word	0x0800cd4c
  ldr r2, =_sbss
 800212c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002130:	20004688 	.word	0x20004688

08002134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC_IRQHandler>
	...

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_Init+0x40>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_Init+0x40>)
 800214e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_Init+0x40>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 f8d8 	bl	8002316 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	200f      	movs	r0, #15
 8002168:	f7ff fe2e 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7ff fc7e 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x20>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_IncTick+0x24>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4413      	add	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <HAL_IncTick+0x24>)
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000010 	.word	0x20000010
 80021a0:	200007e4 	.word	0x200007e4

080021a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <HAL_GetTick+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	200007e4 	.word	0x200007e4

080021bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ee:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <__NVIC_SetPriorityGrouping+0x44>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <__NVIC_GetPriorityGrouping+0x18>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 0307 	and.w	r3, r3, #7
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db0b      	blt.n	800224a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4907      	ldr	r1, [pc, #28]	@ (8002258 <__NVIC_EnableIRQ+0x38>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2001      	movs	r0, #1
 8002242:	fa00 f202 	lsl.w	r2, r0, r2
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e100 	.word	0xe000e100

0800225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db0a      	blt.n	8002286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	490c      	ldr	r1, [pc, #48]	@ (80022a8 <__NVIC_SetPriority+0x4c>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	440b      	add	r3, r1
 8002280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002284:	e00a      	b.n	800229c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <__NVIC_SetPriority+0x50>)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	3b04      	subs	r3, #4
 8002294:	0112      	lsls	r2, r2, #4
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	440b      	add	r3, r1
 800229a:	761a      	strb	r2, [r3, #24]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f1c3 0307 	rsb	r3, r3, #7
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	bf28      	it	cs
 80022ce:	2304      	movcs	r3, #4
 80022d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d902      	bls.n	80022e0 <NVIC_EncodePriority+0x30>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3b03      	subs	r3, #3
 80022de:	e000      	b.n	80022e2 <NVIC_EncodePriority+0x32>
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	401a      	ands	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43d9      	mvns	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	4313      	orrs	r3, r2
         );
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	@ 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ff4c 	bl	80021bc <__NVIC_SetPriorityGrouping>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233e:	f7ff ff61 	bl	8002204 <__NVIC_GetPriorityGrouping>
 8002342:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	6978      	ldr	r0, [r7, #20]
 800234a:	f7ff ffb1 	bl	80022b0 <NVIC_EncodePriority>
 800234e:	4602      	mov	r2, r0
 8002350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff80 	bl	800225c <__NVIC_SetPriority>
}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff54 	bl	8002220 <__NVIC_EnableIRQ>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ff0a 	bl	80021a4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e099      	b.n	80024d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023bc:	e00f      	b.n	80023de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023be:	f7ff fef1 	bl	80021a4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d908      	bls.n	80023de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2203      	movs	r2, #3
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e078      	b.n	80024d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e8      	bne.n	80023be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4b38      	ldr	r3, [pc, #224]	@ (80024d8 <HAL_DMA_Init+0x158>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	2b04      	cmp	r3, #4
 8002436:	d107      	bne.n	8002448 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	4313      	orrs	r3, r2
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f023 0307 	bic.w	r3, r3, #7
 800245e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	2b04      	cmp	r3, #4
 8002470:	d117      	bne.n	80024a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00e      	beq.n	80024a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fb01 	bl	8002a8c <DMA_CheckFifoParam>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2240      	movs	r2, #64	@ 0x40
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800249e:	2301      	movs	r3, #1
 80024a0:	e016      	b.n	80024d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fab8 	bl	8002a20 <DMA_CalcBaseAndBitshift>
 80024b0:	4603      	mov	r3, r0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b8:	223f      	movs	r2, #63	@ 0x3f
 80024ba:	409a      	lsls	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	f010803f 	.word	0xf010803f

080024dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_DMA_Start_IT+0x26>
 80024fe:	2302      	movs	r3, #2
 8002500:	e040      	b.n	8002584 <HAL_DMA_Start_IT+0xa8>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d12f      	bne.n	8002576 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa4a 	bl	80029c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002534:	223f      	movs	r2, #63	@ 0x3f
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0216 	orr.w	r2, r2, #22
 800254a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0208 	orr.w	r2, r2, #8
 8002562:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e005      	b.n	8002582 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800257e:	2302      	movs	r3, #2
 8002580:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002582:	7dfb      	ldrb	r3, [r7, #23]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7ff fe03 	bl	80021a4 <HAL_GetTick>
 800259e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2280      	movs	r2, #128	@ 0x80
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e052      	b.n	8002664 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_Abort+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260e:	e013      	b.n	8002638 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002610:	f7ff fdc8 	bl	80021a4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b05      	cmp	r3, #5
 800261c:	d90c      	bls.n	8002638 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e015      	b.n	8002664 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e4      	bne.n	8002610 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	223f      	movs	r2, #63	@ 0x3f
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00c      	b.n	80026a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026bc:	4b8e      	ldr	r3, [pc, #568]	@ (80028f8 <HAL_DMA_IRQHandler+0x248>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a8e      	ldr	r2, [pc, #568]	@ (80028fc <HAL_DMA_IRQHandler+0x24c>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0a9b      	lsrs	r3, r3, #10
 80026c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026da:	2208      	movs	r2, #8
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01a      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0204 	bic.w	r2, r2, #4
 8002702:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	2208      	movs	r2, #8
 800270a:	409a      	lsls	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	2201      	movs	r2, #1
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d012      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	2201      	movs	r2, #1
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	2204      	movs	r2, #4
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	2204      	movs	r2, #4
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	2210      	movs	r2, #16
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d043      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d03c      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	2210      	movs	r2, #16
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d024      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e01f      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01b      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
 80027f0:	e016      	b.n	8002820 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0208 	bic.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	2220      	movs	r2, #32
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 808f 	beq.w	8002950 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8087 	beq.w	8002950 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	2220      	movs	r2, #32
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b05      	cmp	r3, #5
 8002858:	d136      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0216 	bic.w	r2, r2, #22
 8002868:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002878:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_DMA_IRQHandler+0x1da>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0208 	bic.w	r2, r2, #8
 8002898:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289e:	223f      	movs	r2, #63	@ 0x3f
 80028a0:	409a      	lsls	r2, r3
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d07e      	beq.n	80029bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
        }
        return;
 80028c6:	e079      	b.n	80029bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01d      	beq.n	8002912 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d031      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
 80028f4:	e02c      	b.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
 80028f6:	bf00      	nop
 80028f8:	20000008 	.word	0x20000008
 80028fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	e01e      	b.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10f      	bne.n	8002940 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0210 	bic.w	r2, r2, #16
 800292e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002954:	2b00      	cmp	r3, #0
 8002956:	d032      	beq.n	80029be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d022      	beq.n	80029aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2205      	movs	r2, #5
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	3301      	adds	r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	429a      	cmp	r2, r3
 8002986:	d307      	bcc.n	8002998 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f2      	bne.n	800297c <HAL_DMA_IRQHandler+0x2cc>
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002998:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0x30e>
        return;
 80029bc:	bf00      	nop
    }
  }
}
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b40      	cmp	r3, #64	@ 0x40
 80029f0:	d108      	bne.n	8002a04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a02:	e007      	b.n	8002a14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3b10      	subs	r3, #16
 8002a30:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <DMA_CalcBaseAndBitshift+0x64>)
 8002a32:	fba2 2303 	umull	r2, r3, r2, r3
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a3a:	4a13      	ldr	r2, [pc, #76]	@ (8002a88 <DMA_CalcBaseAndBitshift+0x68>)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d909      	bls.n	8002a62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	1d1a      	adds	r2, r3, #4
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a60:	e007      	b.n	8002a72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	aaaaaaab 	.word	0xaaaaaaab
 8002a88:	0800c8e8 	.word	0x0800c8e8

08002a8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11f      	bne.n	8002ae6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d856      	bhi.n	8002b5a <DMA_CheckFifoParam+0xce>
 8002aac:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <DMA_CheckFifoParam+0x28>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002ad7 	.word	0x08002ad7
 8002abc:	08002ac5 	.word	0x08002ac5
 8002ac0:	08002b5b 	.word	0x08002b5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d046      	beq.n	8002b5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad4:	e043      	b.n	8002b5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ade:	d140      	bne.n	8002b62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae4:	e03d      	b.n	8002b62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aee:	d121      	bne.n	8002b34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d837      	bhi.n	8002b66 <DMA_CheckFifoParam+0xda>
 8002af6:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <DMA_CheckFifoParam+0x70>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b13 	.word	0x08002b13
 8002b04:	08002b0d 	.word	0x08002b0d
 8002b08:	08002b25 	.word	0x08002b25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e030      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d025      	beq.n	8002b6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b22:	e022      	b.n	8002b6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b2c:	d11f      	bne.n	8002b6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b32:	e01c      	b.n	8002b6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d903      	bls.n	8002b42 <DMA_CheckFifoParam+0xb6>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d003      	beq.n	8002b48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b40:	e018      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      break;
 8002b46:	e015      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e00b      	b.n	8002b72 <DMA_CheckFifoParam+0xe6>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e00a      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e008      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e006      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e004      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e002      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b6e:	bf00      	nop
 8002b70:	e000      	b.n	8002b74 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
    }
  } 
  
  return status; 
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop

08002b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e16b      	b.n	8002e78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f040 815a 	bne.w	8002e72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d005      	beq.n	8002bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d130      	bne.n	8002c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	2203      	movs	r2, #3
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 0201 	and.w	r2, r3, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d017      	beq.n	8002c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d123      	bne.n	8002cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	220f      	movs	r2, #15
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	08da      	lsrs	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	69b9      	ldr	r1, [r7, #24]
 8002cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0203 	and.w	r2, r3, #3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80b4 	beq.w	8002e72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b60      	ldr	r3, [pc, #384]	@ (8002e90 <HAL_GPIO_Init+0x30c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	4a5f      	ldr	r2, [pc, #380]	@ (8002e90 <HAL_GPIO_Init+0x30c>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e90 <HAL_GPIO_Init+0x30c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d26:	4a5b      	ldr	r2, [pc, #364]	@ (8002e94 <HAL_GPIO_Init+0x310>)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	@ (8002e98 <HAL_GPIO_Init+0x314>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02b      	beq.n	8002daa <HAL_GPIO_Init+0x226>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a51      	ldr	r2, [pc, #324]	@ (8002e9c <HAL_GPIO_Init+0x318>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d025      	beq.n	8002da6 <HAL_GPIO_Init+0x222>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ea0 <HAL_GPIO_Init+0x31c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_GPIO_Init+0x21e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea4 <HAL_GPIO_Init+0x320>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x21a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea8 <HAL_GPIO_Init+0x324>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x216>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4d      	ldr	r2, [pc, #308]	@ (8002eac <HAL_GPIO_Init+0x328>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x212>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb0 <HAL_GPIO_Init+0x32c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x20e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb4 <HAL_GPIO_Init+0x330>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x20a>
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	e00e      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d8e:	2308      	movs	r3, #8
 8002d90:	e00c      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d92:	2306      	movs	r3, #6
 8002d94:	e00a      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d96:	2305      	movs	r3, #5
 8002d98:	e008      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e004      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x228>
 8002daa:	2300      	movs	r3, #0
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f002 0203 	and.w	r2, r2, #3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4093      	lsls	r3, r2
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dbc:	4935      	ldr	r1, [pc, #212]	@ (8002e94 <HAL_GPIO_Init+0x310>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dca:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dee:	4a32      	ldr	r2, [pc, #200]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df4:	4b30      	ldr	r3, [pc, #192]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e18:	4a27      	ldr	r2, [pc, #156]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1e:	4b26      	ldr	r3, [pc, #152]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e42:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e6c:	4a12      	ldr	r2, [pc, #72]	@ (8002eb8 <HAL_GPIO_Init+0x334>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	f67f ae90 	bls.w	8002ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3724      	adds	r7, #36	@ 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40013800 	.word	0x40013800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020c00 	.word	0x40020c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40021400 	.word	0x40021400
 8002eb0:	40021800 	.word	0x40021800
 8002eb4:	40021c00 	.word	0x40021c00
 8002eb8:	40013c00 	.word	0x40013c00

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e267      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d075      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eda:	4b88      	ldr	r3, [pc, #544]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4b85      	ldr	r3, [pc, #532]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d112      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b82      	ldr	r3, [pc, #520]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4b7e      	ldr	r3, [pc, #504]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d157      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e242      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x74>
 8002f22:	4b76      	ldr	r3, [pc, #472]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a75      	ldr	r2, [pc, #468]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x98>
 8002f3a:	4b70      	ldr	r3, [pc, #448]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b6d      	ldr	r3, [pc, #436]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f54:	4b69      	ldr	r3, [pc, #420]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a68      	ldr	r2, [pc, #416]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b66      	ldr	r3, [pc, #408]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a65      	ldr	r2, [pc, #404]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7ff f916 	bl	80021a4 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7ff f912 	bl	80021a4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	@ 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e207      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7ff f902 	bl	80021a4 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7ff f8fe 	bl	80021a4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1f3      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	4b51      	ldr	r3, [pc, #324]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b44      	ldr	r3, [pc, #272]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	4b41      	ldr	r3, [pc, #260]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1c7      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4937      	ldr	r1, [pc, #220]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	e03a      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302c:	4b34      	ldr	r3, [pc, #208]	@ (8003100 <HAL_RCC_OscConfig+0x244>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7ff f8b7 	bl	80021a4 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303a:	f7ff f8b3 	bl	80021a4 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e1a8      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	4b2b      	ldr	r3, [pc, #172]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b28      	ldr	r3, [pc, #160]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4925      	ldr	r1, [pc, #148]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b24      	ldr	r3, [pc, #144]	@ (8003100 <HAL_RCC_OscConfig+0x244>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7ff f896 	bl	80021a4 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307c:	f7ff f892 	bl	80021a4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e187      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	4b1b      	ldr	r3, [pc, #108]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d036      	beq.n	8003114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ae:	4b15      	ldr	r3, [pc, #84]	@ (8003104 <HAL_RCC_OscConfig+0x248>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7ff f876 	bl	80021a4 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030bc:	f7ff f872 	bl	80021a4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e167      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_OscConfig+0x240>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x200>
 80030da:	e01b      	b.n	8003114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCC_OscConfig+0x248>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7ff f85f 	bl	80021a4 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	e00e      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ea:	f7ff f85b 	bl	80021a4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d907      	bls.n	8003108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e150      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470000 	.word	0x42470000
 8003104:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	4b88      	ldr	r3, [pc, #544]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 800310a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ea      	bne.n	80030ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8097 	beq.w	8003250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003126:	4b81      	ldr	r3, [pc, #516]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b7d      	ldr	r3, [pc, #500]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	4a7c      	ldr	r2, [pc, #496]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	@ 0x40
 8003142:	4b7a      	ldr	r3, [pc, #488]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	4b77      	ldr	r3, [pc, #476]	@ (8003330 <HAL_RCC_OscConfig+0x474>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d118      	bne.n	8003190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315e:	4b74      	ldr	r3, [pc, #464]	@ (8003330 <HAL_RCC_OscConfig+0x474>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a73      	ldr	r2, [pc, #460]	@ (8003330 <HAL_RCC_OscConfig+0x474>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316a:	f7ff f81b 	bl	80021a4 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003172:	f7ff f817 	bl	80021a4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e10c      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	4b6a      	ldr	r3, [pc, #424]	@ (8003330 <HAL_RCC_OscConfig+0x474>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2ea>
 8003198:	4b64      	ldr	r3, [pc, #400]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319c:	4a63      	ldr	r2, [pc, #396]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a4:	e01c      	b.n	80031e0 <HAL_RCC_OscConfig+0x324>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x30c>
 80031ae:	4b5f      	ldr	r3, [pc, #380]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b2:	4a5e      	ldr	r2, [pc, #376]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031b4:	f043 0304 	orr.w	r3, r3, #4
 80031b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ba:	4b5c      	ldr	r3, [pc, #368]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	4a5b      	ldr	r2, [pc, #364]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0x324>
 80031c8:	4b58      	ldr	r3, [pc, #352]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031cc:	4a57      	ldr	r2, [pc, #348]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d4:	4b55      	ldr	r3, [pc, #340]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	4a54      	ldr	r2, [pc, #336]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80031da:	f023 0304 	bic.w	r3, r3, #4
 80031de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d015      	beq.n	8003214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe ffdc 	bl	80021a4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fe ffd8 	bl	80021a4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0cb      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003206:	4b49      	ldr	r3, [pc, #292]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0ee      	beq.n	80031f0 <HAL_RCC_OscConfig+0x334>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fe ffc6 	bl	80021a4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fe ffc2 	bl	80021a4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0b5      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003232:	4b3e      	ldr	r3, [pc, #248]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ee      	bne.n	800321c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d105      	bne.n	8003250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003244:	4b39      	ldr	r3, [pc, #228]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	4a38      	ldr	r2, [pc, #224]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a1 	beq.w	800339c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800325a:	4b34      	ldr	r3, [pc, #208]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b08      	cmp	r3, #8
 8003264:	d05c      	beq.n	8003320 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d141      	bne.n	80032f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b31      	ldr	r3, [pc, #196]	@ (8003334 <HAL_RCC_OscConfig+0x478>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe ff96 	bl	80021a4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fe ff92 	bl	80021a4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e087      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b27      	ldr	r3, [pc, #156]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	491b      	ldr	r1, [pc, #108]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003334 <HAL_RCC_OscConfig+0x478>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fe ff6b 	bl	80021a4 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fe ff67 	bl	80021a4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e05c      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	4b11      	ldr	r3, [pc, #68]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x416>
 80032f0:	e054      	b.n	800339c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <HAL_RCC_OscConfig+0x478>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe ff54 	bl	80021a4 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe ff50 	bl	80021a4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e045      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_RCC_OscConfig+0x470>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x444>
 800331e:	e03d      	b.n	800339c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e038      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
 8003334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003338:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d028      	beq.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d121      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d11a      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800336e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800

080033ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0cc      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b68      	ldr	r3, [pc, #416]	@ (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d90c      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b65      	ldr	r3, [pc, #404]	@ (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b63      	ldr	r3, [pc, #396]	@ (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0b8      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003400:	4b59      	ldr	r3, [pc, #356]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a58      	ldr	r2, [pc, #352]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800340a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003418:	4b53      	ldr	r3, [pc, #332]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a52      	ldr	r2, [pc, #328]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b50      	ldr	r3, [pc, #320]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	494d      	ldr	r1, [pc, #308]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d044      	beq.n	80034cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d119      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d003      	beq.n	800346a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	2b03      	cmp	r3, #3
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b3f      	ldr	r3, [pc, #252]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e067      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b37      	ldr	r3, [pc, #220]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4934      	ldr	r1, [pc, #208]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7fe fe82 	bl	80021a4 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe fe7e 	bl	80021a4 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e04f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d20c      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b22      	ldr	r3, [pc, #136]	@ (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e032      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4916      	ldr	r1, [pc, #88]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	490e      	ldr	r1, [pc, #56]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003532:	f000 f821 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	490a      	ldr	r1, [pc, #40]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	5ccb      	ldrb	r3, [r1, r3]
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	4a09      	ldr	r2, [pc, #36]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800354e:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe fc38 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023c00 	.word	0x40023c00
 8003568:	40023800 	.word	0x40023800
 800356c:	0800c8d0 	.word	0x0800c8d0
 8003570:	20000008 	.word	0x20000008
 8003574:	2000000c 	.word	0x2000000c

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800357c:	b090      	sub	sp, #64	@ 0x40
 800357e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003590:	4b59      	ldr	r3, [pc, #356]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d00d      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x40>
 800359c:	2b08      	cmp	r3, #8
 800359e:	f200 80a1 	bhi.w	80036e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x34>
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035aa:	e09b      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b53      	ldr	r3, [pc, #332]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x184>)
 80035ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035b0:	e09b      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035b2:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x188>)
 80035b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035b6:	e098      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	4b4f      	ldr	r3, [pc, #316]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c2:	4b4d      	ldr	r3, [pc, #308]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d028      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	4b4a      	ldr	r3, [pc, #296]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	2200      	movs	r2, #0
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035e0:	2100      	movs	r1, #0
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x188>)
 80035e4:	fb03 f201 	mul.w	r2, r3, r1
 80035e8:	2300      	movs	r3, #0
 80035ea:	fb00 f303 	mul.w	r3, r0, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	4a43      	ldr	r2, [pc, #268]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x188>)
 80035f2:	fba0 1202 	umull	r1, r2, r0, r2
 80035f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035f8:	460a      	mov	r2, r1
 80035fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035fe:	4413      	add	r3, r2
 8003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003604:	2200      	movs	r2, #0
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800360e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003612:	f7fd fb39 	bl	8000c88 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4613      	mov	r3, r2
 800361c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800361e:	e053      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003620:	4b35      	ldr	r3, [pc, #212]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	2200      	movs	r2, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	617a      	str	r2, [r7, #20]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003632:	f04f 0b00 	mov.w	fp, #0
 8003636:	4652      	mov	r2, sl
 8003638:	465b      	mov	r3, fp
 800363a:	f04f 0000 	mov.w	r0, #0
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	0159      	lsls	r1, r3, #5
 8003644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003648:	0150      	lsls	r0, r2, #5
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	ebb2 080a 	subs.w	r8, r2, sl
 8003652:	eb63 090b 	sbc.w	r9, r3, fp
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003662:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003666:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800366a:	ebb2 0408 	subs.w	r4, r2, r8
 800366e:	eb63 0509 	sbc.w	r5, r3, r9
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	00eb      	lsls	r3, r5, #3
 800367c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003680:	00e2      	lsls	r2, r4, #3
 8003682:	4614      	mov	r4, r2
 8003684:	461d      	mov	r5, r3
 8003686:	eb14 030a 	adds.w	r3, r4, sl
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	eb45 030b 	adc.w	r3, r5, fp
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800369e:	4629      	mov	r1, r5
 80036a0:	028b      	lsls	r3, r1, #10
 80036a2:	4621      	mov	r1, r4
 80036a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a8:	4621      	mov	r1, r4
 80036aa:	028a      	lsls	r2, r1, #10
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b2:	2200      	movs	r2, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	60fa      	str	r2, [r7, #12]
 80036b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036bc:	f7fd fae4 	bl	8000c88 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4613      	mov	r3, r2
 80036c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	3301      	adds	r3, #1
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80036d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036e2:	e002      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <HAL_RCC_GetSysClockFreq+0x184>)
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3740      	adds	r7, #64	@ 0x40
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	017d7840 	.word	0x017d7840

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000008 	.word	0x20000008

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003720:	f7ff fff0 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	@ (8003740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	0800c8e0 	.word	0x0800c8e0

08003744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003748:	f7ff ffdc 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0b5b      	lsrs	r3, r3, #13
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4903      	ldr	r1, [pc, #12]	@ (8003768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	0800c8e0 	.word	0x0800c8e0

0800376c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	220f      	movs	r2, #15
 800377a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800377c:	4b12      	ldr	r3, [pc, #72]	@ (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003788:	4b0f      	ldr	r3, [pc, #60]	@ (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	08db      	lsrs	r3, r3, #3
 80037a6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037ae:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <HAL_RCC_GetClockConfig+0x60>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0207 	and.w	r2, r3, #7
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e041      	b.n	8003866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fe fa00 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f000 fd8c 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d001      	beq.n	8003888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e04e      	b.n	8003926 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a23      	ldr	r2, [pc, #140]	@ (8003934 <HAL_TIM_Base_Start_IT+0xc4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d022      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x80>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b2:	d01d      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x80>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003938 <HAL_TIM_Base_Start_IT+0xc8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d018      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x80>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1e      	ldr	r2, [pc, #120]	@ (800393c <HAL_TIM_Base_Start_IT+0xcc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d013      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x80>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003940 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00e      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x80>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <HAL_TIM_Base_Start_IT+0xd4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x80>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a19      	ldr	r2, [pc, #100]	@ (8003948 <HAL_TIM_Base_Start_IT+0xd8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x80>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a18      	ldr	r2, [pc, #96]	@ (800394c <HAL_TIM_Base_Start_IT+0xdc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d111      	bne.n	8003914 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d010      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003912:	e007      	b.n	8003924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40010000 	.word	0x40010000
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	40000c00 	.word	0x40000c00
 8003944:	40010400 	.word	0x40010400
 8003948:	40014000 	.word	0x40014000
 800394c:	40001800 	.word	0x40001800

08003950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e041      	b.n	80039e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fe f91e 	bl	8001bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f000 fccc 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_TIM_PWM_Start+0x24>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e022      	b.n	8003a5a <HAL_TIM_PWM_Start+0x6a>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d109      	bne.n	8003a2e <HAL_TIM_PWM_Start+0x3e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	e015      	b.n	8003a5a <HAL_TIM_PWM_Start+0x6a>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d109      	bne.n	8003a48 <HAL_TIM_PWM_Start+0x58>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e008      	b.n	8003a5a <HAL_TIM_PWM_Start+0x6a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07c      	b.n	8003b5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x82>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a70:	e013      	b.n	8003a9a <HAL_TIM_PWM_Start+0xaa>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x92>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a80:	e00b      	b.n	8003a9a <HAL_TIM_PWM_Start+0xaa>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_PWM_Start+0xa2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a90:	e003      	b.n	8003a9a <HAL_TIM_PWM_Start+0xaa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	6839      	ldr	r1, [r7, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 ff38 	bl	8004918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2d      	ldr	r2, [pc, #180]	@ (8003b64 <HAL_TIM_PWM_Start+0x174>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_PWM_Start+0xcc>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b68 <HAL_TIM_PWM_Start+0x178>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIM_PWM_Start+0xd0>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_TIM_PWM_Start+0xd2>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a22      	ldr	r2, [pc, #136]	@ (8003b64 <HAL_TIM_PWM_Start+0x174>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x136>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae8:	d01d      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x136>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1f      	ldr	r2, [pc, #124]	@ (8003b6c <HAL_TIM_PWM_Start+0x17c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x136>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b70 <HAL_TIM_PWM_Start+0x180>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x136>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1c      	ldr	r2, [pc, #112]	@ (8003b74 <HAL_TIM_PWM_Start+0x184>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x136>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <HAL_TIM_PWM_Start+0x178>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x136>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_TIM_PWM_Start+0x188>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x136>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <HAL_TIM_PWM_Start+0x18c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d111      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d010      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	e007      	b.n	8003b5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40010400 	.word	0x40010400
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40001800 	.word	0x40001800

08003b80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e097      	b.n	8003cc4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fd ff8b 	bl	8001ac4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f000 fba9 	bl	800432c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	4313      	orrs	r3, r2
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003c20:	f023 030c 	bic.w	r3, r3, #12
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	011a      	lsls	r2, r3, #4
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	031b      	lsls	r3, r3, #12
 8003c50:	4313      	orrs	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	4313      	orrs	r3, r2
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ce4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d110      	bne.n	8003d1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d102      	bne.n	8003d08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d02:	7b7b      	ldrb	r3, [r7, #13]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d001      	beq.n	8003d0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e069      	b.n	8003de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d1c:	e031      	b.n	8003d82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d110      	bne.n	8003d46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d24:	7bbb      	ldrb	r3, [r7, #14]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d102      	bne.n	8003d30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d2a:	7b3b      	ldrb	r3, [r7, #12]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d001      	beq.n	8003d34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e055      	b.n	8003de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d44:	e01d      	b.n	8003d82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d108      	bne.n	8003d5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d4c:	7bbb      	ldrb	r3, [r7, #14]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d105      	bne.n	8003d5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d52:	7b7b      	ldrb	r3, [r7, #13]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d58:	7b3b      	ldrb	r3, [r7, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e03e      	b.n	8003de0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_TIM_Encoder_Start+0xc4>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d008      	beq.n	8003da0 <HAL_TIM_Encoder_Start+0xd4>
 8003d8e:	e00f      	b.n	8003db0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2201      	movs	r2, #1
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fdbd 	bl	8004918 <TIM_CCxChannelCmd>
      break;
 8003d9e:	e016      	b.n	8003dce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	2104      	movs	r1, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fdb5 	bl	8004918 <TIM_CCxChannelCmd>
      break;
 8003dae:	e00e      	b.n	8003dce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fdad 	bl	8004918 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fda6 	bl	8004918 <TIM_CCxChannelCmd>
      break;
 8003dcc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d020      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0202 	mvn.w	r2, #2
 8003e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa5b 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa4d 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fa5e 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d020      	beq.n	8003e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01b      	beq.n	8003e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0204 	mvn.w	r2, #4
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa35 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa27 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fa38 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d020      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01b      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0208 	mvn.w	r2, #8
 8003eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fa0f 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa01 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fa12 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d020      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01b      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0210 	mvn.w	r2, #16
 8003f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2208      	movs	r2, #8
 8003f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f9e9 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f9db 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f9ec 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0201 	mvn.w	r2, #1
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fd3c 	bl	80019cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00c      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fd7c 	bl	8004a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00c      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d007      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9bd 	bl	8004316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0220 	mvn.w	r2, #32
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fd4e 	bl	8004a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ae      	b.n	8004144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	f200 809f 	bhi.w	8004134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004135 	.word	0x08004135
 8004004:	08004135 	.word	0x08004135
 8004008:	08004135 	.word	0x08004135
 800400c:	08004071 	.word	0x08004071
 8004010:	08004135 	.word	0x08004135
 8004014:	08004135 	.word	0x08004135
 8004018:	08004135 	.word	0x08004135
 800401c:	080040b3 	.word	0x080040b3
 8004020:	08004135 	.word	0x08004135
 8004024:	08004135 	.word	0x08004135
 8004028:	08004135 	.word	0x08004135
 800402c:	080040f3 	.word	0x080040f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fa24 	bl	8004484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0208 	orr.w	r2, r2, #8
 800404a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6999      	ldr	r1, [r3, #24]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	619a      	str	r2, [r3, #24]
      break;
 800406e:	e064      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fa74 	bl	8004564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800408a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6999      	ldr	r1, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	619a      	str	r2, [r3, #24]
      break;
 80040b0:	e043      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fac9 	bl	8004650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0208 	orr.w	r2, r2, #8
 80040cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69d9      	ldr	r1, [r3, #28]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	61da      	str	r2, [r3, #28]
      break;
 80040f0:	e023      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fb1d 	bl	8004738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800410c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800411c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69d9      	ldr	r1, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	021a      	lsls	r2, r3, #8
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	61da      	str	r2, [r3, #28]
      break;
 8004132:	e002      	b.n	800413a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      break;
 8004138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIM_ConfigClockSource+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e0b4      	b.n	80042d2 <HAL_TIM_ConfigClockSource+0x186>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800418e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a0:	d03e      	beq.n	8004220 <HAL_TIM_ConfigClockSource+0xd4>
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a6:	f200 8087 	bhi.w	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ae:	f000 8086 	beq.w	80042be <HAL_TIM_ConfigClockSource+0x172>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b6:	d87f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b70      	cmp	r3, #112	@ 0x70
 80041ba:	d01a      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xa6>
 80041bc:	2b70      	cmp	r3, #112	@ 0x70
 80041be:	d87b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b60      	cmp	r3, #96	@ 0x60
 80041c2:	d050      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x11a>
 80041c4:	2b60      	cmp	r3, #96	@ 0x60
 80041c6:	d877      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b50      	cmp	r3, #80	@ 0x50
 80041ca:	d03c      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0xfa>
 80041cc:	2b50      	cmp	r3, #80	@ 0x50
 80041ce:	d873      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d058      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x13a>
 80041d4:	2b40      	cmp	r3, #64	@ 0x40
 80041d6:	d86f      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b30      	cmp	r3, #48	@ 0x30
 80041da:	d064      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b30      	cmp	r3, #48	@ 0x30
 80041de:	d86b      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d060      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d867      	bhi.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d05a      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x15a>
 80041f0:	e062      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004202:	f000 fb69 	bl	80048d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	609a      	str	r2, [r3, #8]
      break;
 800421e:	e04f      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004230:	f000 fb52 	bl	80048d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004242:	609a      	str	r2, [r3, #8]
      break;
 8004244:	e03c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	461a      	mov	r2, r3
 8004254:	f000 fac6 	bl	80047e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2150      	movs	r1, #80	@ 0x50
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fb1f 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 8004264:	e02c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004272:	461a      	mov	r2, r3
 8004274:	f000 fae5 	bl	8004842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2160      	movs	r1, #96	@ 0x60
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fb0f 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 8004284:	e01c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	461a      	mov	r2, r3
 8004294:	f000 faa6 	bl	80047e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2140      	movs	r1, #64	@ 0x40
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 faff 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 80042a4:	e00c      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f000 faf6 	bl	80048a2 <TIM_ITRx_SetConfig>
      break;
 80042b6:	e003      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e000      	b.n	80042c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a46      	ldr	r2, [pc, #280]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a43      	ldr	r2, [pc, #268]	@ (800445c <TIM_Base_SetConfig+0x130>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a42      	ldr	r2, [pc, #264]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a41      	ldr	r2, [pc, #260]	@ (8004464 <TIM_Base_SetConfig+0x138>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a40      	ldr	r2, [pc, #256]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d02b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800438c:	d027      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a32      	ldr	r2, [pc, #200]	@ (800445c <TIM_Base_SetConfig+0x130>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d023      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a31      	ldr	r2, [pc, #196]	@ (8004460 <TIM_Base_SetConfig+0x134>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01f      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a30      	ldr	r2, [pc, #192]	@ (8004464 <TIM_Base_SetConfig+0x138>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d017      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2e      	ldr	r2, [pc, #184]	@ (800446c <TIM_Base_SetConfig+0x140>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004470 <TIM_Base_SetConfig+0x144>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00f      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004474 <TIM_Base_SetConfig+0x148>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004478 <TIM_Base_SetConfig+0x14c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2a      	ldr	r2, [pc, #168]	@ (800447c <TIM_Base_SetConfig+0x150>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a29      	ldr	r2, [pc, #164]	@ (8004480 <TIM_Base_SetConfig+0x154>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a10      	ldr	r2, [pc, #64]	@ (8004458 <TIM_Base_SetConfig+0x12c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_Base_SetConfig+0xf8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a12      	ldr	r2, [pc, #72]	@ (8004468 <TIM_Base_SetConfig+0x13c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d103      	bne.n	800442c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d105      	bne.n	800444a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	611a      	str	r2, [r3, #16]
  }
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40010400 	.word	0x40010400
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800
 8004478:	40001800 	.word	0x40001800
 800447c:	40001c00 	.word	0x40001c00
 8004480:	40002000 	.word	0x40002000

08004484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f023 0201 	bic.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0302 	bic.w	r3, r3, #2
 80044cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a20      	ldr	r2, [pc, #128]	@ (800455c <TIM_OC1_SetConfig+0xd8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_OC1_SetConfig+0x64>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004560 <TIM_OC1_SetConfig+0xdc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10c      	bne.n	8004502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0308 	bic.w	r3, r3, #8
 80044ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a15      	ldr	r2, [pc, #84]	@ (800455c <TIM_OC1_SetConfig+0xd8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC1_SetConfig+0x8e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <TIM_OC1_SetConfig+0xdc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d111      	bne.n	8004536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	621a      	str	r2, [r3, #32]
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40010000 	.word	0x40010000
 8004560:	40010400 	.word	0x40010400

08004564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f023 0210 	bic.w	r2, r3, #16
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800459a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0320 	bic.w	r3, r3, #32
 80045ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a22      	ldr	r2, [pc, #136]	@ (8004648 <TIM_OC2_SetConfig+0xe4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_OC2_SetConfig+0x68>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a21      	ldr	r2, [pc, #132]	@ (800464c <TIM_OC2_SetConfig+0xe8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10d      	bne.n	80045e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a17      	ldr	r2, [pc, #92]	@ (8004648 <TIM_OC2_SetConfig+0xe4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_OC2_SetConfig+0x94>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a16      	ldr	r2, [pc, #88]	@ (800464c <TIM_OC2_SetConfig+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d113      	bne.n	8004620 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40010400 	.word	0x40010400

08004650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a21      	ldr	r2, [pc, #132]	@ (8004730 <TIM_OC3_SetConfig+0xe0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_OC3_SetConfig+0x66>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a20      	ldr	r2, [pc, #128]	@ (8004734 <TIM_OC3_SetConfig+0xe4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10d      	bne.n	80046d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <TIM_OC3_SetConfig+0xe0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_OC3_SetConfig+0x92>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <TIM_OC3_SetConfig+0xe4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d113      	bne.n	800470a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	621a      	str	r2, [r3, #32]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40010000 	.word	0x40010000
 8004734:	40010400 	.word	0x40010400

08004738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a12      	ldr	r2, [pc, #72]	@ (80047dc <TIM_OC4_SetConfig+0xa4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_OC4_SetConfig+0x68>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a11      	ldr	r2, [pc, #68]	@ (80047e0 <TIM_OC4_SetConfig+0xa8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d109      	bne.n	80047b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	019b      	lsls	r3, r3, #6
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40010400 	.word	0x40010400

080047e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f023 0201 	bic.w	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800480e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 030a 	bic.w	r3, r3, #10
 8004820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004842:	b480      	push	{r7}
 8004844:	b087      	sub	sp, #28
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f023 0210 	bic.w	r2, r3, #16
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800486c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	031b      	lsls	r3, r3, #12
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800487e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	f043 0307 	orr.w	r3, r3, #7
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	609a      	str	r2, [r3, #8]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	021a      	lsls	r2, r3, #8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4313      	orrs	r3, r2
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	609a      	str	r2, [r3, #8]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2201      	movs	r2, #1
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	43db      	mvns	r3, r3
 800493a:	401a      	ands	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a1a      	ldr	r2, [r3, #32]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	431a      	orrs	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004978:	2302      	movs	r3, #2
 800497a:	e05a      	b.n	8004a32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a21      	ldr	r2, [pc, #132]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d022      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c8:	d01d      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d018      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00e      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a18      	ldr	r2, [pc, #96]	@ (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d009      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a17      	ldr	r2, [pc, #92]	@ (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a15      	ldr	r2, [pc, #84]	@ (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10c      	bne.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40001800 	.word	0x40001800

08004a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fd f908 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 ff85 	bl	80059d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08a      	sub	sp, #40	@ 0x28
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d175      	bne.n	8004c30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x2c>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e06e      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2221      	movs	r2, #33	@ 0x21
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fd fb1f 	bl	80021a4 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7c:	d108      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e003      	b.n	8004b98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b98:	e02e      	b.n	8004bf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2180      	movs	r1, #128	@ 0x80
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fc5d 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e03a      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e007      	b.n	8004bea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1cb      	bne.n	8004b9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2140      	movs	r1, #64	@ 0x40
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fc29 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e006      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b08c      	sub	sp, #48	@ 0x30
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	4613      	mov	r3, r2
 8004c46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d14a      	bne.n	8004cea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e043      	b.n	8004cec <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	461a      	mov	r2, r3
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fc4e 	bl	8005518 <UART_Start_Receive_DMA>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d12c      	bne.n	8004ce4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d125      	bne.n	8004cde <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f043 0310 	orr.w	r3, r3, #16
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6a39      	ldr	r1, [r7, #32]
 8004cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004cdc:	e002      	b.n	8004ce4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ce8:	e000      	b.n	8004cec <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
  }
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3730      	adds	r7, #48	@ 0x30
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b0ba      	sub	sp, #232	@ 0xe8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <HAL_UART_IRQHandler+0x66>
 8004d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fd81 	bl	800585a <UART_Receive_IT>
      return;
 8004d58:	e25b      	b.n	8005212 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80de 	beq.w	8004f20 <HAL_UART_IRQHandler+0x22c>
 8004d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80d1 	beq.w	8004f20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_UART_IRQHandler+0xae>
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f043 0201 	orr.w	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xd2>
 8004dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbe:	f043 0202 	orr.w	r2, r3, #2
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_UART_IRQHandler+0xf6>
 8004dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	f043 0204 	orr.w	r2, r3, #4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d011      	beq.n	8004e1a <HAL_UART_IRQHandler+0x126>
 8004df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e12:	f043 0208 	orr.w	r2, r3, #8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 81f2 	beq.w	8005208 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_UART_IRQHandler+0x14e>
 8004e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fd0c 	bl	800585a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4c:	2b40      	cmp	r3, #64	@ 0x40
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d103      	bne.n	8004e6e <HAL_UART_IRQHandler+0x17a>
 8004e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d04f      	beq.n	8004f0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fc14 	bl	800569c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7e:	2b40      	cmp	r3, #64	@ 0x40
 8004e80:	d141      	bne.n	8004f06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3314      	adds	r3, #20
 8004e88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004eae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1d9      	bne.n	8004e82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d013      	beq.n	8004efe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eda:	4a7e      	ldr	r2, [pc, #504]	@ (80050d4 <HAL_UART_IRQHandler+0x3e0>)
 8004edc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd fbc2 	bl	800266c <HAL_DMA_Abort_IT>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d016      	beq.n	8004f1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	e00e      	b.n	8004f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9a8 	bl	8005254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f04:	e00a      	b.n	8004f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f9a4 	bl	8005254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0c:	e006      	b.n	8004f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9a0 	bl	8005254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f1a:	e175      	b.n	8005208 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	bf00      	nop
    return;
 8004f1e:	e173      	b.n	8005208 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	f040 814f 	bne.w	80051c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8148 	beq.w	80051c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8141 	beq.w	80051c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f66:	2b40      	cmp	r3, #64	@ 0x40
 8004f68:	f040 80b6 	bne.w	80050d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8145 	beq.w	800520c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	f080 813e 	bcs.w	800520c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa2:	f000 8088 	beq.w	80050b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1d9      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005002:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005004:	f023 0301 	bic.w	r3, r3, #1
 8005008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3314      	adds	r3, #20
 8005012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005016:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800501a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800501e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e1      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3314      	adds	r3, #20
 8005034:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005038:	e853 3f00 	ldrex	r3, [r3]
 800503c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800503e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3314      	adds	r3, #20
 800504e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005052:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005054:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005058:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e3      	bne.n	800502e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	f023 0310 	bic.w	r3, r3, #16
 800508a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005098:	65ba      	str	r2, [r7, #88]	@ 0x58
 800509a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800509e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e3      	bne.n	8005074 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fd fa6b 	bl	800258c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4619      	mov	r1, r3
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fb ffb5 	bl	800103c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050d2:	e09b      	b.n	800520c <HAL_UART_IRQHandler+0x518>
 80050d4:	08005763 	.word	0x08005763
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 808e 	beq.w	8005210 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8089 	beq.w	8005210 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800510e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005114:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005122:	647a      	str	r2, [r7, #68]	@ 0x44
 8005124:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e3      	bne.n	80050fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3314      	adds	r3, #20
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	623b      	str	r3, [r7, #32]
   return(result);
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800515a:	633a      	str	r2, [r7, #48]	@ 0x30
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e3      	bne.n	8005136 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	60fb      	str	r3, [r7, #12]
   return(result);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0310 	bic.w	r3, r3, #16
 8005192:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051a0:	61fa      	str	r2, [r7, #28]
 80051a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	69b9      	ldr	r1, [r7, #24]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	617b      	str	r3, [r7, #20]
   return(result);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e3      	bne.n	800517c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fb ff3b 	bl	800103c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051c6:	e023      	b.n	8005210 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <HAL_UART_IRQHandler+0x4f4>
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fad2 	bl	800578a <UART_Transmit_IT>
    return;
 80051e6:	e014      	b.n	8005212 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00e      	beq.n	8005212 <HAL_UART_IRQHandler+0x51e>
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb12 	bl	800582a <UART_EndTransmit_IT>
    return;
 8005206:	e004      	b.n	8005212 <HAL_UART_IRQHandler+0x51e>
    return;
 8005208:	bf00      	nop
 800520a:	e002      	b.n	8005212 <HAL_UART_IRQHandler+0x51e>
      return;
 800520c:	bf00      	nop
 800520e:	e000      	b.n	8005212 <HAL_UART_IRQHandler+0x51e>
      return;
 8005210:	bf00      	nop
  }
}
 8005212:	37e8      	adds	r7, #232	@ 0xe8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b09c      	sub	sp, #112	@ 0x70
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d172      	bne.n	800536a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005286:	2200      	movs	r2, #0
 8005288:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800528a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	330c      	adds	r3, #12
 8005290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800529a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800529c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80052ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e5      	bne.n	800528a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3314      	adds	r3, #20
 80052c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3314      	adds	r3, #20
 80052dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052de:	647a      	str	r2, [r7, #68]	@ 0x44
 80052e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e5      	bne.n	80052be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	623b      	str	r3, [r7, #32]
   return(result);
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005308:	663b      	str	r3, [r7, #96]	@ 0x60
 800530a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005312:	633a      	str	r2, [r7, #48]	@ 0x30
 8005314:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e5      	bne.n	80052f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005328:	2220      	movs	r2, #32
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	2b01      	cmp	r3, #1
 8005334:	d119      	bne.n	800536a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005336:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	60fb      	str	r3, [r7, #12]
   return(result);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0310 	bic.w	r3, r3, #16
 800534c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800534e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005356:	61fa      	str	r2, [r7, #28]
 8005358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	69b9      	ldr	r1, [r7, #24]
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	617b      	str	r3, [r7, #20]
   return(result);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e5      	bne.n	8005336 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800536c:	2200      	movs	r2, #0
 800536e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d106      	bne.n	8005386 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800537c:	4619      	mov	r1, r3
 800537e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005380:	f7fb fe5c 	bl	800103c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005384:	e002      	b.n	800538c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005386:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005388:	f7ff ff50 	bl	800522c <HAL_UART_RxCpltCallback>
}
 800538c:	bf00      	nop
 800538e:	3770      	adds	r7, #112	@ 0x70
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d108      	bne.n	80053c2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4619      	mov	r1, r3
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7fb fe3e 	bl	800103c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053c0:	e002      	b.n	80053c8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff ff3c 	bl	8005240 <HAL_UART_RxHalfCpltCallback>
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ec:	2b80      	cmp	r3, #128	@ 0x80
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b21      	cmp	r3, #33	@ 0x21
 8005402:	d108      	bne.n	8005416 <UART_DMAError+0x46>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005410:	68b8      	ldr	r0, [r7, #8]
 8005412:	f000 f91b 	bl	800564c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b40      	cmp	r3, #64	@ 0x40
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b22      	cmp	r3, #34	@ 0x22
 8005436:	d108      	bne.n	800544a <UART_DMAError+0x7a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2200      	movs	r2, #0
 8005442:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005444:	68b8      	ldr	r0, [r7, #8]
 8005446:	f000 f929 	bl	800569c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	f043 0210 	orr.w	r2, r3, #16
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005456:	68b8      	ldr	r0, [r7, #8]
 8005458:	f7ff fefc 	bl	8005254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	4613      	mov	r3, r2
 8005472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005474:	e03b      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d037      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547e:	f7fc fe91 	bl	80021a4 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	6a3a      	ldr	r2, [r7, #32]
 800548a:	429a      	cmp	r2, r3
 800548c:	d302      	bcc.n	8005494 <UART_WaitOnFlagUntilTimeout+0x30>
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e03a      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d023      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b80      	cmp	r3, #128	@ 0x80
 80054aa:	d020      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b40      	cmp	r3, #64	@ 0x40
 80054b0:	d01d      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d116      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f8e0 	bl	800569c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2208      	movs	r2, #8
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e00f      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d0b4      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b098      	sub	sp, #96	@ 0x60
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2222      	movs	r2, #34	@ 0x22
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	4a3e      	ldr	r2, [pc, #248]	@ (8005640 <UART_Start_Receive_DMA+0x128>)
 8005546:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554c:	4a3d      	ldr	r2, [pc, #244]	@ (8005644 <UART_Start_Receive_DMA+0x12c>)
 800554e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005554:	4a3c      	ldr	r2, [pc, #240]	@ (8005648 <UART_Start_Receive_DMA+0x130>)
 8005556:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555c:	2200      	movs	r2, #0
 800555e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3304      	adds	r3, #4
 8005570:	4619      	mov	r1, r3
 8005572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	f7fc ffb0 	bl	80024dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d019      	beq.n	80055ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80055bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80055c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3314      	adds	r3, #20
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3314      	adds	r3, #20
 80055ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80055f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3314      	adds	r3, #20
 8005608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	617b      	str	r3, [r7, #20]
   return(result);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005618:	653b      	str	r3, [r7, #80]	@ 0x50
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3314      	adds	r3, #20
 8005620:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005622:	627a      	str	r2, [r7, #36]	@ 0x24
 8005624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6a39      	ldr	r1, [r7, #32]
 8005628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e5      	bne.n	8005602 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3760      	adds	r7, #96	@ 0x60
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	08005269 	.word	0x08005269
 8005644:	08005395 	.word	0x08005395
 8005648:	080053d1 	.word	0x080053d1

0800564c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	@ 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	60bb      	str	r3, [r7, #8]
   return(result);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800566a:	61fb      	str	r3, [r7, #28]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	330c      	adds	r3, #12
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	61ba      	str	r2, [r7, #24]
 8005676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6979      	ldr	r1, [r7, #20]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	613b      	str	r3, [r7, #16]
   return(result);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005690:	bf00      	nop
 8005692:	3724      	adds	r7, #36	@ 0x24
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b095      	sub	sp, #84	@ 0x54
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	d119      	bne.n	8005748 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	60bb      	str	r3, [r7, #8]
   return(result);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f023 0310 	bic.w	r3, r3, #16
 800572a:	647b      	str	r3, [r7, #68]	@ 0x44
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	330c      	adds	r3, #12
 8005732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005734:	61ba      	str	r2, [r7, #24]
 8005736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	613b      	str	r3, [r7, #16]
   return(result);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e5      	bne.n	8005714 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005756:	bf00      	nop
 8005758:	3754      	adds	r7, #84	@ 0x54
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fd69 	bl	8005254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b21      	cmp	r3, #33	@ 0x21
 800579c:	d13e      	bne.n	800581c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a6:	d114      	bne.n	80057d2 <UART_Transmit_IT+0x48>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d110      	bne.n	80057d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	621a      	str	r2, [r3, #32]
 80057d0:	e008      	b.n	80057e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	1c59      	adds	r1, r3, #1
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6211      	str	r1, [r2, #32]
 80057dc:	781a      	ldrb	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4619      	mov	r1, r3
 80057f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10f      	bne.n	8005818 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005806:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005816:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e000      	b.n	800581e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800581c:	2302      	movs	r3, #2
  }
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005840:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fce4 	bl	8005218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08c      	sub	sp, #48	@ 0x30
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b22      	cmp	r3, #34	@ 0x22
 800586c:	f040 80ae 	bne.w	80059cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005878:	d117      	bne.n	80058aa <UART_Receive_IT+0x50>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d113      	bne.n	80058aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005898:	b29a      	uxth	r2, r3
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	1c9a      	adds	r2, r3, #2
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80058a8:	e026      	b.n	80058f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058bc:	d007      	beq.n	80058ce <UART_Receive_IT+0x74>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <UART_Receive_IT+0x82>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e008      	b.n	80058ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29b      	uxth	r3, r3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4619      	mov	r1, r3
 8005906:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005908:	2b00      	cmp	r3, #0
 800590a:	d15d      	bne.n	80059c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0220 	bic.w	r2, r2, #32
 800591a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800592a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594e:	2b01      	cmp	r3, #1
 8005950:	d135      	bne.n	80059be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	613b      	str	r3, [r7, #16]
   return(result);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f023 0310 	bic.w	r3, r3, #16
 800596e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005978:	623a      	str	r2, [r7, #32]
 800597a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	69f9      	ldr	r1, [r7, #28]
 800597e:	6a3a      	ldr	r2, [r7, #32]
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	61bb      	str	r3, [r7, #24]
   return(result);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b10      	cmp	r3, #16
 8005998:	d10a      	bne.n	80059b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fb40 	bl	800103c <HAL_UARTEx_RxEventCallback>
 80059bc:	e002      	b.n	80059c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fc34 	bl	800522c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e002      	b.n	80059ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	e000      	b.n	80059ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059cc:	2302      	movs	r3, #2
  }
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3730      	adds	r7, #48	@ 0x30
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059dc:	b0c0      	sub	sp, #256	@ 0x100
 80059de:	af00      	add	r7, sp, #0
 80059e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	68d9      	ldr	r1, [r3, #12]
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	ea40 0301 	orr.w	r3, r0, r1
 8005a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a30:	f021 010c 	bic.w	r1, r1, #12
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a52:	6999      	ldr	r1, [r3, #24]
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	ea40 0301 	orr.w	r3, r0, r1
 8005a5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b8f      	ldr	r3, [pc, #572]	@ (8005ca4 <UART_SetConfig+0x2cc>)
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d005      	beq.n	8005a78 <UART_SetConfig+0xa0>
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b8d      	ldr	r3, [pc, #564]	@ (8005ca8 <UART_SetConfig+0x2d0>)
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d104      	bne.n	8005a82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a78:	f7fd fe64 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 8005a7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a80:	e003      	b.n	8005a8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a82:	f7fd fe4b 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8005a86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a94:	f040 810c 	bne.w	8005cb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aa2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aa6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005aaa:	4622      	mov	r2, r4
 8005aac:	462b      	mov	r3, r5
 8005aae:	1891      	adds	r1, r2, r2
 8005ab0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ab2:	415b      	adcs	r3, r3
 8005ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ab6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005aba:	4621      	mov	r1, r4
 8005abc:	eb12 0801 	adds.w	r8, r2, r1
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	eb43 0901 	adc.w	r9, r3, r1
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ada:	4690      	mov	r8, r2
 8005adc:	4699      	mov	r9, r3
 8005ade:	4623      	mov	r3, r4
 8005ae0:	eb18 0303 	adds.w	r3, r8, r3
 8005ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ae8:	462b      	mov	r3, r5
 8005aea:	eb49 0303 	adc.w	r3, r9, r3
 8005aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005afe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b06:	460b      	mov	r3, r1
 8005b08:	18db      	adds	r3, r3, r3
 8005b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	eb42 0303 	adc.w	r3, r2, r3
 8005b12:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b1c:	f7fb f8b4 	bl	8000c88 <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4b61      	ldr	r3, [pc, #388]	@ (8005cac <UART_SetConfig+0x2d4>)
 8005b26:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	011c      	lsls	r4, r3, #4
 8005b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	1891      	adds	r1, r2, r2
 8005b46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b48:	415b      	adcs	r3, r3
 8005b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b50:	4641      	mov	r1, r8
 8005b52:	eb12 0a01 	adds.w	sl, r2, r1
 8005b56:	4649      	mov	r1, r9
 8005b58:	eb43 0b01 	adc.w	fp, r3, r1
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b70:	4692      	mov	sl, r2
 8005b72:	469b      	mov	fp, r3
 8005b74:	4643      	mov	r3, r8
 8005b76:	eb1a 0303 	adds.w	r3, sl, r3
 8005b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b7e:	464b      	mov	r3, r9
 8005b80:	eb4b 0303 	adc.w	r3, fp, r3
 8005b84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	18db      	adds	r3, r3, r3
 8005ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	eb42 0303 	adc.w	r3, r2, r3
 8005ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005baa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bb2:	f7fb f869 	bl	8000c88 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8005cac <UART_SetConfig+0x2d4>)
 8005bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2264      	movs	r2, #100	@ 0x64
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	1acb      	subs	r3, r1, r3
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bd2:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <UART_SetConfig+0x2d4>)
 8005bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005be0:	441c      	add	r4, r3
 8005be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	1891      	adds	r1, r2, r2
 8005bfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bfc:	415b      	adcs	r3, r3
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c04:	4641      	mov	r1, r8
 8005c06:	1851      	adds	r1, r2, r1
 8005c08:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	414b      	adcs	r3, r1
 8005c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	00cb      	lsls	r3, r1, #3
 8005c20:	4651      	mov	r1, sl
 8005c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c26:	4651      	mov	r1, sl
 8005c28:	00ca      	lsls	r2, r1, #3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4642      	mov	r2, r8
 8005c32:	189b      	adds	r3, r3, r2
 8005c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c38:	464b      	mov	r3, r9
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	eb42 0303 	adc.w	r3, r2, r3
 8005c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c58:	460b      	mov	r3, r1
 8005c5a:	18db      	adds	r3, r3, r3
 8005c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c5e:	4613      	mov	r3, r2
 8005c60:	eb42 0303 	adc.w	r3, r2, r3
 8005c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c6e:	f7fb f80b 	bl	8000c88 <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <UART_SetConfig+0x2d4>)
 8005c78:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	2164      	movs	r1, #100	@ 0x64
 8005c80:	fb01 f303 	mul.w	r3, r1, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	3332      	adds	r3, #50	@ 0x32
 8005c8a:	4a08      	ldr	r2, [pc, #32]	@ (8005cac <UART_SetConfig+0x2d4>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	f003 0207 	and.w	r2, r3, #7
 8005c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4422      	add	r2, r4
 8005c9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca0:	e106      	b.n	8005eb0 <UART_SetConfig+0x4d8>
 8005ca2:	bf00      	nop
 8005ca4:	40011000 	.word	0x40011000
 8005ca8:	40011400 	.word	0x40011400
 8005cac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cc2:	4642      	mov	r2, r8
 8005cc4:	464b      	mov	r3, r9
 8005cc6:	1891      	adds	r1, r2, r2
 8005cc8:	6239      	str	r1, [r7, #32]
 8005cca:	415b      	adcs	r3, r3
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cd2:	4641      	mov	r1, r8
 8005cd4:	1854      	adds	r4, r2, r1
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	eb43 0501 	adc.w	r5, r3, r1
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	00eb      	lsls	r3, r5, #3
 8005ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cea:	00e2      	lsls	r2, r4, #3
 8005cec:	4614      	mov	r4, r2
 8005cee:	461d      	mov	r5, r3
 8005cf0:	4643      	mov	r3, r8
 8005cf2:	18e3      	adds	r3, r4, r3
 8005cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	eb45 0303 	adc.w	r3, r5, r3
 8005cfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	f04f 0300 	mov.w	r3, #0
 8005d1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d1e:	4629      	mov	r1, r5
 8005d20:	008b      	lsls	r3, r1, #2
 8005d22:	4621      	mov	r1, r4
 8005d24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d28:	4621      	mov	r1, r4
 8005d2a:	008a      	lsls	r2, r1, #2
 8005d2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d30:	f7fa ffaa 	bl	8000c88 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4b60      	ldr	r3, [pc, #384]	@ (8005ebc <UART_SetConfig+0x4e4>)
 8005d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	011c      	lsls	r4, r3, #4
 8005d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d54:	4642      	mov	r2, r8
 8005d56:	464b      	mov	r3, r9
 8005d58:	1891      	adds	r1, r2, r2
 8005d5a:	61b9      	str	r1, [r7, #24]
 8005d5c:	415b      	adcs	r3, r3
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d64:	4641      	mov	r1, r8
 8005d66:	1851      	adds	r1, r2, r1
 8005d68:	6139      	str	r1, [r7, #16]
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	414b      	adcs	r3, r1
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d7c:	4659      	mov	r1, fp
 8005d7e:	00cb      	lsls	r3, r1, #3
 8005d80:	4651      	mov	r1, sl
 8005d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d86:	4651      	mov	r1, sl
 8005d88:	00ca      	lsls	r2, r1, #3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4642      	mov	r2, r8
 8005d92:	189b      	adds	r3, r3, r2
 8005d94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d98:	464b      	mov	r3, r9
 8005d9a:	460a      	mov	r2, r1
 8005d9c:	eb42 0303 	adc.w	r3, r2, r3
 8005da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	008b      	lsls	r3, r1, #2
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	008a      	lsls	r2, r1, #2
 8005dca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dce:	f7fa ff5b 	bl	8000c88 <__aeabi_uldivmod>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4b38      	ldr	r3, [pc, #224]	@ (8005ebc <UART_SetConfig+0x4e4>)
 8005dda:	fba3 2301 	umull	r2, r3, r3, r1
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2264      	movs	r2, #100	@ 0x64
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	1acb      	subs	r3, r1, r3
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	3332      	adds	r3, #50	@ 0x32
 8005dec:	4a33      	ldr	r2, [pc, #204]	@ (8005ebc <UART_SetConfig+0x4e4>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005df8:	441c      	add	r4, r3
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e02:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	415b      	adcs	r3, r3
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e18:	4641      	mov	r1, r8
 8005e1a:	1851      	adds	r1, r2, r1
 8005e1c:	6039      	str	r1, [r7, #0]
 8005e1e:	4649      	mov	r1, r9
 8005e20:	414b      	adcs	r3, r1
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e30:	4659      	mov	r1, fp
 8005e32:	00cb      	lsls	r3, r1, #3
 8005e34:	4651      	mov	r1, sl
 8005e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	00ca      	lsls	r2, r1, #3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	4619      	mov	r1, r3
 8005e42:	4603      	mov	r3, r0
 8005e44:	4642      	mov	r2, r8
 8005e46:	189b      	adds	r3, r3, r2
 8005e48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	460a      	mov	r2, r1
 8005e4e:	eb42 0303 	adc.w	r3, r2, r3
 8005e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	008b      	lsls	r3, r1, #2
 8005e70:	4641      	mov	r1, r8
 8005e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e76:	4641      	mov	r1, r8
 8005e78:	008a      	lsls	r2, r1, #2
 8005e7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e7e:	f7fa ff03 	bl	8000c88 <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4b0d      	ldr	r3, [pc, #52]	@ (8005ebc <UART_SetConfig+0x4e4>)
 8005e88:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2164      	movs	r1, #100	@ 0x64
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	3332      	adds	r3, #50	@ 0x32
 8005e9a:	4a08      	ldr	r2, [pc, #32]	@ (8005ebc <UART_SetConfig+0x4e4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 020f 	and.w	r2, r3, #15
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4422      	add	r2, r4
 8005eae:	609a      	str	r2, [r3, #8]
}
 8005eb0:	bf00      	nop
 8005eb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ebc:	51eb851f 	.word	0x51eb851f

08005ec0 <Encoder_Init>:

#include "ENCODER.h"
#include "math.h"

void Encoder_Init(ENCODER_TypeDef* ENCODER, TIM_HandleTypeDef* htim, uint16_t pulsePerRev, float deltaT)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	ed87 0a00 	vstr	s0, [r7]
 8005ed0:	80fb      	strh	r3, [r7, #6]
  ENCODER->htim = htim;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	601a      	str	r2, [r3, #0]
  ENCODER->encoder_PPR = pulsePerRev;
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	619a      	str	r2, [r3, #24]
  ENCODER->deltaT = deltaT;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <Encoder_GetPulse>:

void Encoder_GetPulse(ENCODER_TypeDef* ENCODER, ENCODER_MODE_t CountMode)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  ENCODER->count_timer += (int16_t)__HAL_TIM_GET_COUNTER(ENCODER->htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	b21a      	sxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	605a      	str	r2, [r3, #4]
  __HAL_TIM_SET_COUNTER(ENCODER->htim, 0);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	625a      	str	r2, [r3, #36]	@ 0x24

  switch (CountMode)
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <Encoder_GetPulse+0x36>
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d00a      	beq.n	8005f3a <Encoder_GetPulse+0x4a>
  
  case MODE_x4:
    ENCODER->encoder_count_x4 = ENCODER->count_timer;
    break;
  }
}
 8005f24:	e00e      	b.n	8005f44 <Encoder_GetPulse+0x54>
    ENCODER->encoder_count_x1 = ENCODER->count_timer / 4;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da00      	bge.n	8005f30 <Encoder_GetPulse+0x40>
 8005f2e:	3303      	adds	r3, #3
 8005f30:	109b      	asrs	r3, r3, #2
 8005f32:	461a      	mov	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	611a      	str	r2, [r3, #16]
    break;
 8005f38:	e004      	b.n	8005f44 <Encoder_GetPulse+0x54>
    ENCODER->encoder_count_x4 = ENCODER->count_timer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	609a      	str	r2, [r3, #8]
    break;
 8005f42:	bf00      	nop
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <Encoder_GetPulse_return>:

float Encoder_GetPulse_return(ENCODER_TypeDef* ENCODER, ENCODER_MODE_t CountMode)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  ENCODER->count_timer += (int16_t)__HAL_TIM_GET_COUNTER(ENCODER->htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	b21a      	sxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	441a      	add	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	605a      	str	r2, [r3, #4]
  __HAL_TIM_SET_COUNTER(ENCODER->htim, 0);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	625a      	str	r2, [r3, #36]	@ 0x24

  switch (CountMode)
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <Encoder_GetPulse_return+0x36>
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d00a      	beq.n	8005f9a <Encoder_GetPulse_return+0x4a>
 8005f84:	e00e      	b.n	8005fa4 <Encoder_GetPulse_return+0x54>
  {
  case MODE_x1:
    ENCODER->encoder_count_x4 = ENCODER->count_timer / 4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da00      	bge.n	8005f90 <Encoder_GetPulse_return+0x40>
 8005f8e:	3303      	adds	r3, #3
 8005f90:	109b      	asrs	r3, r3, #2
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]
    break;
 8005f98:	e004      	b.n	8005fa4 <Encoder_GetPulse_return+0x54>
  
  case MODE_x4:
    ENCODER->encoder_count_x4 = ENCODER->count_timer;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	609a      	str	r2, [r3, #8]
    break;
 8005fa2:	bf00      	nop
  }

  return ENCODER->encoder_count_x4;  
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	ee07 3a90 	vmov	s15, r3
 8005fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8005fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <Encoder_GetSpeed>:

float Encoder_GetSpeed(ENCODER_TypeDef* ENCODER, ENCODER_MODE_t CountMode)
{
 8005fc0:	b5b0      	push	{r4, r5, r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  switch (CountMode)
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d079      	beq.n	80060c6 <Encoder_GetSpeed+0x106>
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	f040 80ee 	bne.w	80061b4 <Encoder_GetSpeed+0x1f4>
  {
  case MODE_x4:
    ENCODER->vel_Real = (((ENCODER->encoder_count_x4 - ENCODER->encoder_count_x4_pre) / ENCODER->deltaT) / ENCODER->encoder_PPR) * (2 * M_PI) * 0.0325; // rad/s * R_banh
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006000:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006004:	ee16 0a90 	vmov	r0, s13
 8006008:	f7fa fa9e 	bl	8000548 <__aeabi_f2d>
 800600c:	a36e      	add	r3, pc, #440	@ (adr r3, 80061c8 <Encoder_GetSpeed+0x208>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f7fa faf1 	bl	80005f8 <__aeabi_dmul>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	a36c      	add	r3, pc, #432	@ (adr r3, 80061d0 <Encoder_GetSpeed+0x210>)
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f7fa fae8 	bl	80005f8 <__aeabi_dmul>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4610      	mov	r0, r2
 800602e:	4619      	mov	r1, r3
 8006030:	f7fa fdda 	bl	8000be8 <__aeabi_d2f>
 8006034:	4602      	mov	r2, r0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	61da      	str	r2, [r3, #28]
    ENCODER->vel_Fil = 0.854 * ENCODER->vel_Fil + 0.0728 * ENCODER->vel_Real + 0.0728 * ENCODER->vel_Pre;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa fa82 	bl	8000548 <__aeabi_f2d>
 8006044:	a364      	add	r3, pc, #400	@ (adr r3, 80061d8 <Encoder_GetSpeed+0x218>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa fad5 	bl	80005f8 <__aeabi_dmul>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4614      	mov	r4, r2
 8006054:	461d      	mov	r5, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fa fa74 	bl	8000548 <__aeabi_f2d>
 8006060:	a35f      	add	r3, pc, #380	@ (adr r3, 80061e0 <Encoder_GetSpeed+0x220>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa fac7 	bl	80005f8 <__aeabi_dmul>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa f90b 	bl	800028c <__adddf3>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4614      	mov	r4, r2
 800607c:	461d      	mov	r5, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fa fa60 	bl	8000548 <__aeabi_f2d>
 8006088:	a355      	add	r3, pc, #340	@ (adr r3, 80061e0 <Encoder_GetSpeed+0x220>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa fab3 	bl	80005f8 <__aeabi_dmul>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	f7fa f8f7 	bl	800028c <__adddf3>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4610      	mov	r0, r2
 80060a4:	4619      	mov	r1, r3
 80060a6:	f7fa fd9f 	bl	8000be8 <__aeabi_d2f>
 80060aa:	4602      	mov	r2, r0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	625a      	str	r2, [r3, #36]	@ 0x24

    ENCODER->vel_Pre = ENCODER->vel_Real;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	621a      	str	r2, [r3, #32]
		ENCODER->encoder_count_x4_pre = ENCODER->encoder_count_x4;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]

		return ENCODER->vel_Fil;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	e078      	b.n	80061b8 <Encoder_GetSpeed+0x1f8>
    break;
  
  case MODE_x1:
    ENCODER->vel_Real = (((ENCODER->encoder_count_x1 - ENCODER->encoder_count_x1_pre) / ENCODER->deltaT) / ENCODER->encoder_PPR) * (2 * M_PI) * 0.0325; // rad/s * R_banh
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691a      	ldr	r2, [r3, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80060de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80060f2:	ee16 0a90 	vmov	r0, s13
 80060f6:	f7fa fa27 	bl	8000548 <__aeabi_f2d>
 80060fa:	a333      	add	r3, pc, #204	@ (adr r3, 80061c8 <Encoder_GetSpeed+0x208>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f7fa fa7a 	bl	80005f8 <__aeabi_dmul>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4610      	mov	r0, r2
 800610a:	4619      	mov	r1, r3
 800610c:	a330      	add	r3, pc, #192	@ (adr r3, 80061d0 <Encoder_GetSpeed+0x210>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa fa71 	bl	80005f8 <__aeabi_dmul>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	f7fa fd63 	bl	8000be8 <__aeabi_d2f>
 8006122:	4602      	mov	r2, r0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	61da      	str	r2, [r3, #28]
    ENCODER->vel_Fil = 0.854 * ENCODER->vel_Fil + 0.0728 * ENCODER->vel_Real + 0.0728 * ENCODER->vel_Pre;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fa0b 	bl	8000548 <__aeabi_f2d>
 8006132:	a329      	add	r3, pc, #164	@ (adr r3, 80061d8 <Encoder_GetSpeed+0x218>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa fa5e 	bl	80005f8 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4614      	mov	r4, r2
 8006142:	461d      	mov	r5, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fa f9fd 	bl	8000548 <__aeabi_f2d>
 800614e:	a324      	add	r3, pc, #144	@ (adr r3, 80061e0 <Encoder_GetSpeed+0x220>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa fa50 	bl	80005f8 <__aeabi_dmul>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4620      	mov	r0, r4
 800615e:	4629      	mov	r1, r5
 8006160:	f7fa f894 	bl	800028c <__adddf3>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4614      	mov	r4, r2
 800616a:	461d      	mov	r5, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fa f9e9 	bl	8000548 <__aeabi_f2d>
 8006176:	a31a      	add	r3, pc, #104	@ (adr r3, 80061e0 <Encoder_GetSpeed+0x220>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa fa3c 	bl	80005f8 <__aeabi_dmul>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4620      	mov	r0, r4
 8006186:	4629      	mov	r1, r5
 8006188:	f7fa f880 	bl	800028c <__adddf3>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4610      	mov	r0, r2
 8006192:	4619      	mov	r1, r3
 8006194:	f7fa fd28 	bl	8000be8 <__aeabi_d2f>
 8006198:	4602      	mov	r2, r0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	625a      	str	r2, [r3, #36]	@ 0x24

    ENCODER->vel_Pre = ENCODER->vel_Real;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]
		ENCODER->encoder_count_x1_pre = ENCODER->encoder_count_x1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	615a      	str	r2, [r3, #20]

		return ENCODER->vel_Fil;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	e001      	b.n	80061b8 <Encoder_GetSpeed+0x1f8>
    break;
  }

  return 0;
 80061b4:	f04f 0300 	mov.w	r3, #0
}
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eeb0 0a67 	vmov.f32	s0, s15
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bdb0      	pop	{r4, r5, r7, pc}
 80061c6:	bf00      	nop
 80061c8:	54442d18 	.word	0x54442d18
 80061cc:	401921fb 	.word	0x401921fb
 80061d0:	0a3d70a4 	.word	0x0a3d70a4
 80061d4:	3fa0a3d7 	.word	0x3fa0a3d7
 80061d8:	ced91687 	.word	0xced91687
 80061dc:	3feb53f7 	.word	0x3feb53f7
 80061e0:	532617c2 	.word	0x532617c2
 80061e4:	3fb2a305 	.word	0x3fb2a305

080061e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061fa:	2b84      	cmp	r3, #132	@ 0x84
 80061fc:	d005      	beq.n	800620a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	3303      	adds	r3, #3
 8006208:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800620a:	68fb      	ldr	r3, [r7, #12]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800621c:	f000 fae4 	bl	80067e8 <vTaskStartScheduler>
  
  return osOK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	bd80      	pop	{r7, pc}

08006226 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006228:	b089      	sub	sp, #36	@ 0x24
 800622a:	af04      	add	r7, sp, #16
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d020      	beq.n	800627a <osThreadCreate+0x54>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01c      	beq.n	800627a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685c      	ldr	r4, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691e      	ldr	r6, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff ffc8 	bl	80061e8 <makeFreeRtosPriority>
 8006258:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006262:	9202      	str	r2, [sp, #8]
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	9100      	str	r1, [sp, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	4632      	mov	r2, r6
 800626c:	4629      	mov	r1, r5
 800626e:	4620      	mov	r0, r4
 8006270:	f000 f8ed 	bl	800644e <xTaskCreateStatic>
 8006274:	4603      	mov	r3, r0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e01c      	b.n	80062b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685c      	ldr	r4, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006286:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ffaa 	bl	80061e8 <makeFreeRtosPriority>
 8006294:	4602      	mov	r2, r0
 8006296:	f107 030c 	add.w	r3, r7, #12
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	9200      	str	r2, [sp, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	4632      	mov	r2, r6
 80062a2:	4629      	mov	r1, r5
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 f932 	bl	800650e <xTaskCreate>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d001      	beq.n	80062b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062b4:	68fb      	ldr	r3, [r7, #12]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <osDelay+0x16>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	e000      	b.n	80062d6 <osDelay+0x18>
 80062d4:	2301      	movs	r3, #1
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fa50 	bl	800677c <vTaskDelay>
  
  return osOK;
 80062dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f103 0208 	add.w	r2, r3, #8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f04f 32ff 	mov.w	r2, #4294967295
 80062fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f103 0208 	add.w	r2, r3, #8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f103 0208 	add.w	r2, r3, #8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d103      	bne.n	80063a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e00c      	b.n	80063c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3308      	adds	r3, #8
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e002      	b.n	80063b6 <vListInsert+0x2e>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d2f6      	bcs.n	80063b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063fa:	b480      	push	{r7}
 80063fc:	b085      	sub	sp, #20
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6892      	ldr	r2, [r2, #8]
 8006410:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6852      	ldr	r2, [r2, #4]
 800641a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	d103      	bne.n	800642e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800644e:	b580      	push	{r7, lr}
 8006450:	b08e      	sub	sp, #56	@ 0x38
 8006452:	af04      	add	r7, sp, #16
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800645c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	61fb      	str	r3, [r7, #28]
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006498:	2354      	movs	r3, #84	@ 0x54
 800649a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b54      	cmp	r3, #84	@ 0x54
 80064a0:	d00b      	beq.n	80064ba <xTaskCreateStatic+0x6c>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	61bb      	str	r3, [r7, #24]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01e      	beq.n	8006500 <xTaskCreateStatic+0xb2>
 80064c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064da:	2300      	movs	r3, #0
 80064dc:	9303      	str	r3, [sp, #12]
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	9302      	str	r3, [sp, #8]
 80064e2:	f107 0314 	add.w	r3, r7, #20
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	68b9      	ldr	r1, [r7, #8]
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f850 	bl	8006598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064fa:	f000 f8d5 	bl	80066a8 <prvAddNewTaskToReadyList>
 80064fe:	e001      	b.n	8006504 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006504:	697b      	ldr	r3, [r7, #20]
	}
 8006506:	4618      	mov	r0, r3
 8006508:	3728      	adds	r7, #40	@ 0x28
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800650e:	b580      	push	{r7, lr}
 8006510:	b08c      	sub	sp, #48	@ 0x30
 8006512:	af04      	add	r7, sp, #16
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	603b      	str	r3, [r7, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fed0 	bl	80072c8 <pvPortMalloc>
 8006528:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006530:	2054      	movs	r0, #84	@ 0x54
 8006532:	f000 fec9 	bl	80072c8 <pvPortMalloc>
 8006536:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
 8006544:	e005      	b.n	8006552 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006546:	6978      	ldr	r0, [r7, #20]
 8006548:	f000 ff8c 	bl	8007464 <vPortFree>
 800654c:	e001      	b.n	8006552 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d017      	beq.n	8006588 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	2300      	movs	r3, #0
 8006564:	9303      	str	r3, [sp, #12]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	9302      	str	r3, [sp, #8]
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f80e 	bl	8006598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800657c:	69f8      	ldr	r0, [r7, #28]
 800657e:	f000 f893 	bl	80066a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006582:	2301      	movs	r3, #1
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	e002      	b.n	800658e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006588:	f04f 33ff 	mov.w	r3, #4294967295
 800658c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800658e:	69bb      	ldr	r3, [r7, #24]
	}
 8006590:	4618      	mov	r0, r3
 8006592:	3720      	adds	r7, #32
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065b0:	3b01      	subs	r3, #1
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f023 0307 	bic.w	r3, r3, #7
 80065be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	617b      	str	r3, [r7, #20]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01f      	beq.n	8006628 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	e012      	b.n	8006614 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	3334      	adds	r3, #52	@ 0x34
 80065fe:	460a      	mov	r2, r1
 8006600:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d006      	beq.n	800661c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3301      	adds	r3, #1
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d9e9      	bls.n	80065ee <prvInitialiseNewTask+0x56>
 800661a:	e000      	b.n	800661e <prvInitialiseNewTask+0x86>
			{
				break;
 800661c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006626:	e003      	b.n	8006630 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	2b06      	cmp	r3, #6
 8006634:	d901      	bls.n	800663a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006636:	2306      	movs	r3, #6
 8006638:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800663e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006644:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	2200      	movs	r2, #0
 800664a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800664c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fe68 	bl	8006326 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	3318      	adds	r3, #24
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fe63 	bl	8006326 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006664:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	f1c3 0207 	rsb	r2, r3, #7
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006674:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800667c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f000 fc0d 	bl	8006ea8 <pxPortInitialiseStack>
 800668e:	4602      	mov	r2, r0
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066b0:	f000 fd2a 	bl	8007108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006760 <prvAddNewTaskToReadyList+0xb8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	4a29      	ldr	r2, [pc, #164]	@ (8006760 <prvAddNewTaskToReadyList+0xb8>)
 80066bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066be:	4b29      	ldr	r3, [pc, #164]	@ (8006764 <prvAddNewTaskToReadyList+0xbc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066c6:	4a27      	ldr	r2, [pc, #156]	@ (8006764 <prvAddNewTaskToReadyList+0xbc>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066cc:	4b24      	ldr	r3, [pc, #144]	@ (8006760 <prvAddNewTaskToReadyList+0xb8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d110      	bne.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066d4:	f000 fac4 	bl	8006c60 <prvInitialiseTaskLists>
 80066d8:	e00d      	b.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066da:	4b23      	ldr	r3, [pc, #140]	@ (8006768 <prvAddNewTaskToReadyList+0xc0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066e2:	4b20      	ldr	r3, [pc, #128]	@ (8006764 <prvAddNewTaskToReadyList+0xbc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d802      	bhi.n	80066f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006764 <prvAddNewTaskToReadyList+0xbc>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066f6:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <prvAddNewTaskToReadyList+0xc4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	4a1b      	ldr	r2, [pc, #108]	@ (800676c <prvAddNewTaskToReadyList+0xc4>)
 80066fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	2201      	movs	r2, #1
 8006706:	409a      	lsls	r2, r3
 8006708:	4b19      	ldr	r3, [pc, #100]	@ (8006770 <prvAddNewTaskToReadyList+0xc8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4313      	orrs	r3, r2
 800670e:	4a18      	ldr	r2, [pc, #96]	@ (8006770 <prvAddNewTaskToReadyList+0xc8>)
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4a15      	ldr	r2, [pc, #84]	@ (8006774 <prvAddNewTaskToReadyList+0xcc>)
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f7ff fe09 	bl	8006340 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800672e:	f000 fd1d 	bl	800716c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006732:	4b0d      	ldr	r3, [pc, #52]	@ (8006768 <prvAddNewTaskToReadyList+0xc0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800673a:	4b0a      	ldr	r3, [pc, #40]	@ (8006764 <prvAddNewTaskToReadyList+0xbc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d207      	bcs.n	8006758 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006748:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <prvAddNewTaskToReadyList+0xd0>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	200008e8 	.word	0x200008e8
 8006764:	200007e8 	.word	0x200007e8
 8006768:	200008f4 	.word	0x200008f4
 800676c:	20000904 	.word	0x20000904
 8006770:	200008f0 	.word	0x200008f0
 8006774:	200007ec 	.word	0x200007ec
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d018      	beq.n	80067c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800678e:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <vTaskDelay+0x64>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <vTaskDelay+0x32>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60bb      	str	r3, [r7, #8]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067ae:	f000 f87d 	bl	80068ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067b2:	2100      	movs	r1, #0
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fb11 	bl	8006ddc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ba:	f000 f885 	bl	80068c8 <xTaskResumeAll>
 80067be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d107      	bne.n	80067d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80067c6:	4b07      	ldr	r3, [pc, #28]	@ (80067e4 <vTaskDelay+0x68>)
 80067c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000910 	.word	0x20000910
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	@ 0x28
 80067ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067f6:	463a      	mov	r2, r7
 80067f8:	1d39      	adds	r1, r7, #4
 80067fa:	f107 0308 	add.w	r3, r7, #8
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fa fbf0 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	9202      	str	r2, [sp, #8]
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	460a      	mov	r2, r1
 8006816:	491f      	ldr	r1, [pc, #124]	@ (8006894 <vTaskStartScheduler+0xac>)
 8006818:	481f      	ldr	r0, [pc, #124]	@ (8006898 <vTaskStartScheduler+0xb0>)
 800681a:	f7ff fe18 	bl	800644e <xTaskCreateStatic>
 800681e:	4603      	mov	r3, r0
 8006820:	4a1e      	ldr	r2, [pc, #120]	@ (800689c <vTaskStartScheduler+0xb4>)
 8006822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006824:	4b1d      	ldr	r3, [pc, #116]	@ (800689c <vTaskStartScheduler+0xb4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e001      	b.n	8006836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d116      	bne.n	800686a <vTaskStartScheduler+0x82>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	613b      	str	r3, [r7, #16]
}
 800684e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006850:	4b13      	ldr	r3, [pc, #76]	@ (80068a0 <vTaskStartScheduler+0xb8>)
 8006852:	f04f 32ff 	mov.w	r2, #4294967295
 8006856:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006858:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <vTaskStartScheduler+0xbc>)
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800685e:	4b12      	ldr	r3, [pc, #72]	@ (80068a8 <vTaskStartScheduler+0xc0>)
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006864:	f000 fbac 	bl	8006fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006868:	e00f      	b.n	800688a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006870:	d10b      	bne.n	800688a <vTaskStartScheduler+0xa2>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	60fb      	str	r3, [r7, #12]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <vTaskStartScheduler+0x9e>
}
 800688a:	bf00      	nop
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	0800c8bc 	.word	0x0800c8bc
 8006898:	08006c31 	.word	0x08006c31
 800689c:	2000090c 	.word	0x2000090c
 80068a0:	20000908 	.word	0x20000908
 80068a4:	200008f4 	.word	0x200008f4
 80068a8:	200008ec 	.word	0x200008ec

080068ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068b0:	4b04      	ldr	r3, [pc, #16]	@ (80068c4 <vTaskSuspendAll+0x18>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	4a03      	ldr	r2, [pc, #12]	@ (80068c4 <vTaskSuspendAll+0x18>)
 80068b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068ba:	bf00      	nop
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20000910 	.word	0x20000910

080068c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068d6:	4b42      	ldr	r3, [pc, #264]	@ (80069e0 <xTaskResumeAll+0x118>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	603b      	str	r3, [r7, #0]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068f6:	f000 fc07 	bl	8007108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068fa:	4b39      	ldr	r3, [pc, #228]	@ (80069e0 <xTaskResumeAll+0x118>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3b01      	subs	r3, #1
 8006900:	4a37      	ldr	r2, [pc, #220]	@ (80069e0 <xTaskResumeAll+0x118>)
 8006902:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006904:	4b36      	ldr	r3, [pc, #216]	@ (80069e0 <xTaskResumeAll+0x118>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d161      	bne.n	80069d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800690c:	4b35      	ldr	r3, [pc, #212]	@ (80069e4 <xTaskResumeAll+0x11c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d05d      	beq.n	80069d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006914:	e02e      	b.n	8006974 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006916:	4b34      	ldr	r3, [pc, #208]	@ (80069e8 <xTaskResumeAll+0x120>)
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3318      	adds	r3, #24
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff fd69 	bl	80063fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3304      	adds	r3, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fd64 	bl	80063fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	2201      	movs	r2, #1
 8006938:	409a      	lsls	r2, r3
 800693a:	4b2c      	ldr	r3, [pc, #176]	@ (80069ec <xTaskResumeAll+0x124>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4313      	orrs	r3, r2
 8006940:	4a2a      	ldr	r2, [pc, #168]	@ (80069ec <xTaskResumeAll+0x124>)
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4a27      	ldr	r2, [pc, #156]	@ (80069f0 <xTaskResumeAll+0x128>)
 8006952:	441a      	add	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7ff fcf0 	bl	8006340 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006964:	4b23      	ldr	r3, [pc, #140]	@ (80069f4 <xTaskResumeAll+0x12c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	429a      	cmp	r2, r3
 800696c:	d302      	bcc.n	8006974 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800696e:	4b22      	ldr	r3, [pc, #136]	@ (80069f8 <xTaskResumeAll+0x130>)
 8006970:	2201      	movs	r2, #1
 8006972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006974:	4b1c      	ldr	r3, [pc, #112]	@ (80069e8 <xTaskResumeAll+0x120>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1cc      	bne.n	8006916 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006982:	f000 fa0b 	bl	8006d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006986:	4b1d      	ldr	r3, [pc, #116]	@ (80069fc <xTaskResumeAll+0x134>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d010      	beq.n	80069b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006992:	f000 f837 	bl	8006a04 <xTaskIncrementTick>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800699c:	4b16      	ldr	r3, [pc, #88]	@ (80069f8 <xTaskResumeAll+0x130>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f1      	bne.n	8006992 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80069ae:	4b13      	ldr	r3, [pc, #76]	@ (80069fc <xTaskResumeAll+0x134>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069b4:	4b10      	ldr	r3, [pc, #64]	@ (80069f8 <xTaskResumeAll+0x130>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069bc:	2301      	movs	r3, #1
 80069be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a00 <xTaskResumeAll+0x138>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069d0:	f000 fbcc 	bl	800716c <vPortExitCritical>

	return xAlreadyYielded;
 80069d4:	68bb      	ldr	r3, [r7, #8]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000910 	.word	0x20000910
 80069e4:	200008e8 	.word	0x200008e8
 80069e8:	200008a8 	.word	0x200008a8
 80069ec:	200008f0 	.word	0x200008f0
 80069f0:	200007ec 	.word	0x200007ec
 80069f4:	200007e8 	.word	0x200007e8
 80069f8:	200008fc 	.word	0x200008fc
 80069fc:	200008f8 	.word	0x200008f8
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8006b4c <xTaskIncrementTick+0x148>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 808f 	bne.w	8006b36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a18:	4b4d      	ldr	r3, [pc, #308]	@ (8006b50 <xTaskIncrementTick+0x14c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a20:	4a4b      	ldr	r2, [pc, #300]	@ (8006b50 <xTaskIncrementTick+0x14c>)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d121      	bne.n	8006a70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a2c:	4b49      	ldr	r3, [pc, #292]	@ (8006b54 <xTaskIncrementTick+0x150>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	603b      	str	r3, [r7, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <xTaskIncrementTick+0x46>
 8006a4e:	4b41      	ldr	r3, [pc, #260]	@ (8006b54 <xTaskIncrementTick+0x150>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	4b40      	ldr	r3, [pc, #256]	@ (8006b58 <xTaskIncrementTick+0x154>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a3e      	ldr	r2, [pc, #248]	@ (8006b54 <xTaskIncrementTick+0x150>)
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8006b58 <xTaskIncrementTick+0x154>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	4b3e      	ldr	r3, [pc, #248]	@ (8006b5c <xTaskIncrementTick+0x158>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3301      	adds	r3, #1
 8006a68:	4a3c      	ldr	r2, [pc, #240]	@ (8006b5c <xTaskIncrementTick+0x158>)
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	f000 f996 	bl	8006d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a70:	4b3b      	ldr	r3, [pc, #236]	@ (8006b60 <xTaskIncrementTick+0x15c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d348      	bcc.n	8006b0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a7a:	4b36      	ldr	r3, [pc, #216]	@ (8006b54 <xTaskIncrementTick+0x150>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a84:	4b36      	ldr	r3, [pc, #216]	@ (8006b60 <xTaskIncrementTick+0x15c>)
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8a:	601a      	str	r2, [r3, #0]
					break;
 8006a8c:	e03e      	b.n	8006b0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8e:	4b31      	ldr	r3, [pc, #196]	@ (8006b54 <xTaskIncrementTick+0x150>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d203      	bcs.n	8006aae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8006b60 <xTaskIncrementTick+0x15c>)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006aac:	e02e      	b.n	8006b0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fca1 	bl	80063fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fc98 	bl	80063fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	2201      	movs	r2, #1
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	4b24      	ldr	r3, [pc, #144]	@ (8006b64 <xTaskIncrementTick+0x160>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	4a22      	ldr	r2, [pc, #136]	@ (8006b64 <xTaskIncrementTick+0x160>)
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b68 <xTaskIncrementTick+0x164>)
 8006aea:	441a      	add	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f7ff fc24 	bl	8006340 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b6c <xTaskIncrementTick+0x168>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d3b9      	bcc.n	8006a7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b06:	2301      	movs	r3, #1
 8006b08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b0a:	e7b6      	b.n	8006a7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b0c:	4b17      	ldr	r3, [pc, #92]	@ (8006b6c <xTaskIncrementTick+0x168>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b12:	4915      	ldr	r1, [pc, #84]	@ (8006b68 <xTaskIncrementTick+0x164>)
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d901      	bls.n	8006b28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b28:	4b11      	ldr	r3, [pc, #68]	@ (8006b70 <xTaskIncrementTick+0x16c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e004      	b.n	8006b40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b36:	4b0f      	ldr	r3, [pc, #60]	@ (8006b74 <xTaskIncrementTick+0x170>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8006b74 <xTaskIncrementTick+0x170>)
 8006b3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b40:	697b      	ldr	r3, [r7, #20]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000910 	.word	0x20000910
 8006b50:	200008ec 	.word	0x200008ec
 8006b54:	200008a0 	.word	0x200008a0
 8006b58:	200008a4 	.word	0x200008a4
 8006b5c:	20000900 	.word	0x20000900
 8006b60:	20000908 	.word	0x20000908
 8006b64:	200008f0 	.word	0x200008f0
 8006b68:	200007ec 	.word	0x200007ec
 8006b6c:	200007e8 	.word	0x200007e8
 8006b70:	200008fc 	.word	0x200008fc
 8006b74:	200008f8 	.word	0x200008f8

08006b78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b7e:	4b27      	ldr	r3, [pc, #156]	@ (8006c1c <vTaskSwitchContext+0xa4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b86:	4b26      	ldr	r3, [pc, #152]	@ (8006c20 <vTaskSwitchContext+0xa8>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b8c:	e040      	b.n	8006c10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006b8e:	4b24      	ldr	r3, [pc, #144]	@ (8006c20 <vTaskSwitchContext+0xa8>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b94:	4b23      	ldr	r3, [pc, #140]	@ (8006c24 <vTaskSwitchContext+0xac>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	fab3 f383 	clz	r3, r3
 8006ba0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	f1c3 031f 	rsb	r3, r3, #31
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	491f      	ldr	r1, [pc, #124]	@ (8006c28 <vTaskSwitchContext+0xb0>)
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10b      	bne.n	8006bd6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <vTaskSwitchContext+0x5a>
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4a11      	ldr	r2, [pc, #68]	@ (8006c28 <vTaskSwitchContext+0xb0>)
 8006be2:	4413      	add	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	605a      	str	r2, [r3, #4]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d104      	bne.n	8006c06 <vTaskSwitchContext+0x8e>
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	605a      	str	r2, [r3, #4]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4a07      	ldr	r2, [pc, #28]	@ (8006c2c <vTaskSwitchContext+0xb4>)
 8006c0e:	6013      	str	r3, [r2, #0]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	20000910 	.word	0x20000910
 8006c20:	200008fc 	.word	0x200008fc
 8006c24:	200008f0 	.word	0x200008f0
 8006c28:	200007ec 	.word	0x200007ec
 8006c2c:	200007e8 	.word	0x200007e8

08006c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c38:	f000 f852 	bl	8006ce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c3c:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <prvIdleTask+0x28>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d9f9      	bls.n	8006c38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c44:	4b05      	ldr	r3, [pc, #20]	@ (8006c5c <prvIdleTask+0x2c>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c54:	e7f0      	b.n	8006c38 <prvIdleTask+0x8>
 8006c56:	bf00      	nop
 8006c58:	200007ec 	.word	0x200007ec
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	e00c      	b.n	8006c86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a12      	ldr	r2, [pc, #72]	@ (8006cc0 <prvInitialiseTaskLists+0x60>)
 8006c78:	4413      	add	r3, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fb33 	bl	80062e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3301      	adds	r3, #1
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	d9ef      	bls.n	8006c6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c8c:	480d      	ldr	r0, [pc, #52]	@ (8006cc4 <prvInitialiseTaskLists+0x64>)
 8006c8e:	f7ff fb2a 	bl	80062e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c92:	480d      	ldr	r0, [pc, #52]	@ (8006cc8 <prvInitialiseTaskLists+0x68>)
 8006c94:	f7ff fb27 	bl	80062e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c98:	480c      	ldr	r0, [pc, #48]	@ (8006ccc <prvInitialiseTaskLists+0x6c>)
 8006c9a:	f7ff fb24 	bl	80062e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c9e:	480c      	ldr	r0, [pc, #48]	@ (8006cd0 <prvInitialiseTaskLists+0x70>)
 8006ca0:	f7ff fb21 	bl	80062e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ca4:	480b      	ldr	r0, [pc, #44]	@ (8006cd4 <prvInitialiseTaskLists+0x74>)
 8006ca6:	f7ff fb1e 	bl	80062e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006caa:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd8 <prvInitialiseTaskLists+0x78>)
 8006cac:	4a05      	ldr	r2, [pc, #20]	@ (8006cc4 <prvInitialiseTaskLists+0x64>)
 8006cae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <prvInitialiseTaskLists+0x7c>)
 8006cb2:	4a05      	ldr	r2, [pc, #20]	@ (8006cc8 <prvInitialiseTaskLists+0x68>)
 8006cb4:	601a      	str	r2, [r3, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200007ec 	.word	0x200007ec
 8006cc4:	20000878 	.word	0x20000878
 8006cc8:	2000088c 	.word	0x2000088c
 8006ccc:	200008a8 	.word	0x200008a8
 8006cd0:	200008bc 	.word	0x200008bc
 8006cd4:	200008d4 	.word	0x200008d4
 8006cd8:	200008a0 	.word	0x200008a0
 8006cdc:	200008a4 	.word	0x200008a4

08006ce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ce6:	e019      	b.n	8006d1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ce8:	f000 fa0e 	bl	8007108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cec:	4b10      	ldr	r3, [pc, #64]	@ (8006d30 <prvCheckTasksWaitingTermination+0x50>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fb7e 	bl	80063fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <prvCheckTasksWaitingTermination+0x54>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	4a0b      	ldr	r2, [pc, #44]	@ (8006d34 <prvCheckTasksWaitingTermination+0x54>)
 8006d06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d08:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <prvCheckTasksWaitingTermination+0x58>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d38 <prvCheckTasksWaitingTermination+0x58>)
 8006d10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d12:	f000 fa2b 	bl	800716c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f810 	bl	8006d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <prvCheckTasksWaitingTermination+0x58>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e1      	bne.n	8006ce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200008bc 	.word	0x200008bc
 8006d34:	200008e8 	.word	0x200008e8
 8006d38:	200008d0 	.word	0x200008d0

08006d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d108      	bne.n	8006d60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fb86 	bl	8007464 <vPortFree>
				vPortFree( pxTCB );
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb83 	bl	8007464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d5e:	e019      	b.n	8006d94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d103      	bne.n	8006d72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fb7a 	bl	8007464 <vPortFree>
	}
 8006d70:	e010      	b.n	8006d94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d00b      	beq.n	8006d94 <prvDeleteTCB+0x58>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <prvDeleteTCB+0x54>
	}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da2:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd4 <prvResetNextTaskUnblockTime+0x38>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dac:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006db4:	e008      	b.n	8006dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db6:	4b07      	ldr	r3, [pc, #28]	@ (8006dd4 <prvResetNextTaskUnblockTime+0x38>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a04      	ldr	r2, [pc, #16]	@ (8006dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	200008a0 	.word	0x200008a0
 8006dd8:	20000908 	.word	0x20000908

08006ddc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006de6:	4b29      	ldr	r3, [pc, #164]	@ (8006e8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dec:	4b28      	ldr	r3, [pc, #160]	@ (8006e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fb01 	bl	80063fa <uxListRemove>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10b      	bne.n	8006e16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006dfe:	4b24      	ldr	r3, [pc, #144]	@ (8006e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	2201      	movs	r2, #1
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	43da      	mvns	r2, r3
 8006e0c:	4b21      	ldr	r3, [pc, #132]	@ (8006e94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4013      	ands	r3, r2
 8006e12:	4a20      	ldr	r2, [pc, #128]	@ (8006e94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d10a      	bne.n	8006e34 <prvAddCurrentTaskToDelayedList+0x58>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e24:	4b1a      	ldr	r3, [pc, #104]	@ (8006e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	481a      	ldr	r0, [pc, #104]	@ (8006e98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e2e:	f7ff fa87 	bl	8006340 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e32:	e026      	b.n	8006e82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4413      	add	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e3c:	4b14      	ldr	r3, [pc, #80]	@ (8006e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d209      	bcs.n	8006e60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e4c:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3304      	adds	r3, #4
 8006e56:	4619      	mov	r1, r3
 8006e58:	4610      	mov	r0, r2
 8006e5a:	f7ff fa95 	bl	8006388 <vListInsert>
}
 8006e5e:	e010      	b.n	8006e82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4b0a      	ldr	r3, [pc, #40]	@ (8006e90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	f7ff fa8b 	bl	8006388 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e72:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d202      	bcs.n	8006e82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6013      	str	r3, [r2, #0]
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200008ec 	.word	0x200008ec
 8006e90:	200007e8 	.word	0x200007e8
 8006e94:	200008f0 	.word	0x200008f0
 8006e98:	200008d4 	.word	0x200008d4
 8006e9c:	200008a4 	.word	0x200008a4
 8006ea0:	200008a0 	.word	0x200008a0
 8006ea4:	20000908 	.word	0x20000908

08006ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3b04      	subs	r3, #4
 8006eb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3b04      	subs	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f023 0201 	bic.w	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3b04      	subs	r3, #4
 8006ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8006f0c <pxPortInitialiseStack+0x64>)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3b14      	subs	r3, #20
 8006ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f06f 0202 	mvn.w	r2, #2
 8006ef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3b20      	subs	r3, #32
 8006efc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006efe:	68fb      	ldr	r3, [r7, #12]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	08006f11 	.word	0x08006f11

08006f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f1a:	4b13      	ldr	r3, [pc, #76]	@ (8006f68 <prvTaskExitError+0x58>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d00b      	beq.n	8006f3c <prvTaskExitError+0x2c>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	60fb      	str	r3, [r7, #12]
}
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	e7fd      	b.n	8006f38 <prvTaskExitError+0x28>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60bb      	str	r3, [r7, #8]
}
 8006f4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f50:	bf00      	nop
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0fc      	beq.n	8006f52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20000014 	.word	0x20000014
 8006f6c:	00000000 	.word	0x00000000

08006f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f70:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <pxCurrentTCBConst2>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	6808      	ldr	r0, [r1, #0]
 8006f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	f380 8809 	msr	PSP, r0
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8811 	msr	BASEPRI, r0
 8006f8a:	4770      	bx	lr
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst2>:
 8006f90:	200007e8 	.word	0x200007e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f98:	4808      	ldr	r0, [pc, #32]	@ (8006fbc <prvPortStartFirstTask+0x24>)
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f380 8808 	msr	MSP, r0
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8814 	msr	CONTROL, r0
 8006faa:	b662      	cpsie	i
 8006fac:	b661      	cpsie	f
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	df00      	svc	0
 8006fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fba:	bf00      	nop
 8006fbc:	e000ed08 	.word	0xe000ed08

08006fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fc6:	4b47      	ldr	r3, [pc, #284]	@ (80070e4 <xPortStartScheduler+0x124>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a47      	ldr	r2, [pc, #284]	@ (80070e8 <xPortStartScheduler+0x128>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10b      	bne.n	8006fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	613b      	str	r3, [r7, #16]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80070e4 <xPortStartScheduler+0x124>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a3f      	ldr	r2, [pc, #252]	@ (80070ec <xPortStartScheduler+0x12c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10b      	bne.n	800700a <xPortStartScheduler+0x4a>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	60fb      	str	r3, [r7, #12]
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	e7fd      	b.n	8007006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800700a:	4b39      	ldr	r3, [pc, #228]	@ (80070f0 <xPortStartScheduler+0x130>)
 800700c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	22ff      	movs	r2, #255	@ 0xff
 800701a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800702c:	b2da      	uxtb	r2, r3
 800702e:	4b31      	ldr	r3, [pc, #196]	@ (80070f4 <xPortStartScheduler+0x134>)
 8007030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007032:	4b31      	ldr	r3, [pc, #196]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007034:	2207      	movs	r2, #7
 8007036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007038:	e009      	b.n	800704e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800703a:	4b2f      	ldr	r3, [pc, #188]	@ (80070f8 <xPortStartScheduler+0x138>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3b01      	subs	r3, #1
 8007040:	4a2d      	ldr	r2, [pc, #180]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b80      	cmp	r3, #128	@ 0x80
 8007058:	d0ef      	beq.n	800703a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800705a:	4b27      	ldr	r3, [pc, #156]	@ (80070f8 <xPortStartScheduler+0x138>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f1c3 0307 	rsb	r3, r3, #7
 8007062:	2b04      	cmp	r3, #4
 8007064:	d00b      	beq.n	800707e <xPortStartScheduler+0xbe>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	60bb      	str	r3, [r7, #8]
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	e7fd      	b.n	800707a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800707e:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	4a1c      	ldr	r2, [pc, #112]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007088:	4b1b      	ldr	r3, [pc, #108]	@ (80070f8 <xPortStartScheduler+0x138>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007090:	4a19      	ldr	r2, [pc, #100]	@ (80070f8 <xPortStartScheduler+0x138>)
 8007092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800709c:	4b17      	ldr	r3, [pc, #92]	@ (80070fc <xPortStartScheduler+0x13c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a16      	ldr	r2, [pc, #88]	@ (80070fc <xPortStartScheduler+0x13c>)
 80070a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070a8:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <xPortStartScheduler+0x13c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a13      	ldr	r2, [pc, #76]	@ (80070fc <xPortStartScheduler+0x13c>)
 80070ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070b4:	f000 f8da 	bl	800726c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070b8:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <xPortStartScheduler+0x140>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070be:	f000 f8f9 	bl	80072b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <xPortStartScheduler+0x144>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007104 <xPortStartScheduler+0x144>)
 80070c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070ce:	f7ff ff63 	bl	8006f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070d2:	f7ff fd51 	bl	8006b78 <vTaskSwitchContext>
	prvTaskExitError();
 80070d6:	f7ff ff1b 	bl	8006f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed00 	.word	0xe000ed00
 80070e8:	410fc271 	.word	0x410fc271
 80070ec:	410fc270 	.word	0x410fc270
 80070f0:	e000e400 	.word	0xe000e400
 80070f4:	20000914 	.word	0x20000914
 80070f8:	20000918 	.word	0x20000918
 80070fc:	e000ed20 	.word	0xe000ed20
 8007100:	20000014 	.word	0x20000014
 8007104:	e000ef34 	.word	0xe000ef34

08007108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007122:	4b10      	ldr	r3, [pc, #64]	@ (8007164 <vPortEnterCritical+0x5c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	4a0e      	ldr	r2, [pc, #56]	@ (8007164 <vPortEnterCritical+0x5c>)
 800712a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800712c:	4b0d      	ldr	r3, [pc, #52]	@ (8007164 <vPortEnterCritical+0x5c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d110      	bne.n	8007156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <vPortEnterCritical+0x60>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <vPortEnterCritical+0x4e>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	603b      	str	r3, [r7, #0]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <vPortEnterCritical+0x4a>
	}
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000014 	.word	0x20000014
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007172:	4b12      	ldr	r3, [pc, #72]	@ (80071bc <vPortExitCritical+0x50>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10b      	bne.n	8007192 <vPortExitCritical+0x26>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	607b      	str	r3, [r7, #4]
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	e7fd      	b.n	800718e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <vPortExitCritical+0x50>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3b01      	subs	r3, #1
 8007198:	4a08      	ldr	r2, [pc, #32]	@ (80071bc <vPortExitCritical+0x50>)
 800719a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800719c:	4b07      	ldr	r3, [pc, #28]	@ (80071bc <vPortExitCritical+0x50>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d105      	bne.n	80071b0 <vPortExitCritical+0x44>
 80071a4:	2300      	movs	r3, #0
 80071a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20000014 	.word	0x20000014

080071c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071c0:	f3ef 8009 	mrs	r0, PSP
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	4b15      	ldr	r3, [pc, #84]	@ (8007220 <pxCurrentTCBConst>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f01e 0f10 	tst.w	lr, #16
 80071d0:	bf08      	it	eq
 80071d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	6010      	str	r0, [r2, #0]
 80071dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071e4:	f380 8811 	msr	BASEPRI, r0
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f7ff fcc2 	bl	8006b78 <vTaskSwitchContext>
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f380 8811 	msr	BASEPRI, r0
 80071fc:	bc09      	pop	{r0, r3}
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	6808      	ldr	r0, [r1, #0]
 8007202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007206:	f01e 0f10 	tst.w	lr, #16
 800720a:	bf08      	it	eq
 800720c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007210:	f380 8809 	msr	PSP, r0
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst>:
 8007220:	200007e8 	.word	0x200007e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	607b      	str	r3, [r7, #4]
}
 8007240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007242:	f7ff fbdf 	bl	8006a04 <xTaskIncrementTick>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <SysTick_Handler+0x40>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	2300      	movs	r3, #0
 8007256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f383 8811 	msr	BASEPRI, r3
}
 800725e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007270:	4b0b      	ldr	r3, [pc, #44]	@ (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <vPortSetupTimerInterrupt+0x38>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <vPortSetupTimerInterrupt+0x3c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <vPortSetupTimerInterrupt+0x40>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	4a09      	ldr	r2, [pc, #36]	@ (80072b0 <vPortSetupTimerInterrupt+0x44>)
 800728a:	3b01      	subs	r3, #1
 800728c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800728e:	4b04      	ldr	r3, [pc, #16]	@ (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007290:	2207      	movs	r2, #7
 8007292:	601a      	str	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	e000e010 	.word	0xe000e010
 80072a4:	e000e018 	.word	0xe000e018
 80072a8:	20000008 	.word	0x20000008
 80072ac:	10624dd3 	.word	0x10624dd3
 80072b0:	e000e014 	.word	0xe000e014

080072b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072c4 <vPortEnableVFP+0x10>
 80072b8:	6801      	ldr	r1, [r0, #0]
 80072ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072be:	6001      	str	r1, [r0, #0]
 80072c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072c2:	bf00      	nop
 80072c4:	e000ed88 	.word	0xe000ed88

080072c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	@ 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072d4:	f7ff faea 	bl	80068ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072d8:	4b5c      	ldr	r3, [pc, #368]	@ (800744c <pvPortMalloc+0x184>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072e0:	f000 f924 	bl	800752c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072e4:	4b5a      	ldr	r3, [pc, #360]	@ (8007450 <pvPortMalloc+0x188>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8095 	bne.w	800741c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01e      	beq.n	8007336 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80072f8:	2208      	movs	r2, #8
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	2b00      	cmp	r3, #0
 8007308:	d015      	beq.n	8007336 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f023 0307 	bic.w	r3, r3, #7
 8007310:	3308      	adds	r3, #8
 8007312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <pvPortMalloc+0x6e>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	617b      	str	r3, [r7, #20]
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	e7fd      	b.n	8007332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d06f      	beq.n	800741c <pvPortMalloc+0x154>
 800733c:	4b45      	ldr	r3, [pc, #276]	@ (8007454 <pvPortMalloc+0x18c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d86a      	bhi.n	800741c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007346:	4b44      	ldr	r3, [pc, #272]	@ (8007458 <pvPortMalloc+0x190>)
 8007348:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800734a:	4b43      	ldr	r3, [pc, #268]	@ (8007458 <pvPortMalloc+0x190>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007350:	e004      	b.n	800735c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d903      	bls.n	800736e <pvPortMalloc+0xa6>
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f1      	bne.n	8007352 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800736e:	4b37      	ldr	r3, [pc, #220]	@ (800744c <pvPortMalloc+0x184>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007374:	429a      	cmp	r2, r3
 8007376:	d051      	beq.n	800741c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2208      	movs	r2, #8
 800737e:	4413      	add	r3, r2
 8007380:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	1ad2      	subs	r2, r2, r3
 8007392:	2308      	movs	r3, #8
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	429a      	cmp	r2, r3
 8007398:	d920      	bls.n	80073dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800739a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4413      	add	r3, r2
 80073a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <pvPortMalloc+0xfc>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	613b      	str	r3, [r7, #16]
}
 80073be:	bf00      	nop
 80073c0:	bf00      	nop
 80073c2:	e7fd      	b.n	80073c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073d6:	69b8      	ldr	r0, [r7, #24]
 80073d8:	f000 f90a 	bl	80075f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007454 <pvPortMalloc+0x18c>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007454 <pvPortMalloc+0x18c>)
 80073e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007454 <pvPortMalloc+0x18c>)
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b1b      	ldr	r3, [pc, #108]	@ (800745c <pvPortMalloc+0x194>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d203      	bcs.n	80073fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073f6:	4b17      	ldr	r3, [pc, #92]	@ (8007454 <pvPortMalloc+0x18c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a18      	ldr	r2, [pc, #96]	@ (800745c <pvPortMalloc+0x194>)
 80073fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	4b13      	ldr	r3, [pc, #76]	@ (8007450 <pvPortMalloc+0x188>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	431a      	orrs	r2, r3
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007412:	4b13      	ldr	r3, [pc, #76]	@ (8007460 <pvPortMalloc+0x198>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	4a11      	ldr	r2, [pc, #68]	@ (8007460 <pvPortMalloc+0x198>)
 800741a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800741c:	f7ff fa54 	bl	80068c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <pvPortMalloc+0x17a>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	60fb      	str	r3, [r7, #12]
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	e7fd      	b.n	800743e <pvPortMalloc+0x176>
	return pvReturn;
 8007442:	69fb      	ldr	r3, [r7, #28]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3728      	adds	r7, #40	@ 0x28
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20004524 	.word	0x20004524
 8007450:	20004538 	.word	0x20004538
 8007454:	20004528 	.word	0x20004528
 8007458:	2000451c 	.word	0x2000451c
 800745c:	2000452c 	.word	0x2000452c
 8007460:	20004530 	.word	0x20004530

08007464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d04f      	beq.n	8007516 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007476:	2308      	movs	r3, #8
 8007478:	425b      	negs	r3, r3
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	4b25      	ldr	r3, [pc, #148]	@ (8007520 <vPortFree+0xbc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4013      	ands	r3, r2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10b      	bne.n	80074aa <vPortFree+0x46>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60fb      	str	r3, [r7, #12]
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop
 80074a8:	e7fd      	b.n	80074a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <vPortFree+0x66>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60bb      	str	r3, [r7, #8]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	4b14      	ldr	r3, [pc, #80]	@ (8007520 <vPortFree+0xbc>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01e      	beq.n	8007516 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d11a      	bne.n	8007516 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007520 <vPortFree+0xbc>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	43db      	mvns	r3, r3
 80074ea:	401a      	ands	r2, r3
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074f0:	f7ff f9dc 	bl	80068ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <vPortFree+0xc0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4413      	add	r3, r2
 80074fe:	4a09      	ldr	r2, [pc, #36]	@ (8007524 <vPortFree+0xc0>)
 8007500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007502:	6938      	ldr	r0, [r7, #16]
 8007504:	f000 f874 	bl	80075f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007508:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <vPortFree+0xc4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3301      	adds	r3, #1
 800750e:	4a06      	ldr	r2, [pc, #24]	@ (8007528 <vPortFree+0xc4>)
 8007510:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007512:	f7ff f9d9 	bl	80068c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007516:	bf00      	nop
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20004538 	.word	0x20004538
 8007524:	20004528 	.word	0x20004528
 8007528:	20004534 	.word	0x20004534

0800752c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007532:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007538:	4b27      	ldr	r3, [pc, #156]	@ (80075d8 <prvHeapInit+0xac>)
 800753a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00c      	beq.n	8007560 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3307      	adds	r3, #7
 800754a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0307 	bic.w	r3, r3, #7
 8007552:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	4a1f      	ldr	r2, [pc, #124]	@ (80075d8 <prvHeapInit+0xac>)
 800755c:	4413      	add	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007564:	4a1d      	ldr	r2, [pc, #116]	@ (80075dc <prvHeapInit+0xb0>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800756a:	4b1c      	ldr	r3, [pc, #112]	@ (80075dc <prvHeapInit+0xb0>)
 800756c:	2200      	movs	r2, #0
 800756e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4413      	add	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007578:	2208      	movs	r2, #8
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0307 	bic.w	r3, r3, #7
 8007586:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4a15      	ldr	r2, [pc, #84]	@ (80075e0 <prvHeapInit+0xb4>)
 800758c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800758e:	4b14      	ldr	r3, [pc, #80]	@ (80075e0 <prvHeapInit+0xb4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007596:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <prvHeapInit+0xb4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075ac:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <prvHeapInit+0xb4>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4a0a      	ldr	r2, [pc, #40]	@ (80075e4 <prvHeapInit+0xb8>)
 80075ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4a09      	ldr	r2, [pc, #36]	@ (80075e8 <prvHeapInit+0xbc>)
 80075c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075c4:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <prvHeapInit+0xc0>)
 80075c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80075ca:	601a      	str	r2, [r3, #0]
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	2000091c 	.word	0x2000091c
 80075dc:	2000451c 	.word	0x2000451c
 80075e0:	20004524 	.word	0x20004524
 80075e4:	2000452c 	.word	0x2000452c
 80075e8:	20004528 	.word	0x20004528
 80075ec:	20004538 	.word	0x20004538

080075f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075f8:	4b28      	ldr	r3, [pc, #160]	@ (800769c <prvInsertBlockIntoFreeList+0xac>)
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	e002      	b.n	8007604 <prvInsertBlockIntoFreeList+0x14>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	429a      	cmp	r2, r3
 800760c:	d8f7      	bhi.n	80075fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4413      	add	r3, r2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d108      	bne.n	8007632 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	441a      	add	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	441a      	add	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d118      	bne.n	8007678 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <prvInsertBlockIntoFreeList+0xb0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d00d      	beq.n	800766e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	441a      	add	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	e008      	b.n	8007680 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800766e:	4b0c      	ldr	r3, [pc, #48]	@ (80076a0 <prvInsertBlockIntoFreeList+0xb0>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e003      	b.n	8007680 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	429a      	cmp	r2, r3
 8007686:	d002      	beq.n	800768e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	2000451c 	.word	0x2000451c
 80076a0:	20004524 	.word	0x20004524

080076a4 <PID_Init>:
 */

#include "PID.h"

void PID_Init(PID_TypeDef* pid, float Kp, float Ki, float Kd, float alpha, float sample_time, float uAboveLimit, float uUnderLimit)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	61f8      	str	r0, [r7, #28]
 80076ac:	ed87 0a06 	vstr	s0, [r7, #24]
 80076b0:	edc7 0a05 	vstr	s1, [r7, #20]
 80076b4:	ed87 1a04 	vstr	s2, [r7, #16]
 80076b8:	edc7 1a03 	vstr	s3, [r7, #12]
 80076bc:	ed87 2a02 	vstr	s4, [r7, #8]
 80076c0:	edc7 2a01 	vstr	s5, [r7, #4]
 80076c4:	ed87 3a00 	vstr	s6, [r7]
  PID_clear(pid);
 80076c8:	69f8      	ldr	r0, [r7, #28]
 80076ca:	f000 f81d 	bl	8007708 <PID_clear>
  pid->Kp = Kp;
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	609a      	str	r2, [r3, #8]
  pid->Ki = Ki;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	60da      	str	r2, [r3, #12]
  pid->Kd = Kd;
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	611a      	str	r2, [r3, #16]
  pid->alpha = alpha;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	61da      	str	r2, [r3, #28]
  pid->sample_time = sample_time;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	619a      	str	r2, [r3, #24]
  pid->Kb = 0;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	615a      	str	r2, [r3, #20]
  pid->uAboveLimit = uAboveLimit;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  pid->uUnderLimit = uUnderLimit;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007700:	bf00      	nop
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <PID_clear>:

void PID_clear(PID_TypeDef* pid)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	pid->PTerm = 0;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	621a      	str	r2, [r3, #32]
	pid->ITerm = 0;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->DTerm = 0;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->DTermFil = 0;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->DTermFilPre = 0;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->u = 0;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->uSat = 0;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <PID>:

float PID(PID_TypeDef* pid, float Target, float Current)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007760:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->err = Target - Current;
 8007764:	ed97 7a02 	vldr	s14, [r7, #8]
 8007768:	edd7 7a01 	vldr	s15, [r7, #4]
 800776c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	edc3 7a00 	vstr	s15, [r3]

	if(!pid->Ki) pid->Kb = 0.0;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	edd3 7a03 	vldr	s15, [r3, #12]
 800777c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007784:	d104      	bne.n	8007790 <PID+0x3c>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f04f 0200 	mov.w	r2, #0
 800778c:	615a      	str	r2, [r3, #20]
 800778e:	e009      	b.n	80077a4 <PID+0x50>
	else pid->Kb = 1/(pid->sample_time);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	ed93 7a06 	vldr	s14, [r3, #24]
 8007796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800779a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	edc3 7a05 	vstr	s15, [r3, #20]

	// P Term
	pid->PTerm = pid->Kp * pid->err;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	edd3 7a00 	vldr	s15, [r3]
 80077b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	edc3 7a08 	vstr	s15, [r3, #32]

	// D Term
	pid->DTerm = pid->Kd * (pid->err - pid->err_pre) / (pid->sample_time);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	ed93 7a04 	vldr	s14, [r3, #16]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	edd3 6a00 	vldr	s13, [r3]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80077cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80077d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	pid->DTermFil = pid->alpha * pid->DTerm + (1 - pid->alpha) * pid->DTermFilPre;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80077f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80077fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800780c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// I Term
	pid->ITerm += (pid->Ki * pid->err + pid->Kb * (pid->uSat - pid->u)) * (pid->sample_time);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	edd3 6a03 	vldr	s13, [r3, #12]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	edd3 7a00 	vldr	s15, [r3]
 8007828:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	ed93 6a05 	vldr	s12, [r3, #20]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	edd3 5a0d 	vldr	s11, [r3, #52]	@ 0x34
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800783e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007842:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007846:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	pid->err_pre = pid->err;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]
	pid->DTermFilPre = pid->DTermFil;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	631a      	str	r2, [r3, #48]	@ 0x30

	// PID
	pid->u = pid->PTerm + pid->ITerm + pid->DTermFil;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	ed93 7a08 	vldr	s14, [r3, #32]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800787a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Saturation of PID
	if (pid->u > pid->uAboveLimit)	pid->uSat = pid->uAboveLimit;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800789a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800789e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a2:	dd04      	ble.n	80078ae <PID+0x15a>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80078ac:	e013      	b.n	80078d6 <PID+0x182>
	else if (pid->u < pid->uUnderLimit) pid->uSat = pid->uUnderLimit;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80078ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80078be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c2:	d504      	bpl.n	80078ce <PID+0x17a>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80078cc:	e003      	b.n	80078d6 <PID+0x182>
	else pid->uSat = pid->u;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	635a      	str	r2, [r3, #52]	@ 0x34

	return pid->uSat;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078da:	ee07 3a90 	vmov	s15, r3
}
 80078de:	eeb0 0a67 	vmov.f32	s0, s15
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <PID_reset>:

void PID_reset(PID_TypeDef* pid)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	pid->u = 0;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->uSat = 0;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <__cvt>:
 8007910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	ec57 6b10 	vmov	r6, r7, d0
 8007918:	2f00      	cmp	r7, #0
 800791a:	460c      	mov	r4, r1
 800791c:	4619      	mov	r1, r3
 800791e:	463b      	mov	r3, r7
 8007920:	bfbb      	ittet	lt
 8007922:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007926:	461f      	movlt	r7, r3
 8007928:	2300      	movge	r3, #0
 800792a:	232d      	movlt	r3, #45	@ 0x2d
 800792c:	700b      	strb	r3, [r1, #0]
 800792e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007930:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007934:	4691      	mov	r9, r2
 8007936:	f023 0820 	bic.w	r8, r3, #32
 800793a:	bfbc      	itt	lt
 800793c:	4632      	movlt	r2, r6
 800793e:	4616      	movlt	r6, r2
 8007940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007944:	d005      	beq.n	8007952 <__cvt+0x42>
 8007946:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800794a:	d100      	bne.n	800794e <__cvt+0x3e>
 800794c:	3401      	adds	r4, #1
 800794e:	2102      	movs	r1, #2
 8007950:	e000      	b.n	8007954 <__cvt+0x44>
 8007952:	2103      	movs	r1, #3
 8007954:	ab03      	add	r3, sp, #12
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	ab02      	add	r3, sp, #8
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	ec47 6b10 	vmov	d0, r6, r7
 8007960:	4653      	mov	r3, sl
 8007962:	4622      	mov	r2, r4
 8007964:	f001 f8c0 	bl	8008ae8 <_dtoa_r>
 8007968:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800796c:	4605      	mov	r5, r0
 800796e:	d119      	bne.n	80079a4 <__cvt+0x94>
 8007970:	f019 0f01 	tst.w	r9, #1
 8007974:	d00e      	beq.n	8007994 <__cvt+0x84>
 8007976:	eb00 0904 	add.w	r9, r0, r4
 800797a:	2200      	movs	r2, #0
 800797c:	2300      	movs	r3, #0
 800797e:	4630      	mov	r0, r6
 8007980:	4639      	mov	r1, r7
 8007982:	f7f9 f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007986:	b108      	cbz	r0, 800798c <__cvt+0x7c>
 8007988:	f8cd 900c 	str.w	r9, [sp, #12]
 800798c:	2230      	movs	r2, #48	@ 0x30
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	454b      	cmp	r3, r9
 8007992:	d31e      	bcc.n	80079d2 <__cvt+0xc2>
 8007994:	9b03      	ldr	r3, [sp, #12]
 8007996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007998:	1b5b      	subs	r3, r3, r5
 800799a:	4628      	mov	r0, r5
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	b004      	add	sp, #16
 80079a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80079a8:	eb00 0904 	add.w	r9, r0, r4
 80079ac:	d1e5      	bne.n	800797a <__cvt+0x6a>
 80079ae:	7803      	ldrb	r3, [r0, #0]
 80079b0:	2b30      	cmp	r3, #48	@ 0x30
 80079b2:	d10a      	bne.n	80079ca <__cvt+0xba>
 80079b4:	2200      	movs	r2, #0
 80079b6:	2300      	movs	r3, #0
 80079b8:	4630      	mov	r0, r6
 80079ba:	4639      	mov	r1, r7
 80079bc:	f7f9 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80079c0:	b918      	cbnz	r0, 80079ca <__cvt+0xba>
 80079c2:	f1c4 0401 	rsb	r4, r4, #1
 80079c6:	f8ca 4000 	str.w	r4, [sl]
 80079ca:	f8da 3000 	ldr.w	r3, [sl]
 80079ce:	4499      	add	r9, r3
 80079d0:	e7d3      	b.n	800797a <__cvt+0x6a>
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	9103      	str	r1, [sp, #12]
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e7d9      	b.n	800798e <__cvt+0x7e>

080079da <__exponent>:
 80079da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079dc:	2900      	cmp	r1, #0
 80079de:	bfba      	itte	lt
 80079e0:	4249      	neglt	r1, r1
 80079e2:	232d      	movlt	r3, #45	@ 0x2d
 80079e4:	232b      	movge	r3, #43	@ 0x2b
 80079e6:	2909      	cmp	r1, #9
 80079e8:	7002      	strb	r2, [r0, #0]
 80079ea:	7043      	strb	r3, [r0, #1]
 80079ec:	dd29      	ble.n	8007a42 <__exponent+0x68>
 80079ee:	f10d 0307 	add.w	r3, sp, #7
 80079f2:	461d      	mov	r5, r3
 80079f4:	270a      	movs	r7, #10
 80079f6:	461a      	mov	r2, r3
 80079f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80079fc:	fb07 1416 	mls	r4, r7, r6, r1
 8007a00:	3430      	adds	r4, #48	@ 0x30
 8007a02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a06:	460c      	mov	r4, r1
 8007a08:	2c63      	cmp	r4, #99	@ 0x63
 8007a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a0e:	4631      	mov	r1, r6
 8007a10:	dcf1      	bgt.n	80079f6 <__exponent+0x1c>
 8007a12:	3130      	adds	r1, #48	@ 0x30
 8007a14:	1e94      	subs	r4, r2, #2
 8007a16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a1a:	1c41      	adds	r1, r0, #1
 8007a1c:	4623      	mov	r3, r4
 8007a1e:	42ab      	cmp	r3, r5
 8007a20:	d30a      	bcc.n	8007a38 <__exponent+0x5e>
 8007a22:	f10d 0309 	add.w	r3, sp, #9
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	42ac      	cmp	r4, r5
 8007a2a:	bf88      	it	hi
 8007a2c:	2300      	movhi	r3, #0
 8007a2e:	3302      	adds	r3, #2
 8007a30:	4403      	add	r3, r0
 8007a32:	1a18      	subs	r0, r3, r0
 8007a34:	b003      	add	sp, #12
 8007a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a40:	e7ed      	b.n	8007a1e <__exponent+0x44>
 8007a42:	2330      	movs	r3, #48	@ 0x30
 8007a44:	3130      	adds	r1, #48	@ 0x30
 8007a46:	7083      	strb	r3, [r0, #2]
 8007a48:	70c1      	strb	r1, [r0, #3]
 8007a4a:	1d03      	adds	r3, r0, #4
 8007a4c:	e7f1      	b.n	8007a32 <__exponent+0x58>
	...

08007a50 <_printf_float>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	b08d      	sub	sp, #52	@ 0x34
 8007a56:	460c      	mov	r4, r1
 8007a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	461f      	mov	r7, r3
 8007a60:	4605      	mov	r5, r0
 8007a62:	f000 ff2d 	bl	80088c0 <_localeconv_r>
 8007a66:	6803      	ldr	r3, [r0, #0]
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f8 fc00 	bl	8000270 <strlen>
 8007a70:	2300      	movs	r3, #0
 8007a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a74:	f8d8 3000 	ldr.w	r3, [r8]
 8007a78:	9005      	str	r0, [sp, #20]
 8007a7a:	3307      	adds	r3, #7
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	f103 0208 	add.w	r2, r3, #8
 8007a84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a88:	f8d4 b000 	ldr.w	fp, [r4]
 8007a8c:	f8c8 2000 	str.w	r2, [r8]
 8007a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a98:	9307      	str	r3, [sp, #28]
 8007a9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8007d18 <_printf_float+0x2c8>)
 8007aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aac:	f7f9 f83e 	bl	8000b2c <__aeabi_dcmpun>
 8007ab0:	bb70      	cbnz	r0, 8007b10 <_printf_float+0xc0>
 8007ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab6:	4b98      	ldr	r3, [pc, #608]	@ (8007d18 <_printf_float+0x2c8>)
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8007abc:	f7f9 f818 	bl	8000af0 <__aeabi_dcmple>
 8007ac0:	bb30      	cbnz	r0, 8007b10 <_printf_float+0xc0>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	4649      	mov	r1, r9
 8007aca:	f7f9 f807 	bl	8000adc <__aeabi_dcmplt>
 8007ace:	b110      	cbz	r0, 8007ad6 <_printf_float+0x86>
 8007ad0:	232d      	movs	r3, #45	@ 0x2d
 8007ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad6:	4a91      	ldr	r2, [pc, #580]	@ (8007d1c <_printf_float+0x2cc>)
 8007ad8:	4b91      	ldr	r3, [pc, #580]	@ (8007d20 <_printf_float+0x2d0>)
 8007ada:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ade:	bf94      	ite	ls
 8007ae0:	4690      	movls	r8, r2
 8007ae2:	4698      	movhi	r8, r3
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	f02b 0304 	bic.w	r3, fp, #4
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	f04f 0900 	mov.w	r9, #0
 8007af2:	9700      	str	r7, [sp, #0]
 8007af4:	4633      	mov	r3, r6
 8007af6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007af8:	4621      	mov	r1, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f000 f9d2 	bl	8007ea4 <_printf_common>
 8007b00:	3001      	adds	r0, #1
 8007b02:	f040 808d 	bne.w	8007c20 <_printf_float+0x1d0>
 8007b06:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0a:	b00d      	add	sp, #52	@ 0x34
 8007b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b10:	4642      	mov	r2, r8
 8007b12:	464b      	mov	r3, r9
 8007b14:	4640      	mov	r0, r8
 8007b16:	4649      	mov	r1, r9
 8007b18:	f7f9 f808 	bl	8000b2c <__aeabi_dcmpun>
 8007b1c:	b140      	cbz	r0, 8007b30 <_printf_float+0xe0>
 8007b1e:	464b      	mov	r3, r9
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfbc      	itt	lt
 8007b24:	232d      	movlt	r3, #45	@ 0x2d
 8007b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8007d24 <_printf_float+0x2d4>)
 8007b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8007d28 <_printf_float+0x2d8>)
 8007b2e:	e7d4      	b.n	8007ada <_printf_float+0x8a>
 8007b30:	6863      	ldr	r3, [r4, #4]
 8007b32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b36:	9206      	str	r2, [sp, #24]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	d13b      	bne.n	8007bb4 <_printf_float+0x164>
 8007b3c:	2306      	movs	r3, #6
 8007b3e:	6063      	str	r3, [r4, #4]
 8007b40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b44:	2300      	movs	r3, #0
 8007b46:	6022      	str	r2, [r4, #0]
 8007b48:	9303      	str	r3, [sp, #12]
 8007b4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b50:	ab09      	add	r3, sp, #36	@ 0x24
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	6861      	ldr	r1, [r4, #4]
 8007b56:	ec49 8b10 	vmov	d0, r8, r9
 8007b5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f7ff fed6 	bl	8007910 <__cvt>
 8007b64:	9b06      	ldr	r3, [sp, #24]
 8007b66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b68:	2b47      	cmp	r3, #71	@ 0x47
 8007b6a:	4680      	mov	r8, r0
 8007b6c:	d129      	bne.n	8007bc2 <_printf_float+0x172>
 8007b6e:	1cc8      	adds	r0, r1, #3
 8007b70:	db02      	blt.n	8007b78 <_printf_float+0x128>
 8007b72:	6863      	ldr	r3, [r4, #4]
 8007b74:	4299      	cmp	r1, r3
 8007b76:	dd41      	ble.n	8007bfc <_printf_float+0x1ac>
 8007b78:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b7c:	fa5f fa8a 	uxtb.w	sl, sl
 8007b80:	3901      	subs	r1, #1
 8007b82:	4652      	mov	r2, sl
 8007b84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b88:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b8a:	f7ff ff26 	bl	80079da <__exponent>
 8007b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b90:	1813      	adds	r3, r2, r0
 8007b92:	2a01      	cmp	r2, #1
 8007b94:	4681      	mov	r9, r0
 8007b96:	6123      	str	r3, [r4, #16]
 8007b98:	dc02      	bgt.n	8007ba0 <_printf_float+0x150>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	07d2      	lsls	r2, r2, #31
 8007b9e:	d501      	bpl.n	8007ba4 <_printf_float+0x154>
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0a2      	beq.n	8007af2 <_printf_float+0xa2>
 8007bac:	232d      	movs	r3, #45	@ 0x2d
 8007bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bb2:	e79e      	b.n	8007af2 <_printf_float+0xa2>
 8007bb4:	9a06      	ldr	r2, [sp, #24]
 8007bb6:	2a47      	cmp	r2, #71	@ 0x47
 8007bb8:	d1c2      	bne.n	8007b40 <_printf_float+0xf0>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1c0      	bne.n	8007b40 <_printf_float+0xf0>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7bd      	b.n	8007b3e <_printf_float+0xee>
 8007bc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bc6:	d9db      	bls.n	8007b80 <_printf_float+0x130>
 8007bc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007bcc:	d118      	bne.n	8007c00 <_printf_float+0x1b0>
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	6863      	ldr	r3, [r4, #4]
 8007bd2:	dd0b      	ble.n	8007bec <_printf_float+0x19c>
 8007bd4:	6121      	str	r1, [r4, #16]
 8007bd6:	b913      	cbnz	r3, 8007bde <_printf_float+0x18e>
 8007bd8:	6822      	ldr	r2, [r4, #0]
 8007bda:	07d0      	lsls	r0, r2, #31
 8007bdc:	d502      	bpl.n	8007be4 <_printf_float+0x194>
 8007bde:	3301      	adds	r3, #1
 8007be0:	440b      	add	r3, r1
 8007be2:	6123      	str	r3, [r4, #16]
 8007be4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	e7db      	b.n	8007ba4 <_printf_float+0x154>
 8007bec:	b913      	cbnz	r3, 8007bf4 <_printf_float+0x1a4>
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	07d2      	lsls	r2, r2, #31
 8007bf2:	d501      	bpl.n	8007bf8 <_printf_float+0x1a8>
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	e7f4      	b.n	8007be2 <_printf_float+0x192>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e7f2      	b.n	8007be2 <_printf_float+0x192>
 8007bfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c02:	4299      	cmp	r1, r3
 8007c04:	db05      	blt.n	8007c12 <_printf_float+0x1c2>
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	6121      	str	r1, [r4, #16]
 8007c0a:	07d8      	lsls	r0, r3, #31
 8007c0c:	d5ea      	bpl.n	8007be4 <_printf_float+0x194>
 8007c0e:	1c4b      	adds	r3, r1, #1
 8007c10:	e7e7      	b.n	8007be2 <_printf_float+0x192>
 8007c12:	2900      	cmp	r1, #0
 8007c14:	bfd4      	ite	le
 8007c16:	f1c1 0202 	rsble	r2, r1, #2
 8007c1a:	2201      	movgt	r2, #1
 8007c1c:	4413      	add	r3, r2
 8007c1e:	e7e0      	b.n	8007be2 <_printf_float+0x192>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	055a      	lsls	r2, r3, #21
 8007c24:	d407      	bmi.n	8007c36 <_printf_float+0x1e6>
 8007c26:	6923      	ldr	r3, [r4, #16]
 8007c28:	4642      	mov	r2, r8
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	d12b      	bne.n	8007c8c <_printf_float+0x23c>
 8007c34:	e767      	b.n	8007b06 <_printf_float+0xb6>
 8007c36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c3a:	f240 80dd 	bls.w	8007df8 <_printf_float+0x3a8>
 8007c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c42:	2200      	movs	r2, #0
 8007c44:	2300      	movs	r3, #0
 8007c46:	f7f8 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d033      	beq.n	8007cb6 <_printf_float+0x266>
 8007c4e:	4a37      	ldr	r2, [pc, #220]	@ (8007d2c <_printf_float+0x2dc>)
 8007c50:	2301      	movs	r3, #1
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f43f af54 	beq.w	8007b06 <_printf_float+0xb6>
 8007c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c62:	4543      	cmp	r3, r8
 8007c64:	db02      	blt.n	8007c6c <_printf_float+0x21c>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	07d8      	lsls	r0, r3, #31
 8007c6a:	d50f      	bpl.n	8007c8c <_printf_float+0x23c>
 8007c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f af45 	beq.w	8007b06 <_printf_float+0xb6>
 8007c7c:	f04f 0900 	mov.w	r9, #0
 8007c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c84:	f104 0a1a 	add.w	sl, r4, #26
 8007c88:	45c8      	cmp	r8, r9
 8007c8a:	dc09      	bgt.n	8007ca0 <_printf_float+0x250>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	079b      	lsls	r3, r3, #30
 8007c90:	f100 8103 	bmi.w	8007e9a <_printf_float+0x44a>
 8007c94:	68e0      	ldr	r0, [r4, #12]
 8007c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c98:	4298      	cmp	r0, r3
 8007c9a:	bfb8      	it	lt
 8007c9c:	4618      	movlt	r0, r3
 8007c9e:	e734      	b.n	8007b0a <_printf_float+0xba>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f af2b 	beq.w	8007b06 <_printf_float+0xb6>
 8007cb0:	f109 0901 	add.w	r9, r9, #1
 8007cb4:	e7e8      	b.n	8007c88 <_printf_float+0x238>
 8007cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc39      	bgt.n	8007d30 <_printf_float+0x2e0>
 8007cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d2c <_printf_float+0x2dc>)
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af1d 	beq.w	8007b06 <_printf_float+0xb6>
 8007ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8007cd4:	d102      	bne.n	8007cdc <_printf_float+0x28c>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	07d9      	lsls	r1, r3, #31
 8007cda:	d5d7      	bpl.n	8007c8c <_printf_float+0x23c>
 8007cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	f43f af0d 	beq.w	8007b06 <_printf_float+0xb6>
 8007cec:	f04f 0a00 	mov.w	sl, #0
 8007cf0:	f104 0b1a 	add.w	fp, r4, #26
 8007cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf6:	425b      	negs	r3, r3
 8007cf8:	4553      	cmp	r3, sl
 8007cfa:	dc01      	bgt.n	8007d00 <_printf_float+0x2b0>
 8007cfc:	464b      	mov	r3, r9
 8007cfe:	e793      	b.n	8007c28 <_printf_float+0x1d8>
 8007d00:	2301      	movs	r3, #1
 8007d02:	465a      	mov	r2, fp
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f43f aefb 	beq.w	8007b06 <_printf_float+0xb6>
 8007d10:	f10a 0a01 	add.w	sl, sl, #1
 8007d14:	e7ee      	b.n	8007cf4 <_printf_float+0x2a4>
 8007d16:	bf00      	nop
 8007d18:	7fefffff 	.word	0x7fefffff
 8007d1c:	0800c8f0 	.word	0x0800c8f0
 8007d20:	0800c8f4 	.word	0x0800c8f4
 8007d24:	0800c8f8 	.word	0x0800c8f8
 8007d28:	0800c8fc 	.word	0x0800c8fc
 8007d2c:	0800cc90 	.word	0x0800cc90
 8007d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d36:	4553      	cmp	r3, sl
 8007d38:	bfa8      	it	ge
 8007d3a:	4653      	movge	r3, sl
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	4699      	mov	r9, r3
 8007d40:	dc36      	bgt.n	8007db0 <_printf_float+0x360>
 8007d42:	f04f 0b00 	mov.w	fp, #0
 8007d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d4a:	f104 021a 	add.w	r2, r4, #26
 8007d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d50:	9306      	str	r3, [sp, #24]
 8007d52:	eba3 0309 	sub.w	r3, r3, r9
 8007d56:	455b      	cmp	r3, fp
 8007d58:	dc31      	bgt.n	8007dbe <_printf_float+0x36e>
 8007d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5c:	459a      	cmp	sl, r3
 8007d5e:	dc3a      	bgt.n	8007dd6 <_printf_float+0x386>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	07da      	lsls	r2, r3, #31
 8007d64:	d437      	bmi.n	8007dd6 <_printf_float+0x386>
 8007d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d68:	ebaa 0903 	sub.w	r9, sl, r3
 8007d6c:	9b06      	ldr	r3, [sp, #24]
 8007d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8007d72:	4599      	cmp	r9, r3
 8007d74:	bfa8      	it	ge
 8007d76:	4699      	movge	r9, r3
 8007d78:	f1b9 0f00 	cmp.w	r9, #0
 8007d7c:	dc33      	bgt.n	8007de6 <_printf_float+0x396>
 8007d7e:	f04f 0800 	mov.w	r8, #0
 8007d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d86:	f104 0b1a 	add.w	fp, r4, #26
 8007d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d90:	eba3 0309 	sub.w	r3, r3, r9
 8007d94:	4543      	cmp	r3, r8
 8007d96:	f77f af79 	ble.w	8007c8c <_printf_float+0x23c>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	465a      	mov	r2, fp
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	f43f aeae 	beq.w	8007b06 <_printf_float+0xb6>
 8007daa:	f108 0801 	add.w	r8, r8, #1
 8007dae:	e7ec      	b.n	8007d8a <_printf_float+0x33a>
 8007db0:	4642      	mov	r2, r8
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	d1c2      	bne.n	8007d42 <_printf_float+0x2f2>
 8007dbc:	e6a3      	b.n	8007b06 <_printf_float+0xb6>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	9206      	str	r2, [sp, #24]
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f43f ae9c 	beq.w	8007b06 <_printf_float+0xb6>
 8007dce:	9a06      	ldr	r2, [sp, #24]
 8007dd0:	f10b 0b01 	add.w	fp, fp, #1
 8007dd4:	e7bb      	b.n	8007d4e <_printf_float+0x2fe>
 8007dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1c0      	bne.n	8007d66 <_printf_float+0x316>
 8007de4:	e68f      	b.n	8007b06 <_printf_float+0xb6>
 8007de6:	9a06      	ldr	r2, [sp, #24]
 8007de8:	464b      	mov	r3, r9
 8007dea:	4442      	add	r2, r8
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	d1c3      	bne.n	8007d7e <_printf_float+0x32e>
 8007df6:	e686      	b.n	8007b06 <_printf_float+0xb6>
 8007df8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007dfc:	f1ba 0f01 	cmp.w	sl, #1
 8007e00:	dc01      	bgt.n	8007e06 <_printf_float+0x3b6>
 8007e02:	07db      	lsls	r3, r3, #31
 8007e04:	d536      	bpl.n	8007e74 <_printf_float+0x424>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4642      	mov	r2, r8
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	f43f ae78 	beq.w	8007b06 <_printf_float+0xb6>
 8007e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f ae70 	beq.w	8007b06 <_printf_float+0xb6>
 8007e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e32:	f7f8 fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e36:	b9c0      	cbnz	r0, 8007e6a <_printf_float+0x41a>
 8007e38:	4653      	mov	r3, sl
 8007e3a:	f108 0201 	add.w	r2, r8, #1
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	d10c      	bne.n	8007e62 <_printf_float+0x412>
 8007e48:	e65d      	b.n	8007b06 <_printf_float+0xb6>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	465a      	mov	r2, fp
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f ae56 	beq.w	8007b06 <_printf_float+0xb6>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	45d0      	cmp	r8, sl
 8007e60:	dbf3      	blt.n	8007e4a <_printf_float+0x3fa>
 8007e62:	464b      	mov	r3, r9
 8007e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e68:	e6df      	b.n	8007c2a <_printf_float+0x1da>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f104 0b1a 	add.w	fp, r4, #26
 8007e72:	e7f4      	b.n	8007e5e <_printf_float+0x40e>
 8007e74:	2301      	movs	r3, #1
 8007e76:	4642      	mov	r2, r8
 8007e78:	e7e1      	b.n	8007e3e <_printf_float+0x3ee>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	464a      	mov	r2, r9
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae3e 	beq.w	8007b06 <_printf_float+0xb6>
 8007e8a:	f108 0801 	add.w	r8, r8, #1
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	4543      	cmp	r3, r8
 8007e96:	dcf0      	bgt.n	8007e7a <_printf_float+0x42a>
 8007e98:	e6fc      	b.n	8007c94 <_printf_float+0x244>
 8007e9a:	f04f 0800 	mov.w	r8, #0
 8007e9e:	f104 0919 	add.w	r9, r4, #25
 8007ea2:	e7f4      	b.n	8007e8e <_printf_float+0x43e>

08007ea4 <_printf_common>:
 8007ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	4698      	mov	r8, r3
 8007eac:	688a      	ldr	r2, [r1, #8]
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bfb8      	it	lt
 8007eb8:	4613      	movlt	r3, r2
 8007eba:	6033      	str	r3, [r6, #0]
 8007ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	b10a      	cbz	r2, 8007eca <_printf_common+0x26>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	0699      	lsls	r1, r3, #26
 8007ece:	bf42      	ittt	mi
 8007ed0:	6833      	ldrmi	r3, [r6, #0]
 8007ed2:	3302      	addmi	r3, #2
 8007ed4:	6033      	strmi	r3, [r6, #0]
 8007ed6:	6825      	ldr	r5, [r4, #0]
 8007ed8:	f015 0506 	ands.w	r5, r5, #6
 8007edc:	d106      	bne.n	8007eec <_printf_common+0x48>
 8007ede:	f104 0a19 	add.w	sl, r4, #25
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	6832      	ldr	r2, [r6, #0]
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dc26      	bgt.n	8007f3a <_printf_common+0x96>
 8007eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	3b00      	subs	r3, #0
 8007ef4:	bf18      	it	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	0692      	lsls	r2, r2, #26
 8007efa:	d42b      	bmi.n	8007f54 <_printf_common+0xb0>
 8007efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f00:	4641      	mov	r1, r8
 8007f02:	4638      	mov	r0, r7
 8007f04:	47c8      	blx	r9
 8007f06:	3001      	adds	r0, #1
 8007f08:	d01e      	beq.n	8007f48 <_printf_common+0xa4>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	6922      	ldr	r2, [r4, #16]
 8007f0e:	f003 0306 	and.w	r3, r3, #6
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	bf02      	ittt	eq
 8007f16:	68e5      	ldreq	r5, [r4, #12]
 8007f18:	6833      	ldreq	r3, [r6, #0]
 8007f1a:	1aed      	subeq	r5, r5, r3
 8007f1c:	68a3      	ldr	r3, [r4, #8]
 8007f1e:	bf0c      	ite	eq
 8007f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f24:	2500      	movne	r5, #0
 8007f26:	4293      	cmp	r3, r2
 8007f28:	bfc4      	itt	gt
 8007f2a:	1a9b      	subgt	r3, r3, r2
 8007f2c:	18ed      	addgt	r5, r5, r3
 8007f2e:	2600      	movs	r6, #0
 8007f30:	341a      	adds	r4, #26
 8007f32:	42b5      	cmp	r5, r6
 8007f34:	d11a      	bne.n	8007f6c <_printf_common+0xc8>
 8007f36:	2000      	movs	r0, #0
 8007f38:	e008      	b.n	8007f4c <_printf_common+0xa8>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	4641      	mov	r1, r8
 8007f40:	4638      	mov	r0, r7
 8007f42:	47c8      	blx	r9
 8007f44:	3001      	adds	r0, #1
 8007f46:	d103      	bne.n	8007f50 <_printf_common+0xac>
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	3501      	adds	r5, #1
 8007f52:	e7c6      	b.n	8007ee2 <_printf_common+0x3e>
 8007f54:	18e1      	adds	r1, r4, r3
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	2030      	movs	r0, #48	@ 0x30
 8007f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f5e:	4422      	add	r2, r4
 8007f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f68:	3302      	adds	r3, #2
 8007f6a:	e7c7      	b.n	8007efc <_printf_common+0x58>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4622      	mov	r2, r4
 8007f70:	4641      	mov	r1, r8
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c8      	blx	r9
 8007f76:	3001      	adds	r0, #1
 8007f78:	d0e6      	beq.n	8007f48 <_printf_common+0xa4>
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7d9      	b.n	8007f32 <_printf_common+0x8e>
	...

08007f80 <_printf_i>:
 8007f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	7e0f      	ldrb	r7, [r1, #24]
 8007f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f88:	2f78      	cmp	r7, #120	@ 0x78
 8007f8a:	4691      	mov	r9, r2
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	469a      	mov	sl, r3
 8007f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f96:	d807      	bhi.n	8007fa8 <_printf_i+0x28>
 8007f98:	2f62      	cmp	r7, #98	@ 0x62
 8007f9a:	d80a      	bhi.n	8007fb2 <_printf_i+0x32>
 8007f9c:	2f00      	cmp	r7, #0
 8007f9e:	f000 80d2 	beq.w	8008146 <_printf_i+0x1c6>
 8007fa2:	2f58      	cmp	r7, #88	@ 0x58
 8007fa4:	f000 80b9 	beq.w	800811a <_printf_i+0x19a>
 8007fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fb0:	e03a      	b.n	8008028 <_printf_i+0xa8>
 8007fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fb6:	2b15      	cmp	r3, #21
 8007fb8:	d8f6      	bhi.n	8007fa8 <_printf_i+0x28>
 8007fba:	a101      	add	r1, pc, #4	@ (adr r1, 8007fc0 <_printf_i+0x40>)
 8007fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc0:	08008019 	.word	0x08008019
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	08007fa9 	.word	0x08007fa9
 8007fcc:	08007fa9 	.word	0x08007fa9
 8007fd0:	08007fa9 	.word	0x08007fa9
 8007fd4:	08007fa9 	.word	0x08007fa9
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08007fa9 	.word	0x08007fa9
 8007fe0:	08007fa9 	.word	0x08007fa9
 8007fe4:	08007fa9 	.word	0x08007fa9
 8007fe8:	08007fa9 	.word	0x08007fa9
 8007fec:	0800812d 	.word	0x0800812d
 8007ff0:	08008057 	.word	0x08008057
 8007ff4:	080080e7 	.word	0x080080e7
 8007ff8:	08007fa9 	.word	0x08007fa9
 8007ffc:	08007fa9 	.word	0x08007fa9
 8008000:	0800814f 	.word	0x0800814f
 8008004:	08007fa9 	.word	0x08007fa9
 8008008:	08008057 	.word	0x08008057
 800800c:	08007fa9 	.word	0x08007fa9
 8008010:	08007fa9 	.word	0x08007fa9
 8008014:	080080ef 	.word	0x080080ef
 8008018:	6833      	ldr	r3, [r6, #0]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6032      	str	r2, [r6, #0]
 8008020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008028:	2301      	movs	r3, #1
 800802a:	e09d      	b.n	8008168 <_printf_i+0x1e8>
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	1d19      	adds	r1, r3, #4
 8008032:	6031      	str	r1, [r6, #0]
 8008034:	0606      	lsls	r6, r0, #24
 8008036:	d501      	bpl.n	800803c <_printf_i+0xbc>
 8008038:	681d      	ldr	r5, [r3, #0]
 800803a:	e003      	b.n	8008044 <_printf_i+0xc4>
 800803c:	0645      	lsls	r5, r0, #25
 800803e:	d5fb      	bpl.n	8008038 <_printf_i+0xb8>
 8008040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008044:	2d00      	cmp	r5, #0
 8008046:	da03      	bge.n	8008050 <_printf_i+0xd0>
 8008048:	232d      	movs	r3, #45	@ 0x2d
 800804a:	426d      	negs	r5, r5
 800804c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008050:	4859      	ldr	r0, [pc, #356]	@ (80081b8 <_printf_i+0x238>)
 8008052:	230a      	movs	r3, #10
 8008054:	e011      	b.n	800807a <_printf_i+0xfa>
 8008056:	6821      	ldr	r1, [r4, #0]
 8008058:	6833      	ldr	r3, [r6, #0]
 800805a:	0608      	lsls	r0, r1, #24
 800805c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008060:	d402      	bmi.n	8008068 <_printf_i+0xe8>
 8008062:	0649      	lsls	r1, r1, #25
 8008064:	bf48      	it	mi
 8008066:	b2ad      	uxthmi	r5, r5
 8008068:	2f6f      	cmp	r7, #111	@ 0x6f
 800806a:	4853      	ldr	r0, [pc, #332]	@ (80081b8 <_printf_i+0x238>)
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	bf14      	ite	ne
 8008070:	230a      	movne	r3, #10
 8008072:	2308      	moveq	r3, #8
 8008074:	2100      	movs	r1, #0
 8008076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800807a:	6866      	ldr	r6, [r4, #4]
 800807c:	60a6      	str	r6, [r4, #8]
 800807e:	2e00      	cmp	r6, #0
 8008080:	bfa2      	ittt	ge
 8008082:	6821      	ldrge	r1, [r4, #0]
 8008084:	f021 0104 	bicge.w	r1, r1, #4
 8008088:	6021      	strge	r1, [r4, #0]
 800808a:	b90d      	cbnz	r5, 8008090 <_printf_i+0x110>
 800808c:	2e00      	cmp	r6, #0
 800808e:	d04b      	beq.n	8008128 <_printf_i+0x1a8>
 8008090:	4616      	mov	r6, r2
 8008092:	fbb5 f1f3 	udiv	r1, r5, r3
 8008096:	fb03 5711 	mls	r7, r3, r1, r5
 800809a:	5dc7      	ldrb	r7, [r0, r7]
 800809c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080a0:	462f      	mov	r7, r5
 80080a2:	42bb      	cmp	r3, r7
 80080a4:	460d      	mov	r5, r1
 80080a6:	d9f4      	bls.n	8008092 <_printf_i+0x112>
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d10b      	bne.n	80080c4 <_printf_i+0x144>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	07df      	lsls	r7, r3, #31
 80080b0:	d508      	bpl.n	80080c4 <_printf_i+0x144>
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	6861      	ldr	r1, [r4, #4]
 80080b6:	4299      	cmp	r1, r3
 80080b8:	bfde      	ittt	le
 80080ba:	2330      	movle	r3, #48	@ 0x30
 80080bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080c4:	1b92      	subs	r2, r2, r6
 80080c6:	6122      	str	r2, [r4, #16]
 80080c8:	f8cd a000 	str.w	sl, [sp]
 80080cc:	464b      	mov	r3, r9
 80080ce:	aa03      	add	r2, sp, #12
 80080d0:	4621      	mov	r1, r4
 80080d2:	4640      	mov	r0, r8
 80080d4:	f7ff fee6 	bl	8007ea4 <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	d14a      	bne.n	8008172 <_printf_i+0x1f2>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	b004      	add	sp, #16
 80080e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	f043 0320 	orr.w	r3, r3, #32
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	4833      	ldr	r0, [pc, #204]	@ (80081bc <_printf_i+0x23c>)
 80080f0:	2778      	movs	r7, #120	@ 0x78
 80080f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	6831      	ldr	r1, [r6, #0]
 80080fa:	061f      	lsls	r7, r3, #24
 80080fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008100:	d402      	bmi.n	8008108 <_printf_i+0x188>
 8008102:	065f      	lsls	r7, r3, #25
 8008104:	bf48      	it	mi
 8008106:	b2ad      	uxthmi	r5, r5
 8008108:	6031      	str	r1, [r6, #0]
 800810a:	07d9      	lsls	r1, r3, #31
 800810c:	bf44      	itt	mi
 800810e:	f043 0320 	orrmi.w	r3, r3, #32
 8008112:	6023      	strmi	r3, [r4, #0]
 8008114:	b11d      	cbz	r5, 800811e <_printf_i+0x19e>
 8008116:	2310      	movs	r3, #16
 8008118:	e7ac      	b.n	8008074 <_printf_i+0xf4>
 800811a:	4827      	ldr	r0, [pc, #156]	@ (80081b8 <_printf_i+0x238>)
 800811c:	e7e9      	b.n	80080f2 <_printf_i+0x172>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f023 0320 	bic.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	e7f6      	b.n	8008116 <_printf_i+0x196>
 8008128:	4616      	mov	r6, r2
 800812a:	e7bd      	b.n	80080a8 <_printf_i+0x128>
 800812c:	6833      	ldr	r3, [r6, #0]
 800812e:	6825      	ldr	r5, [r4, #0]
 8008130:	6961      	ldr	r1, [r4, #20]
 8008132:	1d18      	adds	r0, r3, #4
 8008134:	6030      	str	r0, [r6, #0]
 8008136:	062e      	lsls	r6, r5, #24
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	d501      	bpl.n	8008140 <_printf_i+0x1c0>
 800813c:	6019      	str	r1, [r3, #0]
 800813e:	e002      	b.n	8008146 <_printf_i+0x1c6>
 8008140:	0668      	lsls	r0, r5, #25
 8008142:	d5fb      	bpl.n	800813c <_printf_i+0x1bc>
 8008144:	8019      	strh	r1, [r3, #0]
 8008146:	2300      	movs	r3, #0
 8008148:	6123      	str	r3, [r4, #16]
 800814a:	4616      	mov	r6, r2
 800814c:	e7bc      	b.n	80080c8 <_printf_i+0x148>
 800814e:	6833      	ldr	r3, [r6, #0]
 8008150:	1d1a      	adds	r2, r3, #4
 8008152:	6032      	str	r2, [r6, #0]
 8008154:	681e      	ldr	r6, [r3, #0]
 8008156:	6862      	ldr	r2, [r4, #4]
 8008158:	2100      	movs	r1, #0
 800815a:	4630      	mov	r0, r6
 800815c:	f7f8 f838 	bl	80001d0 <memchr>
 8008160:	b108      	cbz	r0, 8008166 <_printf_i+0x1e6>
 8008162:	1b80      	subs	r0, r0, r6
 8008164:	6060      	str	r0, [r4, #4]
 8008166:	6863      	ldr	r3, [r4, #4]
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	2300      	movs	r3, #0
 800816c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008170:	e7aa      	b.n	80080c8 <_printf_i+0x148>
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	4632      	mov	r2, r6
 8008176:	4649      	mov	r1, r9
 8008178:	4640      	mov	r0, r8
 800817a:	47d0      	blx	sl
 800817c:	3001      	adds	r0, #1
 800817e:	d0ad      	beq.n	80080dc <_printf_i+0x15c>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	079b      	lsls	r3, r3, #30
 8008184:	d413      	bmi.n	80081ae <_printf_i+0x22e>
 8008186:	68e0      	ldr	r0, [r4, #12]
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	4298      	cmp	r0, r3
 800818c:	bfb8      	it	lt
 800818e:	4618      	movlt	r0, r3
 8008190:	e7a6      	b.n	80080e0 <_printf_i+0x160>
 8008192:	2301      	movs	r3, #1
 8008194:	4632      	mov	r2, r6
 8008196:	4649      	mov	r1, r9
 8008198:	4640      	mov	r0, r8
 800819a:	47d0      	blx	sl
 800819c:	3001      	adds	r0, #1
 800819e:	d09d      	beq.n	80080dc <_printf_i+0x15c>
 80081a0:	3501      	adds	r5, #1
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	9903      	ldr	r1, [sp, #12]
 80081a6:	1a5b      	subs	r3, r3, r1
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	dcf2      	bgt.n	8008192 <_printf_i+0x212>
 80081ac:	e7eb      	b.n	8008186 <_printf_i+0x206>
 80081ae:	2500      	movs	r5, #0
 80081b0:	f104 0619 	add.w	r6, r4, #25
 80081b4:	e7f5      	b.n	80081a2 <_printf_i+0x222>
 80081b6:	bf00      	nop
 80081b8:	0800c900 	.word	0x0800c900
 80081bc:	0800c911 	.word	0x0800c911

080081c0 <_scanf_float>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	b087      	sub	sp, #28
 80081c6:	4617      	mov	r7, r2
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	688b      	ldr	r3, [r1, #8]
 80081cc:	1e5a      	subs	r2, r3, #1
 80081ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80081d2:	bf81      	itttt	hi
 80081d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80081d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80081dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081e0:	608b      	strhi	r3, [r1, #8]
 80081e2:	680b      	ldr	r3, [r1, #0]
 80081e4:	460a      	mov	r2, r1
 80081e6:	f04f 0500 	mov.w	r5, #0
 80081ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80081ee:	f842 3b1c 	str.w	r3, [r2], #28
 80081f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081f6:	4680      	mov	r8, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	bf98      	it	ls
 80081fc:	f04f 0b00 	movls.w	fp, #0
 8008200:	9201      	str	r2, [sp, #4]
 8008202:	4616      	mov	r6, r2
 8008204:	46aa      	mov	sl, r5
 8008206:	46a9      	mov	r9, r5
 8008208:	9502      	str	r5, [sp, #8]
 800820a:	68a2      	ldr	r2, [r4, #8]
 800820c:	b152      	cbz	r2, 8008224 <_scanf_float+0x64>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b4e      	cmp	r3, #78	@ 0x4e
 8008214:	d864      	bhi.n	80082e0 <_scanf_float+0x120>
 8008216:	2b40      	cmp	r3, #64	@ 0x40
 8008218:	d83c      	bhi.n	8008294 <_scanf_float+0xd4>
 800821a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800821e:	b2c8      	uxtb	r0, r1
 8008220:	280e      	cmp	r0, #14
 8008222:	d93a      	bls.n	800829a <_scanf_float+0xda>
 8008224:	f1b9 0f00 	cmp.w	r9, #0
 8008228:	d003      	beq.n	8008232 <_scanf_float+0x72>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008236:	f1ba 0f01 	cmp.w	sl, #1
 800823a:	f200 8117 	bhi.w	800846c <_scanf_float+0x2ac>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	429e      	cmp	r6, r3
 8008242:	f200 8108 	bhi.w	8008456 <_scanf_float+0x296>
 8008246:	2001      	movs	r0, #1
 8008248:	b007      	add	sp, #28
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008252:	2a0d      	cmp	r2, #13
 8008254:	d8e6      	bhi.n	8008224 <_scanf_float+0x64>
 8008256:	a101      	add	r1, pc, #4	@ (adr r1, 800825c <_scanf_float+0x9c>)
 8008258:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800825c:	080083a3 	.word	0x080083a3
 8008260:	08008225 	.word	0x08008225
 8008264:	08008225 	.word	0x08008225
 8008268:	08008225 	.word	0x08008225
 800826c:	08008403 	.word	0x08008403
 8008270:	080083db 	.word	0x080083db
 8008274:	08008225 	.word	0x08008225
 8008278:	08008225 	.word	0x08008225
 800827c:	080083b1 	.word	0x080083b1
 8008280:	08008225 	.word	0x08008225
 8008284:	08008225 	.word	0x08008225
 8008288:	08008225 	.word	0x08008225
 800828c:	08008225 	.word	0x08008225
 8008290:	08008369 	.word	0x08008369
 8008294:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008298:	e7db      	b.n	8008252 <_scanf_float+0x92>
 800829a:	290e      	cmp	r1, #14
 800829c:	d8c2      	bhi.n	8008224 <_scanf_float+0x64>
 800829e:	a001      	add	r0, pc, #4	@ (adr r0, 80082a4 <_scanf_float+0xe4>)
 80082a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082a4:	08008359 	.word	0x08008359
 80082a8:	08008225 	.word	0x08008225
 80082ac:	08008359 	.word	0x08008359
 80082b0:	080083ef 	.word	0x080083ef
 80082b4:	08008225 	.word	0x08008225
 80082b8:	08008301 	.word	0x08008301
 80082bc:	0800833f 	.word	0x0800833f
 80082c0:	0800833f 	.word	0x0800833f
 80082c4:	0800833f 	.word	0x0800833f
 80082c8:	0800833f 	.word	0x0800833f
 80082cc:	0800833f 	.word	0x0800833f
 80082d0:	0800833f 	.word	0x0800833f
 80082d4:	0800833f 	.word	0x0800833f
 80082d8:	0800833f 	.word	0x0800833f
 80082dc:	0800833f 	.word	0x0800833f
 80082e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80082e2:	d809      	bhi.n	80082f8 <_scanf_float+0x138>
 80082e4:	2b60      	cmp	r3, #96	@ 0x60
 80082e6:	d8b2      	bhi.n	800824e <_scanf_float+0x8e>
 80082e8:	2b54      	cmp	r3, #84	@ 0x54
 80082ea:	d07b      	beq.n	80083e4 <_scanf_float+0x224>
 80082ec:	2b59      	cmp	r3, #89	@ 0x59
 80082ee:	d199      	bne.n	8008224 <_scanf_float+0x64>
 80082f0:	2d07      	cmp	r5, #7
 80082f2:	d197      	bne.n	8008224 <_scanf_float+0x64>
 80082f4:	2508      	movs	r5, #8
 80082f6:	e02c      	b.n	8008352 <_scanf_float+0x192>
 80082f8:	2b74      	cmp	r3, #116	@ 0x74
 80082fa:	d073      	beq.n	80083e4 <_scanf_float+0x224>
 80082fc:	2b79      	cmp	r3, #121	@ 0x79
 80082fe:	e7f6      	b.n	80082ee <_scanf_float+0x12e>
 8008300:	6821      	ldr	r1, [r4, #0]
 8008302:	05c8      	lsls	r0, r1, #23
 8008304:	d51b      	bpl.n	800833e <_scanf_float+0x17e>
 8008306:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800830a:	6021      	str	r1, [r4, #0]
 800830c:	f109 0901 	add.w	r9, r9, #1
 8008310:	f1bb 0f00 	cmp.w	fp, #0
 8008314:	d003      	beq.n	800831e <_scanf_float+0x15e>
 8008316:	3201      	adds	r2, #1
 8008318:	f10b 3bff 	add.w	fp, fp, #4294967295
 800831c:	60a2      	str	r2, [r4, #8]
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	3b01      	subs	r3, #1
 8008322:	60a3      	str	r3, [r4, #8]
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	3301      	adds	r3, #1
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	607b      	str	r3, [r7, #4]
 8008332:	f340 8087 	ble.w	8008444 <_scanf_float+0x284>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	e765      	b.n	800820a <_scanf_float+0x4a>
 800833e:	eb1a 0105 	adds.w	r1, sl, r5
 8008342:	f47f af6f 	bne.w	8008224 <_scanf_float+0x64>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800834c:	6022      	str	r2, [r4, #0]
 800834e:	460d      	mov	r5, r1
 8008350:	468a      	mov	sl, r1
 8008352:	f806 3b01 	strb.w	r3, [r6], #1
 8008356:	e7e2      	b.n	800831e <_scanf_float+0x15e>
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	0610      	lsls	r0, r2, #24
 800835c:	f57f af62 	bpl.w	8008224 <_scanf_float+0x64>
 8008360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	e7f4      	b.n	8008352 <_scanf_float+0x192>
 8008368:	f1ba 0f00 	cmp.w	sl, #0
 800836c:	d10e      	bne.n	800838c <_scanf_float+0x1cc>
 800836e:	f1b9 0f00 	cmp.w	r9, #0
 8008372:	d10e      	bne.n	8008392 <_scanf_float+0x1d2>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800837a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800837e:	d108      	bne.n	8008392 <_scanf_float+0x1d2>
 8008380:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008384:	6022      	str	r2, [r4, #0]
 8008386:	f04f 0a01 	mov.w	sl, #1
 800838a:	e7e2      	b.n	8008352 <_scanf_float+0x192>
 800838c:	f1ba 0f02 	cmp.w	sl, #2
 8008390:	d055      	beq.n	800843e <_scanf_float+0x27e>
 8008392:	2d01      	cmp	r5, #1
 8008394:	d002      	beq.n	800839c <_scanf_float+0x1dc>
 8008396:	2d04      	cmp	r5, #4
 8008398:	f47f af44 	bne.w	8008224 <_scanf_float+0x64>
 800839c:	3501      	adds	r5, #1
 800839e:	b2ed      	uxtb	r5, r5
 80083a0:	e7d7      	b.n	8008352 <_scanf_float+0x192>
 80083a2:	f1ba 0f01 	cmp.w	sl, #1
 80083a6:	f47f af3d 	bne.w	8008224 <_scanf_float+0x64>
 80083aa:	f04f 0a02 	mov.w	sl, #2
 80083ae:	e7d0      	b.n	8008352 <_scanf_float+0x192>
 80083b0:	b97d      	cbnz	r5, 80083d2 <_scanf_float+0x212>
 80083b2:	f1b9 0f00 	cmp.w	r9, #0
 80083b6:	f47f af38 	bne.w	800822a <_scanf_float+0x6a>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083c4:	f040 8108 	bne.w	80085d8 <_scanf_float+0x418>
 80083c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	2501      	movs	r5, #1
 80083d0:	e7bf      	b.n	8008352 <_scanf_float+0x192>
 80083d2:	2d03      	cmp	r5, #3
 80083d4:	d0e2      	beq.n	800839c <_scanf_float+0x1dc>
 80083d6:	2d05      	cmp	r5, #5
 80083d8:	e7de      	b.n	8008398 <_scanf_float+0x1d8>
 80083da:	2d02      	cmp	r5, #2
 80083dc:	f47f af22 	bne.w	8008224 <_scanf_float+0x64>
 80083e0:	2503      	movs	r5, #3
 80083e2:	e7b6      	b.n	8008352 <_scanf_float+0x192>
 80083e4:	2d06      	cmp	r5, #6
 80083e6:	f47f af1d 	bne.w	8008224 <_scanf_float+0x64>
 80083ea:	2507      	movs	r5, #7
 80083ec:	e7b1      	b.n	8008352 <_scanf_float+0x192>
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	0591      	lsls	r1, r2, #22
 80083f2:	f57f af17 	bpl.w	8008224 <_scanf_float+0x64>
 80083f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80083fa:	6022      	str	r2, [r4, #0]
 80083fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008400:	e7a7      	b.n	8008352 <_scanf_float+0x192>
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008408:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800840c:	d006      	beq.n	800841c <_scanf_float+0x25c>
 800840e:	0550      	lsls	r0, r2, #21
 8008410:	f57f af08 	bpl.w	8008224 <_scanf_float+0x64>
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	f000 80de 	beq.w	80085d8 <_scanf_float+0x418>
 800841c:	0591      	lsls	r1, r2, #22
 800841e:	bf58      	it	pl
 8008420:	9902      	ldrpl	r1, [sp, #8]
 8008422:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008426:	bf58      	it	pl
 8008428:	eba9 0101 	subpl.w	r1, r9, r1
 800842c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008430:	bf58      	it	pl
 8008432:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	f04f 0900 	mov.w	r9, #0
 800843c:	e789      	b.n	8008352 <_scanf_float+0x192>
 800843e:	f04f 0a03 	mov.w	sl, #3
 8008442:	e786      	b.n	8008352 <_scanf_float+0x192>
 8008444:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008448:	4639      	mov	r1, r7
 800844a:	4640      	mov	r0, r8
 800844c:	4798      	blx	r3
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f aedb 	beq.w	800820a <_scanf_float+0x4a>
 8008454:	e6e6      	b.n	8008224 <_scanf_float+0x64>
 8008456:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800845a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800845e:	463a      	mov	r2, r7
 8008460:	4640      	mov	r0, r8
 8008462:	4798      	blx	r3
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	3b01      	subs	r3, #1
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	e6e8      	b.n	800823e <_scanf_float+0x7e>
 800846c:	1e6b      	subs	r3, r5, #1
 800846e:	2b06      	cmp	r3, #6
 8008470:	d824      	bhi.n	80084bc <_scanf_float+0x2fc>
 8008472:	2d02      	cmp	r5, #2
 8008474:	d836      	bhi.n	80084e4 <_scanf_float+0x324>
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	429e      	cmp	r6, r3
 800847a:	f67f aee4 	bls.w	8008246 <_scanf_float+0x86>
 800847e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008486:	463a      	mov	r2, r7
 8008488:	4640      	mov	r0, r8
 800848a:	4798      	blx	r3
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	3b01      	subs	r3, #1
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	e7f0      	b.n	8008476 <_scanf_float+0x2b6>
 8008494:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008498:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800849c:	463a      	mov	r2, r7
 800849e:	4640      	mov	r0, r8
 80084a0:	4798      	blx	r3
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ac:	fa5f fa8a 	uxtb.w	sl, sl
 80084b0:	f1ba 0f02 	cmp.w	sl, #2
 80084b4:	d1ee      	bne.n	8008494 <_scanf_float+0x2d4>
 80084b6:	3d03      	subs	r5, #3
 80084b8:	b2ed      	uxtb	r5, r5
 80084ba:	1b76      	subs	r6, r6, r5
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	05da      	lsls	r2, r3, #23
 80084c0:	d530      	bpl.n	8008524 <_scanf_float+0x364>
 80084c2:	055b      	lsls	r3, r3, #21
 80084c4:	d511      	bpl.n	80084ea <_scanf_float+0x32a>
 80084c6:	9b01      	ldr	r3, [sp, #4]
 80084c8:	429e      	cmp	r6, r3
 80084ca:	f67f aebc 	bls.w	8008246 <_scanf_float+0x86>
 80084ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084d6:	463a      	mov	r2, r7
 80084d8:	4640      	mov	r0, r8
 80084da:	4798      	blx	r3
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	3b01      	subs	r3, #1
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	e7f0      	b.n	80084c6 <_scanf_float+0x306>
 80084e4:	46aa      	mov	sl, r5
 80084e6:	46b3      	mov	fp, r6
 80084e8:	e7de      	b.n	80084a8 <_scanf_float+0x2e8>
 80084ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	2965      	cmp	r1, #101	@ 0x65
 80084f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80084f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	d00c      	beq.n	8008518 <_scanf_float+0x358>
 80084fe:	2945      	cmp	r1, #69	@ 0x45
 8008500:	d00a      	beq.n	8008518 <_scanf_float+0x358>
 8008502:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008506:	463a      	mov	r2, r7
 8008508:	4640      	mov	r0, r8
 800850a:	4798      	blx	r3
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008512:	3b01      	subs	r3, #1
 8008514:	1eb5      	subs	r5, r6, #2
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800851c:	463a      	mov	r2, r7
 800851e:	4640      	mov	r0, r8
 8008520:	4798      	blx	r3
 8008522:	462e      	mov	r6, r5
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	f012 0210 	ands.w	r2, r2, #16
 800852a:	d001      	beq.n	8008530 <_scanf_float+0x370>
 800852c:	2000      	movs	r0, #0
 800852e:	e68b      	b.n	8008248 <_scanf_float+0x88>
 8008530:	7032      	strb	r2, [r6, #0]
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800853c:	d11c      	bne.n	8008578 <_scanf_float+0x3b8>
 800853e:	9b02      	ldr	r3, [sp, #8]
 8008540:	454b      	cmp	r3, r9
 8008542:	eba3 0209 	sub.w	r2, r3, r9
 8008546:	d123      	bne.n	8008590 <_scanf_float+0x3d0>
 8008548:	9901      	ldr	r1, [sp, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	4640      	mov	r0, r8
 800854e:	f002 fc43 	bl	800add8 <_strtod_r>
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	6821      	ldr	r1, [r4, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f011 0f02 	tst.w	r1, #2
 800855c:	ec57 6b10 	vmov	r6, r7, d0
 8008560:	f103 0204 	add.w	r2, r3, #4
 8008564:	d01f      	beq.n	80085a6 <_scanf_float+0x3e6>
 8008566:	9903      	ldr	r1, [sp, #12]
 8008568:	600a      	str	r2, [r1, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	e9c3 6700 	strd	r6, r7, [r3]
 8008570:	68e3      	ldr	r3, [r4, #12]
 8008572:	3301      	adds	r3, #1
 8008574:	60e3      	str	r3, [r4, #12]
 8008576:	e7d9      	b.n	800852c <_scanf_float+0x36c>
 8008578:	9b04      	ldr	r3, [sp, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0e4      	beq.n	8008548 <_scanf_float+0x388>
 800857e:	9905      	ldr	r1, [sp, #20]
 8008580:	230a      	movs	r3, #10
 8008582:	3101      	adds	r1, #1
 8008584:	4640      	mov	r0, r8
 8008586:	f002 fca7 	bl	800aed8 <_strtol_r>
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	9e05      	ldr	r6, [sp, #20]
 800858e:	1ac2      	subs	r2, r0, r3
 8008590:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008594:	429e      	cmp	r6, r3
 8008596:	bf28      	it	cs
 8008598:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800859c:	4910      	ldr	r1, [pc, #64]	@ (80085e0 <_scanf_float+0x420>)
 800859e:	4630      	mov	r0, r6
 80085a0:	f000 f8f6 	bl	8008790 <siprintf>
 80085a4:	e7d0      	b.n	8008548 <_scanf_float+0x388>
 80085a6:	f011 0f04 	tst.w	r1, #4
 80085aa:	9903      	ldr	r1, [sp, #12]
 80085ac:	600a      	str	r2, [r1, #0]
 80085ae:	d1dc      	bne.n	800856a <_scanf_float+0x3aa>
 80085b0:	681d      	ldr	r5, [r3, #0]
 80085b2:	4632      	mov	r2, r6
 80085b4:	463b      	mov	r3, r7
 80085b6:	4630      	mov	r0, r6
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f8 fab7 	bl	8000b2c <__aeabi_dcmpun>
 80085be:	b128      	cbz	r0, 80085cc <_scanf_float+0x40c>
 80085c0:	4808      	ldr	r0, [pc, #32]	@ (80085e4 <_scanf_float+0x424>)
 80085c2:	f000 fa03 	bl	80089cc <nanf>
 80085c6:	ed85 0a00 	vstr	s0, [r5]
 80085ca:	e7d1      	b.n	8008570 <_scanf_float+0x3b0>
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f8 fb0a 	bl	8000be8 <__aeabi_d2f>
 80085d4:	6028      	str	r0, [r5, #0]
 80085d6:	e7cb      	b.n	8008570 <_scanf_float+0x3b0>
 80085d8:	f04f 0900 	mov.w	r9, #0
 80085dc:	e629      	b.n	8008232 <_scanf_float+0x72>
 80085de:	bf00      	nop
 80085e0:	0800c922 	.word	0x0800c922
 80085e4:	0800ccd8 	.word	0x0800ccd8

080085e8 <std>:
 80085e8:	2300      	movs	r3, #0
 80085ea:	b510      	push	{r4, lr}
 80085ec:	4604      	mov	r4, r0
 80085ee:	e9c0 3300 	strd	r3, r3, [r0]
 80085f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085f6:	6083      	str	r3, [r0, #8]
 80085f8:	8181      	strh	r1, [r0, #12]
 80085fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80085fc:	81c2      	strh	r2, [r0, #14]
 80085fe:	6183      	str	r3, [r0, #24]
 8008600:	4619      	mov	r1, r3
 8008602:	2208      	movs	r2, #8
 8008604:	305c      	adds	r0, #92	@ 0x5c
 8008606:	f000 f952 	bl	80088ae <memset>
 800860a:	4b0d      	ldr	r3, [pc, #52]	@ (8008640 <std+0x58>)
 800860c:	6263      	str	r3, [r4, #36]	@ 0x24
 800860e:	4b0d      	ldr	r3, [pc, #52]	@ (8008644 <std+0x5c>)
 8008610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008612:	4b0d      	ldr	r3, [pc, #52]	@ (8008648 <std+0x60>)
 8008614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <std+0x64>)
 8008618:	6323      	str	r3, [r4, #48]	@ 0x30
 800861a:	4b0d      	ldr	r3, [pc, #52]	@ (8008650 <std+0x68>)
 800861c:	6224      	str	r4, [r4, #32]
 800861e:	429c      	cmp	r4, r3
 8008620:	d006      	beq.n	8008630 <std+0x48>
 8008622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008626:	4294      	cmp	r4, r2
 8008628:	d002      	beq.n	8008630 <std+0x48>
 800862a:	33d0      	adds	r3, #208	@ 0xd0
 800862c:	429c      	cmp	r4, r3
 800862e:	d105      	bne.n	800863c <std+0x54>
 8008630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f000 b9b6 	b.w	80089a8 <__retarget_lock_init_recursive>
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	08008825 	.word	0x08008825
 8008644:	0800884b 	.word	0x0800884b
 8008648:	08008883 	.word	0x08008883
 800864c:	080088a7 	.word	0x080088a7
 8008650:	2000453c 	.word	0x2000453c

08008654 <stdio_exit_handler>:
 8008654:	4a02      	ldr	r2, [pc, #8]	@ (8008660 <stdio_exit_handler+0xc>)
 8008656:	4903      	ldr	r1, [pc, #12]	@ (8008664 <stdio_exit_handler+0x10>)
 8008658:	4803      	ldr	r0, [pc, #12]	@ (8008668 <stdio_exit_handler+0x14>)
 800865a:	f000 b869 	b.w	8008730 <_fwalk_sglue>
 800865e:	bf00      	nop
 8008660:	20000018 	.word	0x20000018
 8008664:	0800bb4d 	.word	0x0800bb4d
 8008668:	20000028 	.word	0x20000028

0800866c <cleanup_stdio>:
 800866c:	6841      	ldr	r1, [r0, #4]
 800866e:	4b0c      	ldr	r3, [pc, #48]	@ (80086a0 <cleanup_stdio+0x34>)
 8008670:	4299      	cmp	r1, r3
 8008672:	b510      	push	{r4, lr}
 8008674:	4604      	mov	r4, r0
 8008676:	d001      	beq.n	800867c <cleanup_stdio+0x10>
 8008678:	f003 fa68 	bl	800bb4c <_fflush_r>
 800867c:	68a1      	ldr	r1, [r4, #8]
 800867e:	4b09      	ldr	r3, [pc, #36]	@ (80086a4 <cleanup_stdio+0x38>)
 8008680:	4299      	cmp	r1, r3
 8008682:	d002      	beq.n	800868a <cleanup_stdio+0x1e>
 8008684:	4620      	mov	r0, r4
 8008686:	f003 fa61 	bl	800bb4c <_fflush_r>
 800868a:	68e1      	ldr	r1, [r4, #12]
 800868c:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <cleanup_stdio+0x3c>)
 800868e:	4299      	cmp	r1, r3
 8008690:	d004      	beq.n	800869c <cleanup_stdio+0x30>
 8008692:	4620      	mov	r0, r4
 8008694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008698:	f003 ba58 	b.w	800bb4c <_fflush_r>
 800869c:	bd10      	pop	{r4, pc}
 800869e:	bf00      	nop
 80086a0:	2000453c 	.word	0x2000453c
 80086a4:	200045a4 	.word	0x200045a4
 80086a8:	2000460c 	.word	0x2000460c

080086ac <global_stdio_init.part.0>:
 80086ac:	b510      	push	{r4, lr}
 80086ae:	4b0b      	ldr	r3, [pc, #44]	@ (80086dc <global_stdio_init.part.0+0x30>)
 80086b0:	4c0b      	ldr	r4, [pc, #44]	@ (80086e0 <global_stdio_init.part.0+0x34>)
 80086b2:	4a0c      	ldr	r2, [pc, #48]	@ (80086e4 <global_stdio_init.part.0+0x38>)
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	4620      	mov	r0, r4
 80086b8:	2200      	movs	r2, #0
 80086ba:	2104      	movs	r1, #4
 80086bc:	f7ff ff94 	bl	80085e8 <std>
 80086c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086c4:	2201      	movs	r2, #1
 80086c6:	2109      	movs	r1, #9
 80086c8:	f7ff ff8e 	bl	80085e8 <std>
 80086cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086d0:	2202      	movs	r2, #2
 80086d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d6:	2112      	movs	r1, #18
 80086d8:	f7ff bf86 	b.w	80085e8 <std>
 80086dc:	20004674 	.word	0x20004674
 80086e0:	2000453c 	.word	0x2000453c
 80086e4:	08008655 	.word	0x08008655

080086e8 <__sfp_lock_acquire>:
 80086e8:	4801      	ldr	r0, [pc, #4]	@ (80086f0 <__sfp_lock_acquire+0x8>)
 80086ea:	f000 b95e 	b.w	80089aa <__retarget_lock_acquire_recursive>
 80086ee:	bf00      	nop
 80086f0:	2000467d 	.word	0x2000467d

080086f4 <__sfp_lock_release>:
 80086f4:	4801      	ldr	r0, [pc, #4]	@ (80086fc <__sfp_lock_release+0x8>)
 80086f6:	f000 b959 	b.w	80089ac <__retarget_lock_release_recursive>
 80086fa:	bf00      	nop
 80086fc:	2000467d 	.word	0x2000467d

08008700 <__sinit>:
 8008700:	b510      	push	{r4, lr}
 8008702:	4604      	mov	r4, r0
 8008704:	f7ff fff0 	bl	80086e8 <__sfp_lock_acquire>
 8008708:	6a23      	ldr	r3, [r4, #32]
 800870a:	b11b      	cbz	r3, 8008714 <__sinit+0x14>
 800870c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008710:	f7ff bff0 	b.w	80086f4 <__sfp_lock_release>
 8008714:	4b04      	ldr	r3, [pc, #16]	@ (8008728 <__sinit+0x28>)
 8008716:	6223      	str	r3, [r4, #32]
 8008718:	4b04      	ldr	r3, [pc, #16]	@ (800872c <__sinit+0x2c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f5      	bne.n	800870c <__sinit+0xc>
 8008720:	f7ff ffc4 	bl	80086ac <global_stdio_init.part.0>
 8008724:	e7f2      	b.n	800870c <__sinit+0xc>
 8008726:	bf00      	nop
 8008728:	0800866d 	.word	0x0800866d
 800872c:	20004674 	.word	0x20004674

08008730 <_fwalk_sglue>:
 8008730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008734:	4607      	mov	r7, r0
 8008736:	4688      	mov	r8, r1
 8008738:	4614      	mov	r4, r2
 800873a:	2600      	movs	r6, #0
 800873c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008740:	f1b9 0901 	subs.w	r9, r9, #1
 8008744:	d505      	bpl.n	8008752 <_fwalk_sglue+0x22>
 8008746:	6824      	ldr	r4, [r4, #0]
 8008748:	2c00      	cmp	r4, #0
 800874a:	d1f7      	bne.n	800873c <_fwalk_sglue+0xc>
 800874c:	4630      	mov	r0, r6
 800874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d907      	bls.n	8008768 <_fwalk_sglue+0x38>
 8008758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800875c:	3301      	adds	r3, #1
 800875e:	d003      	beq.n	8008768 <_fwalk_sglue+0x38>
 8008760:	4629      	mov	r1, r5
 8008762:	4638      	mov	r0, r7
 8008764:	47c0      	blx	r8
 8008766:	4306      	orrs	r6, r0
 8008768:	3568      	adds	r5, #104	@ 0x68
 800876a:	e7e9      	b.n	8008740 <_fwalk_sglue+0x10>

0800876c <iprintf>:
 800876c:	b40f      	push	{r0, r1, r2, r3}
 800876e:	b507      	push	{r0, r1, r2, lr}
 8008770:	4906      	ldr	r1, [pc, #24]	@ (800878c <iprintf+0x20>)
 8008772:	ab04      	add	r3, sp, #16
 8008774:	6808      	ldr	r0, [r1, #0]
 8008776:	f853 2b04 	ldr.w	r2, [r3], #4
 800877a:	6881      	ldr	r1, [r0, #8]
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	f002 fefb 	bl	800b578 <_vfiprintf_r>
 8008782:	b003      	add	sp, #12
 8008784:	f85d eb04 	ldr.w	lr, [sp], #4
 8008788:	b004      	add	sp, #16
 800878a:	4770      	bx	lr
 800878c:	20000024 	.word	0x20000024

08008790 <siprintf>:
 8008790:	b40e      	push	{r1, r2, r3}
 8008792:	b500      	push	{lr}
 8008794:	b09c      	sub	sp, #112	@ 0x70
 8008796:	ab1d      	add	r3, sp, #116	@ 0x74
 8008798:	9002      	str	r0, [sp, #8]
 800879a:	9006      	str	r0, [sp, #24]
 800879c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80087a0:	4809      	ldr	r0, [pc, #36]	@ (80087c8 <siprintf+0x38>)
 80087a2:	9107      	str	r1, [sp, #28]
 80087a4:	9104      	str	r1, [sp, #16]
 80087a6:	4909      	ldr	r1, [pc, #36]	@ (80087cc <siprintf+0x3c>)
 80087a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ac:	9105      	str	r1, [sp, #20]
 80087ae:	6800      	ldr	r0, [r0, #0]
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	a902      	add	r1, sp, #8
 80087b4:	f002 fbee 	bl	800af94 <_svfiprintf_r>
 80087b8:	9b02      	ldr	r3, [sp, #8]
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	b01c      	add	sp, #112	@ 0x70
 80087c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c4:	b003      	add	sp, #12
 80087c6:	4770      	bx	lr
 80087c8:	20000024 	.word	0x20000024
 80087cc:	ffff0208 	.word	0xffff0208

080087d0 <siscanf>:
 80087d0:	b40e      	push	{r1, r2, r3}
 80087d2:	b530      	push	{r4, r5, lr}
 80087d4:	b09c      	sub	sp, #112	@ 0x70
 80087d6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80087d8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80087dc:	f854 5b04 	ldr.w	r5, [r4], #4
 80087e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80087e4:	9002      	str	r0, [sp, #8]
 80087e6:	9006      	str	r0, [sp, #24]
 80087e8:	f7f7 fd42 	bl	8000270 <strlen>
 80087ec:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <siscanf+0x4c>)
 80087ee:	9003      	str	r0, [sp, #12]
 80087f0:	9007      	str	r0, [sp, #28]
 80087f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087f4:	480a      	ldr	r0, [pc, #40]	@ (8008820 <siscanf+0x50>)
 80087f6:	9401      	str	r4, [sp, #4]
 80087f8:	2300      	movs	r3, #0
 80087fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087fc:	9314      	str	r3, [sp, #80]	@ 0x50
 80087fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008802:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008806:	462a      	mov	r2, r5
 8008808:	4623      	mov	r3, r4
 800880a:	a902      	add	r1, sp, #8
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	f002 fd15 	bl	800b23c <__ssvfiscanf_r>
 8008812:	b01c      	add	sp, #112	@ 0x70
 8008814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008818:	b003      	add	sp, #12
 800881a:	4770      	bx	lr
 800881c:	08008847 	.word	0x08008847
 8008820:	20000024 	.word	0x20000024

08008824 <__sread>:
 8008824:	b510      	push	{r4, lr}
 8008826:	460c      	mov	r4, r1
 8008828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882c:	f000 f86e 	bl	800890c <_read_r>
 8008830:	2800      	cmp	r0, #0
 8008832:	bfab      	itete	ge
 8008834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008836:	89a3      	ldrhlt	r3, [r4, #12]
 8008838:	181b      	addge	r3, r3, r0
 800883a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800883e:	bfac      	ite	ge
 8008840:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008842:	81a3      	strhlt	r3, [r4, #12]
 8008844:	bd10      	pop	{r4, pc}

08008846 <__seofread>:
 8008846:	2000      	movs	r0, #0
 8008848:	4770      	bx	lr

0800884a <__swrite>:
 800884a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884e:	461f      	mov	r7, r3
 8008850:	898b      	ldrh	r3, [r1, #12]
 8008852:	05db      	lsls	r3, r3, #23
 8008854:	4605      	mov	r5, r0
 8008856:	460c      	mov	r4, r1
 8008858:	4616      	mov	r6, r2
 800885a:	d505      	bpl.n	8008868 <__swrite+0x1e>
 800885c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008860:	2302      	movs	r3, #2
 8008862:	2200      	movs	r2, #0
 8008864:	f000 f840 	bl	80088e8 <_lseek_r>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800886e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	4632      	mov	r2, r6
 8008876:	463b      	mov	r3, r7
 8008878:	4628      	mov	r0, r5
 800887a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800887e:	f000 b857 	b.w	8008930 <_write_r>

08008882 <__sseek>:
 8008882:	b510      	push	{r4, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888a:	f000 f82d 	bl	80088e8 <_lseek_r>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	bf15      	itete	ne
 8008894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800889a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800889e:	81a3      	strheq	r3, [r4, #12]
 80088a0:	bf18      	it	ne
 80088a2:	81a3      	strhne	r3, [r4, #12]
 80088a4:	bd10      	pop	{r4, pc}

080088a6 <__sclose>:
 80088a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088aa:	f000 b80d 	b.w	80088c8 <_close_r>

080088ae <memset>:
 80088ae:	4402      	add	r2, r0
 80088b0:	4603      	mov	r3, r0
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d100      	bne.n	80088b8 <memset+0xa>
 80088b6:	4770      	bx	lr
 80088b8:	f803 1b01 	strb.w	r1, [r3], #1
 80088bc:	e7f9      	b.n	80088b2 <memset+0x4>
	...

080088c0 <_localeconv_r>:
 80088c0:	4800      	ldr	r0, [pc, #0]	@ (80088c4 <_localeconv_r+0x4>)
 80088c2:	4770      	bx	lr
 80088c4:	20000164 	.word	0x20000164

080088c8 <_close_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d06      	ldr	r5, [pc, #24]	@ (80088e4 <_close_r+0x1c>)
 80088cc:	2300      	movs	r3, #0
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f7f9 fb8a 	bl	8001fec <_close>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_close_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_close_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	20004678 	.word	0x20004678

080088e8 <_lseek_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d07      	ldr	r5, [pc, #28]	@ (8008908 <_lseek_r+0x20>)
 80088ec:	4604      	mov	r4, r0
 80088ee:	4608      	mov	r0, r1
 80088f0:	4611      	mov	r1, r2
 80088f2:	2200      	movs	r2, #0
 80088f4:	602a      	str	r2, [r5, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f7f9 fb9f 	bl	800203a <_lseek>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_lseek_r+0x1e>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_lseek_r+0x1e>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	20004678 	.word	0x20004678

0800890c <_read_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	@ (800892c <_read_r+0x20>)
 8008910:	4604      	mov	r4, r0
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	2200      	movs	r2, #0
 8008918:	602a      	str	r2, [r5, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7f9 fb2d 	bl	8001f7a <_read>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_read_r+0x1e>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_read_r+0x1e>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	20004678 	.word	0x20004678

08008930 <_write_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d07      	ldr	r5, [pc, #28]	@ (8008950 <_write_r+0x20>)
 8008934:	4604      	mov	r4, r0
 8008936:	4608      	mov	r0, r1
 8008938:	4611      	mov	r1, r2
 800893a:	2200      	movs	r2, #0
 800893c:	602a      	str	r2, [r5, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	f7f9 fb38 	bl	8001fb4 <_write>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_write_r+0x1e>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_write_r+0x1e>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20004678 	.word	0x20004678

08008954 <__errno>:
 8008954:	4b01      	ldr	r3, [pc, #4]	@ (800895c <__errno+0x8>)
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	20000024 	.word	0x20000024

08008960 <__libc_init_array>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	4d0d      	ldr	r5, [pc, #52]	@ (8008998 <__libc_init_array+0x38>)
 8008964:	4c0d      	ldr	r4, [pc, #52]	@ (800899c <__libc_init_array+0x3c>)
 8008966:	1b64      	subs	r4, r4, r5
 8008968:	10a4      	asrs	r4, r4, #2
 800896a:	2600      	movs	r6, #0
 800896c:	42a6      	cmp	r6, r4
 800896e:	d109      	bne.n	8008984 <__libc_init_array+0x24>
 8008970:	4d0b      	ldr	r5, [pc, #44]	@ (80089a0 <__libc_init_array+0x40>)
 8008972:	4c0c      	ldr	r4, [pc, #48]	@ (80089a4 <__libc_init_array+0x44>)
 8008974:	f003 ff74 	bl	800c860 <_init>
 8008978:	1b64      	subs	r4, r4, r5
 800897a:	10a4      	asrs	r4, r4, #2
 800897c:	2600      	movs	r6, #0
 800897e:	42a6      	cmp	r6, r4
 8008980:	d105      	bne.n	800898e <__libc_init_array+0x2e>
 8008982:	bd70      	pop	{r4, r5, r6, pc}
 8008984:	f855 3b04 	ldr.w	r3, [r5], #4
 8008988:	4798      	blx	r3
 800898a:	3601      	adds	r6, #1
 800898c:	e7ee      	b.n	800896c <__libc_init_array+0xc>
 800898e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008992:	4798      	blx	r3
 8008994:	3601      	adds	r6, #1
 8008996:	e7f2      	b.n	800897e <__libc_init_array+0x1e>
 8008998:	0800cd44 	.word	0x0800cd44
 800899c:	0800cd44 	.word	0x0800cd44
 80089a0:	0800cd44 	.word	0x0800cd44
 80089a4:	0800cd48 	.word	0x0800cd48

080089a8 <__retarget_lock_init_recursive>:
 80089a8:	4770      	bx	lr

080089aa <__retarget_lock_acquire_recursive>:
 80089aa:	4770      	bx	lr

080089ac <__retarget_lock_release_recursive>:
 80089ac:	4770      	bx	lr

080089ae <memcpy>:
 80089ae:	440a      	add	r2, r1
 80089b0:	4291      	cmp	r1, r2
 80089b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80089b6:	d100      	bne.n	80089ba <memcpy+0xc>
 80089b8:	4770      	bx	lr
 80089ba:	b510      	push	{r4, lr}
 80089bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089c4:	4291      	cmp	r1, r2
 80089c6:	d1f9      	bne.n	80089bc <memcpy+0xe>
 80089c8:	bd10      	pop	{r4, pc}
	...

080089cc <nanf>:
 80089cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80089d4 <nanf+0x8>
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	7fc00000 	.word	0x7fc00000

080089d8 <quorem>:
 80089d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	6903      	ldr	r3, [r0, #16]
 80089de:	690c      	ldr	r4, [r1, #16]
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	4607      	mov	r7, r0
 80089e4:	db7e      	blt.n	8008ae4 <quorem+0x10c>
 80089e6:	3c01      	subs	r4, #1
 80089e8:	f101 0814 	add.w	r8, r1, #20
 80089ec:	00a3      	lsls	r3, r4, #2
 80089ee:	f100 0514 	add.w	r5, r0, #20
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a02:	3301      	adds	r3, #1
 8008a04:	429a      	cmp	r2, r3
 8008a06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a0e:	d32e      	bcc.n	8008a6e <quorem+0x96>
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	46c4      	mov	ip, r8
 8008a16:	46ae      	mov	lr, r5
 8008a18:	46d3      	mov	fp, sl
 8008a1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a1e:	b298      	uxth	r0, r3
 8008a20:	fb06 a000 	mla	r0, r6, r0, sl
 8008a24:	0c02      	lsrs	r2, r0, #16
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	fb06 2303 	mla	r3, r6, r3, r2
 8008a2c:	f8de 2000 	ldr.w	r2, [lr]
 8008a30:	b280      	uxth	r0, r0
 8008a32:	b292      	uxth	r2, r2
 8008a34:	1a12      	subs	r2, r2, r0
 8008a36:	445a      	add	r2, fp
 8008a38:	f8de 0000 	ldr.w	r0, [lr]
 8008a3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a4a:	b292      	uxth	r2, r2
 8008a4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a50:	45e1      	cmp	r9, ip
 8008a52:	f84e 2b04 	str.w	r2, [lr], #4
 8008a56:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a5a:	d2de      	bcs.n	8008a1a <quorem+0x42>
 8008a5c:	9b00      	ldr	r3, [sp, #0]
 8008a5e:	58eb      	ldr	r3, [r5, r3]
 8008a60:	b92b      	cbnz	r3, 8008a6e <quorem+0x96>
 8008a62:	9b01      	ldr	r3, [sp, #4]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	429d      	cmp	r5, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	d32f      	bcc.n	8008acc <quorem+0xf4>
 8008a6c:	613c      	str	r4, [r7, #16]
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f001 f9c2 	bl	8009df8 <__mcmp>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	db25      	blt.n	8008ac4 <quorem+0xec>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a80:	f8d1 c000 	ldr.w	ip, [r1]
 8008a84:	fa1f fe82 	uxth.w	lr, r2
 8008a88:	fa1f f38c 	uxth.w	r3, ip
 8008a8c:	eba3 030e 	sub.w	r3, r3, lr
 8008a90:	4403      	add	r3, r0
 8008a92:	0c12      	lsrs	r2, r2, #16
 8008a94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a98:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aa2:	45c1      	cmp	r9, r8
 8008aa4:	f841 3b04 	str.w	r3, [r1], #4
 8008aa8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008aac:	d2e6      	bcs.n	8008a7c <quorem+0xa4>
 8008aae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ab6:	b922      	cbnz	r2, 8008ac2 <quorem+0xea>
 8008ab8:	3b04      	subs	r3, #4
 8008aba:	429d      	cmp	r5, r3
 8008abc:	461a      	mov	r2, r3
 8008abe:	d30b      	bcc.n	8008ad8 <quorem+0x100>
 8008ac0:	613c      	str	r4, [r7, #16]
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	b003      	add	sp, #12
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	6812      	ldr	r2, [r2, #0]
 8008ace:	3b04      	subs	r3, #4
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	d1cb      	bne.n	8008a6c <quorem+0x94>
 8008ad4:	3c01      	subs	r4, #1
 8008ad6:	e7c6      	b.n	8008a66 <quorem+0x8e>
 8008ad8:	6812      	ldr	r2, [r2, #0]
 8008ada:	3b04      	subs	r3, #4
 8008adc:	2a00      	cmp	r2, #0
 8008ade:	d1ef      	bne.n	8008ac0 <quorem+0xe8>
 8008ae0:	3c01      	subs	r4, #1
 8008ae2:	e7ea      	b.n	8008aba <quorem+0xe2>
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e7ee      	b.n	8008ac6 <quorem+0xee>

08008ae8 <_dtoa_r>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	69c7      	ldr	r7, [r0, #28]
 8008aee:	b099      	sub	sp, #100	@ 0x64
 8008af0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008af4:	ec55 4b10 	vmov	r4, r5, d0
 8008af8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8008afc:	4683      	mov	fp, r0
 8008afe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b02:	b97f      	cbnz	r7, 8008b24 <_dtoa_r+0x3c>
 8008b04:	2010      	movs	r0, #16
 8008b06:	f000 fdfd 	bl	8009704 <malloc>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b10:	b920      	cbnz	r0, 8008b1c <_dtoa_r+0x34>
 8008b12:	4ba7      	ldr	r3, [pc, #668]	@ (8008db0 <_dtoa_r+0x2c8>)
 8008b14:	21ef      	movs	r1, #239	@ 0xef
 8008b16:	48a7      	ldr	r0, [pc, #668]	@ (8008db4 <_dtoa_r+0x2cc>)
 8008b18:	f003 f98e 	bl	800be38 <__assert_func>
 8008b1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b20:	6007      	str	r7, [r0, #0]
 8008b22:	60c7      	str	r7, [r0, #12]
 8008b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b28:	6819      	ldr	r1, [r3, #0]
 8008b2a:	b159      	cbz	r1, 8008b44 <_dtoa_r+0x5c>
 8008b2c:	685a      	ldr	r2, [r3, #4]
 8008b2e:	604a      	str	r2, [r1, #4]
 8008b30:	2301      	movs	r3, #1
 8008b32:	4093      	lsls	r3, r2
 8008b34:	608b      	str	r3, [r1, #8]
 8008b36:	4658      	mov	r0, fp
 8008b38:	f000 feda 	bl	80098f0 <_Bfree>
 8008b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	1e2b      	subs	r3, r5, #0
 8008b46:	bfb9      	ittee	lt
 8008b48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b4c:	9303      	strlt	r3, [sp, #12]
 8008b4e:	2300      	movge	r3, #0
 8008b50:	6033      	strge	r3, [r6, #0]
 8008b52:	9f03      	ldr	r7, [sp, #12]
 8008b54:	4b98      	ldr	r3, [pc, #608]	@ (8008db8 <_dtoa_r+0x2d0>)
 8008b56:	bfbc      	itt	lt
 8008b58:	2201      	movlt	r2, #1
 8008b5a:	6032      	strlt	r2, [r6, #0]
 8008b5c:	43bb      	bics	r3, r7
 8008b5e:	d112      	bne.n	8008b86 <_dtoa_r+0x9e>
 8008b60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b6c:	4323      	orrs	r3, r4
 8008b6e:	f000 854d 	beq.w	800960c <_dtoa_r+0xb24>
 8008b72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008dcc <_dtoa_r+0x2e4>
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 854f 	beq.w	800961c <_dtoa_r+0xb34>
 8008b7e:	f10a 0303 	add.w	r3, sl, #3
 8008b82:	f000 bd49 	b.w	8009618 <_dtoa_r+0xb30>
 8008b86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	ec51 0b17 	vmov	r0, r1, d7
 8008b90:	2300      	movs	r3, #0
 8008b92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008b96:	f7f7 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b9a:	4680      	mov	r8, r0
 8008b9c:	b158      	cbz	r0, 8008bb6 <_dtoa_r+0xce>
 8008b9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	6013      	str	r3, [r2, #0]
 8008ba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ba6:	b113      	cbz	r3, 8008bae <_dtoa_r+0xc6>
 8008ba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008baa:	4b84      	ldr	r3, [pc, #528]	@ (8008dbc <_dtoa_r+0x2d4>)
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008dd0 <_dtoa_r+0x2e8>
 8008bb2:	f000 bd33 	b.w	800961c <_dtoa_r+0xb34>
 8008bb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008bba:	aa16      	add	r2, sp, #88	@ 0x58
 8008bbc:	a917      	add	r1, sp, #92	@ 0x5c
 8008bbe:	4658      	mov	r0, fp
 8008bc0:	f001 fa3a 	bl	800a038 <__d2b>
 8008bc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008bc8:	4681      	mov	r9, r0
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d077      	beq.n	8008cbe <_dtoa_r+0x1d6>
 8008bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008be0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008be4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008be8:	4619      	mov	r1, r3
 8008bea:	2200      	movs	r2, #0
 8008bec:	4b74      	ldr	r3, [pc, #464]	@ (8008dc0 <_dtoa_r+0x2d8>)
 8008bee:	f7f7 fb4b 	bl	8000288 <__aeabi_dsub>
 8008bf2:	a369      	add	r3, pc, #420	@ (adr r3, 8008d98 <_dtoa_r+0x2b0>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	a368      	add	r3, pc, #416	@ (adr r3, 8008da0 <_dtoa_r+0x2b8>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb43 	bl	800028c <__adddf3>
 8008c06:	4604      	mov	r4, r0
 8008c08:	4630      	mov	r0, r6
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	f7f7 fc8a 	bl	8000524 <__aeabi_i2d>
 8008c10:	a365      	add	r3, pc, #404	@ (adr r3, 8008da8 <_dtoa_r+0x2c0>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f7f7 fcef 	bl	80005f8 <__aeabi_dmul>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 fb33 	bl	800028c <__adddf3>
 8008c26:	4604      	mov	r4, r0
 8008c28:	460d      	mov	r5, r1
 8008c2a:	f7f7 ff95 	bl	8000b58 <__aeabi_d2iz>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4607      	mov	r7, r0
 8008c32:	2300      	movs	r3, #0
 8008c34:	4620      	mov	r0, r4
 8008c36:	4629      	mov	r1, r5
 8008c38:	f7f7 ff50 	bl	8000adc <__aeabi_dcmplt>
 8008c3c:	b140      	cbz	r0, 8008c50 <_dtoa_r+0x168>
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f7f7 fc70 	bl	8000524 <__aeabi_i2d>
 8008c44:	4622      	mov	r2, r4
 8008c46:	462b      	mov	r3, r5
 8008c48:	f7f7 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c4c:	b900      	cbnz	r0, 8008c50 <_dtoa_r+0x168>
 8008c4e:	3f01      	subs	r7, #1
 8008c50:	2f16      	cmp	r7, #22
 8008c52:	d851      	bhi.n	8008cf8 <_dtoa_r+0x210>
 8008c54:	4b5b      	ldr	r3, [pc, #364]	@ (8008dc4 <_dtoa_r+0x2dc>)
 8008c56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c62:	f7f7 ff3b 	bl	8000adc <__aeabi_dcmplt>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d048      	beq.n	8008cfc <_dtoa_r+0x214>
 8008c6a:	3f01      	subs	r7, #1
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008c70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c72:	1b9b      	subs	r3, r3, r6
 8008c74:	1e5a      	subs	r2, r3, #1
 8008c76:	bf44      	itt	mi
 8008c78:	f1c3 0801 	rsbmi	r8, r3, #1
 8008c7c:	2300      	movmi	r3, #0
 8008c7e:	9208      	str	r2, [sp, #32]
 8008c80:	bf54      	ite	pl
 8008c82:	f04f 0800 	movpl.w	r8, #0
 8008c86:	9308      	strmi	r3, [sp, #32]
 8008c88:	2f00      	cmp	r7, #0
 8008c8a:	db39      	blt.n	8008d00 <_dtoa_r+0x218>
 8008c8c:	9b08      	ldr	r3, [sp, #32]
 8008c8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008c90:	443b      	add	r3, r7
 8008c92:	9308      	str	r3, [sp, #32]
 8008c94:	2300      	movs	r3, #0
 8008c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c9a:	2b09      	cmp	r3, #9
 8008c9c:	d864      	bhi.n	8008d68 <_dtoa_r+0x280>
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	bfc4      	itt	gt
 8008ca2:	3b04      	subgt	r3, #4
 8008ca4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8008cac:	bfcc      	ite	gt
 8008cae:	2400      	movgt	r4, #0
 8008cb0:	2401      	movle	r4, #1
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d863      	bhi.n	8008d7e <_dtoa_r+0x296>
 8008cb6:	e8df f003 	tbb	[pc, r3]
 8008cba:	372a      	.short	0x372a
 8008cbc:	5535      	.short	0x5535
 8008cbe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008cc2:	441e      	add	r6, r3
 8008cc4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008cc8:	2b20      	cmp	r3, #32
 8008cca:	bfc1      	itttt	gt
 8008ccc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008cd0:	409f      	lslgt	r7, r3
 8008cd2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008cd6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008cda:	bfd6      	itet	le
 8008cdc:	f1c3 0320 	rsble	r3, r3, #32
 8008ce0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ce4:	fa04 f003 	lslle.w	r0, r4, r3
 8008ce8:	f7f7 fc0c 	bl	8000504 <__aeabi_ui2d>
 8008cec:	2201      	movs	r2, #1
 8008cee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008cf2:	3e01      	subs	r6, #1
 8008cf4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008cf6:	e777      	b.n	8008be8 <_dtoa_r+0x100>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e7b8      	b.n	8008c6e <_dtoa_r+0x186>
 8008cfc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008cfe:	e7b7      	b.n	8008c70 <_dtoa_r+0x188>
 8008d00:	427b      	negs	r3, r7
 8008d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d04:	2300      	movs	r3, #0
 8008d06:	eba8 0807 	sub.w	r8, r8, r7
 8008d0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d0c:	e7c4      	b.n	8008c98 <_dtoa_r+0x1b0>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dc35      	bgt.n	8008d84 <_dtoa_r+0x29c>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	9307      	str	r3, [sp, #28]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d22:	e00b      	b.n	8008d3c <_dtoa_r+0x254>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e7f3      	b.n	8008d10 <_dtoa_r+0x228>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d2e:	18fb      	adds	r3, r7, r3
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	9307      	str	r3, [sp, #28]
 8008d38:	bfb8      	it	lt
 8008d3a:	2301      	movlt	r3, #1
 8008d3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008d40:	2100      	movs	r1, #0
 8008d42:	2204      	movs	r2, #4
 8008d44:	f102 0514 	add.w	r5, r2, #20
 8008d48:	429d      	cmp	r5, r3
 8008d4a:	d91f      	bls.n	8008d8c <_dtoa_r+0x2a4>
 8008d4c:	6041      	str	r1, [r0, #4]
 8008d4e:	4658      	mov	r0, fp
 8008d50:	f000 fd8e 	bl	8009870 <_Balloc>
 8008d54:	4682      	mov	sl, r0
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d13c      	bne.n	8008dd4 <_dtoa_r+0x2ec>
 8008d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc8 <_dtoa_r+0x2e0>)
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d62:	e6d8      	b.n	8008b16 <_dtoa_r+0x2e>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e7e0      	b.n	8008d2a <_dtoa_r+0x242>
 8008d68:	2401      	movs	r4, #1
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d70:	f04f 33ff 	mov.w	r3, #4294967295
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2312      	movs	r3, #18
 8008d7c:	e7d0      	b.n	8008d20 <_dtoa_r+0x238>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d82:	e7f5      	b.n	8008d70 <_dtoa_r+0x288>
 8008d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	9307      	str	r3, [sp, #28]
 8008d8a:	e7d7      	b.n	8008d3c <_dtoa_r+0x254>
 8008d8c:	3101      	adds	r1, #1
 8008d8e:	0052      	lsls	r2, r2, #1
 8008d90:	e7d8      	b.n	8008d44 <_dtoa_r+0x25c>
 8008d92:	bf00      	nop
 8008d94:	f3af 8000 	nop.w
 8008d98:	636f4361 	.word	0x636f4361
 8008d9c:	3fd287a7 	.word	0x3fd287a7
 8008da0:	8b60c8b3 	.word	0x8b60c8b3
 8008da4:	3fc68a28 	.word	0x3fc68a28
 8008da8:	509f79fb 	.word	0x509f79fb
 8008dac:	3fd34413 	.word	0x3fd34413
 8008db0:	0800c934 	.word	0x0800c934
 8008db4:	0800c94b 	.word	0x0800c94b
 8008db8:	7ff00000 	.word	0x7ff00000
 8008dbc:	0800cc91 	.word	0x0800cc91
 8008dc0:	3ff80000 	.word	0x3ff80000
 8008dc4:	0800ca48 	.word	0x0800ca48
 8008dc8:	0800c9a3 	.word	0x0800c9a3
 8008dcc:	0800c930 	.word	0x0800c930
 8008dd0:	0800cc90 	.word	0x0800cc90
 8008dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008dd8:	6018      	str	r0, [r3, #0]
 8008dda:	9b07      	ldr	r3, [sp, #28]
 8008ddc:	2b0e      	cmp	r3, #14
 8008dde:	f200 80a4 	bhi.w	8008f2a <_dtoa_r+0x442>
 8008de2:	2c00      	cmp	r4, #0
 8008de4:	f000 80a1 	beq.w	8008f2a <_dtoa_r+0x442>
 8008de8:	2f00      	cmp	r7, #0
 8008dea:	dd33      	ble.n	8008e54 <_dtoa_r+0x36c>
 8008dec:	4bad      	ldr	r3, [pc, #692]	@ (80090a4 <_dtoa_r+0x5bc>)
 8008dee:	f007 020f 	and.w	r2, r7, #15
 8008df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df6:	ed93 7b00 	vldr	d7, [r3]
 8008dfa:	05f8      	lsls	r0, r7, #23
 8008dfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e04:	d516      	bpl.n	8008e34 <_dtoa_r+0x34c>
 8008e06:	4ba8      	ldr	r3, [pc, #672]	@ (80090a8 <_dtoa_r+0x5c0>)
 8008e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e10:	f7f7 fd1c 	bl	800084c <__aeabi_ddiv>
 8008e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e18:	f004 040f 	and.w	r4, r4, #15
 8008e1c:	2603      	movs	r6, #3
 8008e1e:	4da2      	ldr	r5, [pc, #648]	@ (80090a8 <_dtoa_r+0x5c0>)
 8008e20:	b954      	cbnz	r4, 8008e38 <_dtoa_r+0x350>
 8008e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2a:	f7f7 fd0f 	bl	800084c <__aeabi_ddiv>
 8008e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e32:	e028      	b.n	8008e86 <_dtoa_r+0x39e>
 8008e34:	2602      	movs	r6, #2
 8008e36:	e7f2      	b.n	8008e1e <_dtoa_r+0x336>
 8008e38:	07e1      	lsls	r1, r4, #31
 8008e3a:	d508      	bpl.n	8008e4e <_dtoa_r+0x366>
 8008e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e4c:	3601      	adds	r6, #1
 8008e4e:	1064      	asrs	r4, r4, #1
 8008e50:	3508      	adds	r5, #8
 8008e52:	e7e5      	b.n	8008e20 <_dtoa_r+0x338>
 8008e54:	f000 80d2 	beq.w	8008ffc <_dtoa_r+0x514>
 8008e58:	427c      	negs	r4, r7
 8008e5a:	4b92      	ldr	r3, [pc, #584]	@ (80090a4 <_dtoa_r+0x5bc>)
 8008e5c:	4d92      	ldr	r5, [pc, #584]	@ (80090a8 <_dtoa_r+0x5c0>)
 8008e5e:	f004 020f 	and.w	r2, r4, #15
 8008e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e6e:	f7f7 fbc3 	bl	80005f8 <__aeabi_dmul>
 8008e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e76:	1124      	asrs	r4, r4, #4
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2602      	movs	r6, #2
 8008e7c:	2c00      	cmp	r4, #0
 8008e7e:	f040 80b2 	bne.w	8008fe6 <_dtoa_r+0x4fe>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1d3      	bne.n	8008e2e <_dtoa_r+0x346>
 8008e86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 80b7 	beq.w	8009000 <_dtoa_r+0x518>
 8008e92:	4b86      	ldr	r3, [pc, #536]	@ (80090ac <_dtoa_r+0x5c4>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f000 80ae 	beq.w	8009000 <_dtoa_r+0x518>
 8008ea4:	9b07      	ldr	r3, [sp, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80aa 	beq.w	8009000 <_dtoa_r+0x518>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dd37      	ble.n	8008f22 <_dtoa_r+0x43a>
 8008eb2:	1e7b      	subs	r3, r7, #1
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4b7d      	ldr	r3, [pc, #500]	@ (80090b0 <_dtoa_r+0x5c8>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f7f7 fb9b 	bl	80005f8 <__aeabi_dmul>
 8008ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ec6:	9c00      	ldr	r4, [sp, #0]
 8008ec8:	3601      	adds	r6, #1
 8008eca:	4630      	mov	r0, r6
 8008ecc:	f7f7 fb2a 	bl	8000524 <__aeabi_i2d>
 8008ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	4b76      	ldr	r3, [pc, #472]	@ (80090b4 <_dtoa_r+0x5cc>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	f7f7 f9d6 	bl	800028c <__adddf3>
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	f040 808d 	bne.w	8009006 <_dtoa_r+0x51e>
 8008eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef0:	4b71      	ldr	r3, [pc, #452]	@ (80090b8 <_dtoa_r+0x5d0>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f7f7 f9c8 	bl	8000288 <__aeabi_dsub>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f00:	462a      	mov	r2, r5
 8008f02:	4633      	mov	r3, r6
 8008f04:	f7f7 fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	f040 828b 	bne.w	8009424 <_dtoa_r+0x93c>
 8008f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f12:	462a      	mov	r2, r5
 8008f14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f18:	f7f7 fde0 	bl	8000adc <__aeabi_dcmplt>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f040 8128 	bne.w	8009172 <_dtoa_r+0x68a>
 8008f22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f2c0 815a 	blt.w	80091e6 <_dtoa_r+0x6fe>
 8008f32:	2f0e      	cmp	r7, #14
 8008f34:	f300 8157 	bgt.w	80091e6 <_dtoa_r+0x6fe>
 8008f38:	4b5a      	ldr	r3, [pc, #360]	@ (80090a4 <_dtoa_r+0x5bc>)
 8008f3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f3e:	ed93 7b00 	vldr	d7, [r3]
 8008f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	ed8d 7b00 	vstr	d7, [sp]
 8008f4a:	da03      	bge.n	8008f54 <_dtoa_r+0x46c>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f340 8101 	ble.w	8009156 <_dtoa_r+0x66e>
 8008f54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f58:	4656      	mov	r6, sl
 8008f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 fc73 	bl	800084c <__aeabi_ddiv>
 8008f66:	f7f7 fdf7 	bl	8000b58 <__aeabi_d2iz>
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	f7f7 fada 	bl	8000524 <__aeabi_i2d>
 8008f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f74:	f7f7 fb40 	bl	80005f8 <__aeabi_dmul>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f84:	f7f7 f980 	bl	8000288 <__aeabi_dsub>
 8008f88:	f806 4b01 	strb.w	r4, [r6], #1
 8008f8c:	9d07      	ldr	r5, [sp, #28]
 8008f8e:	eba6 040a 	sub.w	r4, r6, sl
 8008f92:	42a5      	cmp	r5, r4
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	f040 8117 	bne.w	80091ca <_dtoa_r+0x6e2>
 8008f9c:	f7f7 f976 	bl	800028c <__adddf3>
 8008fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	f7f7 fdb6 	bl	8000b18 <__aeabi_dcmpgt>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f040 80f9 	bne.w	80091a4 <_dtoa_r+0x6bc>
 8008fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7f7 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fbe:	b118      	cbz	r0, 8008fc8 <_dtoa_r+0x4e0>
 8008fc0:	f018 0f01 	tst.w	r8, #1
 8008fc4:	f040 80ee 	bne.w	80091a4 <_dtoa_r+0x6bc>
 8008fc8:	4649      	mov	r1, r9
 8008fca:	4658      	mov	r0, fp
 8008fcc:	f000 fc90 	bl	80098f0 <_Bfree>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	7033      	strb	r3, [r6, #0]
 8008fd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fd6:	3701      	adds	r7, #1
 8008fd8:	601f      	str	r7, [r3, #0]
 8008fda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 831d 	beq.w	800961c <_dtoa_r+0xb34>
 8008fe2:	601e      	str	r6, [r3, #0]
 8008fe4:	e31a      	b.n	800961c <_dtoa_r+0xb34>
 8008fe6:	07e2      	lsls	r2, r4, #31
 8008fe8:	d505      	bpl.n	8008ff6 <_dtoa_r+0x50e>
 8008fea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fee:	f7f7 fb03 	bl	80005f8 <__aeabi_dmul>
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	1064      	asrs	r4, r4, #1
 8008ff8:	3508      	adds	r5, #8
 8008ffa:	e73f      	b.n	8008e7c <_dtoa_r+0x394>
 8008ffc:	2602      	movs	r6, #2
 8008ffe:	e742      	b.n	8008e86 <_dtoa_r+0x39e>
 8009000:	9c07      	ldr	r4, [sp, #28]
 8009002:	9704      	str	r7, [sp, #16]
 8009004:	e761      	b.n	8008eca <_dtoa_r+0x3e2>
 8009006:	4b27      	ldr	r3, [pc, #156]	@ (80090a4 <_dtoa_r+0x5bc>)
 8009008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800900a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800900e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009012:	4454      	add	r4, sl
 8009014:	2900      	cmp	r1, #0
 8009016:	d053      	beq.n	80090c0 <_dtoa_r+0x5d8>
 8009018:	4928      	ldr	r1, [pc, #160]	@ (80090bc <_dtoa_r+0x5d4>)
 800901a:	2000      	movs	r0, #0
 800901c:	f7f7 fc16 	bl	800084c <__aeabi_ddiv>
 8009020:	4633      	mov	r3, r6
 8009022:	462a      	mov	r2, r5
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800902c:	4656      	mov	r6, sl
 800902e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009032:	f7f7 fd91 	bl	8000b58 <__aeabi_d2iz>
 8009036:	4605      	mov	r5, r0
 8009038:	f7f7 fa74 	bl	8000524 <__aeabi_i2d>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009044:	f7f7 f920 	bl	8000288 <__aeabi_dsub>
 8009048:	3530      	adds	r5, #48	@ 0x30
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009052:	f806 5b01 	strb.w	r5, [r6], #1
 8009056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800905a:	f7f7 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	d171      	bne.n	8009146 <_dtoa_r+0x65e>
 8009062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009066:	4911      	ldr	r1, [pc, #68]	@ (80090ac <_dtoa_r+0x5c4>)
 8009068:	2000      	movs	r0, #0
 800906a:	f7f7 f90d 	bl	8000288 <__aeabi_dsub>
 800906e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009072:	f7f7 fd33 	bl	8000adc <__aeabi_dcmplt>
 8009076:	2800      	cmp	r0, #0
 8009078:	f040 8095 	bne.w	80091a6 <_dtoa_r+0x6be>
 800907c:	42a6      	cmp	r6, r4
 800907e:	f43f af50 	beq.w	8008f22 <_dtoa_r+0x43a>
 8009082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009086:	4b0a      	ldr	r3, [pc, #40]	@ (80090b0 <_dtoa_r+0x5c8>)
 8009088:	2200      	movs	r2, #0
 800908a:	f7f7 fab5 	bl	80005f8 <__aeabi_dmul>
 800908e:	4b08      	ldr	r3, [pc, #32]	@ (80090b0 <_dtoa_r+0x5c8>)
 8009090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009094:	2200      	movs	r2, #0
 8009096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909a:	f7f7 faad 	bl	80005f8 <__aeabi_dmul>
 800909e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090a2:	e7c4      	b.n	800902e <_dtoa_r+0x546>
 80090a4:	0800ca48 	.word	0x0800ca48
 80090a8:	0800ca20 	.word	0x0800ca20
 80090ac:	3ff00000 	.word	0x3ff00000
 80090b0:	40240000 	.word	0x40240000
 80090b4:	401c0000 	.word	0x401c0000
 80090b8:	40140000 	.word	0x40140000
 80090bc:	3fe00000 	.word	0x3fe00000
 80090c0:	4631      	mov	r1, r6
 80090c2:	4628      	mov	r0, r5
 80090c4:	f7f7 fa98 	bl	80005f8 <__aeabi_dmul>
 80090c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80090ce:	4656      	mov	r6, sl
 80090d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090d4:	f7f7 fd40 	bl	8000b58 <__aeabi_d2iz>
 80090d8:	4605      	mov	r5, r0
 80090da:	f7f7 fa23 	bl	8000524 <__aeabi_i2d>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090e6:	f7f7 f8cf 	bl	8000288 <__aeabi_dsub>
 80090ea:	3530      	adds	r5, #48	@ 0x30
 80090ec:	f806 5b01 	strb.w	r5, [r6], #1
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	42a6      	cmp	r6, r4
 80090f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090fa:	f04f 0200 	mov.w	r2, #0
 80090fe:	d124      	bne.n	800914a <_dtoa_r+0x662>
 8009100:	4bac      	ldr	r3, [pc, #688]	@ (80093b4 <_dtoa_r+0x8cc>)
 8009102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009106:	f7f7 f8c1 	bl	800028c <__adddf3>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009112:	f7f7 fd01 	bl	8000b18 <__aeabi_dcmpgt>
 8009116:	2800      	cmp	r0, #0
 8009118:	d145      	bne.n	80091a6 <_dtoa_r+0x6be>
 800911a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800911e:	49a5      	ldr	r1, [pc, #660]	@ (80093b4 <_dtoa_r+0x8cc>)
 8009120:	2000      	movs	r0, #0
 8009122:	f7f7 f8b1 	bl	8000288 <__aeabi_dsub>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800912e:	f7f7 fcd5 	bl	8000adc <__aeabi_dcmplt>
 8009132:	2800      	cmp	r0, #0
 8009134:	f43f aef5 	beq.w	8008f22 <_dtoa_r+0x43a>
 8009138:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800913a:	1e73      	subs	r3, r6, #1
 800913c:	9315      	str	r3, [sp, #84]	@ 0x54
 800913e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009142:	2b30      	cmp	r3, #48	@ 0x30
 8009144:	d0f8      	beq.n	8009138 <_dtoa_r+0x650>
 8009146:	9f04      	ldr	r7, [sp, #16]
 8009148:	e73e      	b.n	8008fc8 <_dtoa_r+0x4e0>
 800914a:	4b9b      	ldr	r3, [pc, #620]	@ (80093b8 <_dtoa_r+0x8d0>)
 800914c:	f7f7 fa54 	bl	80005f8 <__aeabi_dmul>
 8009150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009154:	e7bc      	b.n	80090d0 <_dtoa_r+0x5e8>
 8009156:	d10c      	bne.n	8009172 <_dtoa_r+0x68a>
 8009158:	4b98      	ldr	r3, [pc, #608]	@ (80093bc <_dtoa_r+0x8d4>)
 800915a:	2200      	movs	r2, #0
 800915c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009160:	f7f7 fa4a 	bl	80005f8 <__aeabi_dmul>
 8009164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009168:	f7f7 fccc 	bl	8000b04 <__aeabi_dcmpge>
 800916c:	2800      	cmp	r0, #0
 800916e:	f000 8157 	beq.w	8009420 <_dtoa_r+0x938>
 8009172:	2400      	movs	r4, #0
 8009174:	4625      	mov	r5, r4
 8009176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009178:	43db      	mvns	r3, r3
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	4656      	mov	r6, sl
 800917e:	2700      	movs	r7, #0
 8009180:	4621      	mov	r1, r4
 8009182:	4658      	mov	r0, fp
 8009184:	f000 fbb4 	bl	80098f0 <_Bfree>
 8009188:	2d00      	cmp	r5, #0
 800918a:	d0dc      	beq.n	8009146 <_dtoa_r+0x65e>
 800918c:	b12f      	cbz	r7, 800919a <_dtoa_r+0x6b2>
 800918e:	42af      	cmp	r7, r5
 8009190:	d003      	beq.n	800919a <_dtoa_r+0x6b2>
 8009192:	4639      	mov	r1, r7
 8009194:	4658      	mov	r0, fp
 8009196:	f000 fbab 	bl	80098f0 <_Bfree>
 800919a:	4629      	mov	r1, r5
 800919c:	4658      	mov	r0, fp
 800919e:	f000 fba7 	bl	80098f0 <_Bfree>
 80091a2:	e7d0      	b.n	8009146 <_dtoa_r+0x65e>
 80091a4:	9704      	str	r7, [sp, #16]
 80091a6:	4633      	mov	r3, r6
 80091a8:	461e      	mov	r6, r3
 80091aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ae:	2a39      	cmp	r2, #57	@ 0x39
 80091b0:	d107      	bne.n	80091c2 <_dtoa_r+0x6da>
 80091b2:	459a      	cmp	sl, r3
 80091b4:	d1f8      	bne.n	80091a8 <_dtoa_r+0x6c0>
 80091b6:	9a04      	ldr	r2, [sp, #16]
 80091b8:	3201      	adds	r2, #1
 80091ba:	9204      	str	r2, [sp, #16]
 80091bc:	2230      	movs	r2, #48	@ 0x30
 80091be:	f88a 2000 	strb.w	r2, [sl]
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	3201      	adds	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	e7bd      	b.n	8009146 <_dtoa_r+0x65e>
 80091ca:	4b7b      	ldr	r3, [pc, #492]	@ (80093b8 <_dtoa_r+0x8d0>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	f7f7 fa13 	bl	80005f8 <__aeabi_dmul>
 80091d2:	2200      	movs	r2, #0
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	f7f7 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 80091de:	2800      	cmp	r0, #0
 80091e0:	f43f aebb 	beq.w	8008f5a <_dtoa_r+0x472>
 80091e4:	e6f0      	b.n	8008fc8 <_dtoa_r+0x4e0>
 80091e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80091e8:	2a00      	cmp	r2, #0
 80091ea:	f000 80db 	beq.w	80093a4 <_dtoa_r+0x8bc>
 80091ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091f0:	2a01      	cmp	r2, #1
 80091f2:	f300 80bf 	bgt.w	8009374 <_dtoa_r+0x88c>
 80091f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	f000 80b7 	beq.w	800936c <_dtoa_r+0x884>
 80091fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009202:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009204:	4646      	mov	r6, r8
 8009206:	9a08      	ldr	r2, [sp, #32]
 8009208:	2101      	movs	r1, #1
 800920a:	441a      	add	r2, r3
 800920c:	4658      	mov	r0, fp
 800920e:	4498      	add	r8, r3
 8009210:	9208      	str	r2, [sp, #32]
 8009212:	f000 fc6b 	bl	8009aec <__i2b>
 8009216:	4605      	mov	r5, r0
 8009218:	b15e      	cbz	r6, 8009232 <_dtoa_r+0x74a>
 800921a:	9b08      	ldr	r3, [sp, #32]
 800921c:	2b00      	cmp	r3, #0
 800921e:	dd08      	ble.n	8009232 <_dtoa_r+0x74a>
 8009220:	42b3      	cmp	r3, r6
 8009222:	9a08      	ldr	r2, [sp, #32]
 8009224:	bfa8      	it	ge
 8009226:	4633      	movge	r3, r6
 8009228:	eba8 0803 	sub.w	r8, r8, r3
 800922c:	1af6      	subs	r6, r6, r3
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	9308      	str	r3, [sp, #32]
 8009232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009234:	b1f3      	cbz	r3, 8009274 <_dtoa_r+0x78c>
 8009236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80b7 	beq.w	80093ac <_dtoa_r+0x8c4>
 800923e:	b18c      	cbz	r4, 8009264 <_dtoa_r+0x77c>
 8009240:	4629      	mov	r1, r5
 8009242:	4622      	mov	r2, r4
 8009244:	4658      	mov	r0, fp
 8009246:	f000 fd11 	bl	8009c6c <__pow5mult>
 800924a:	464a      	mov	r2, r9
 800924c:	4601      	mov	r1, r0
 800924e:	4605      	mov	r5, r0
 8009250:	4658      	mov	r0, fp
 8009252:	f000 fc61 	bl	8009b18 <__multiply>
 8009256:	4649      	mov	r1, r9
 8009258:	9004      	str	r0, [sp, #16]
 800925a:	4658      	mov	r0, fp
 800925c:	f000 fb48 	bl	80098f0 <_Bfree>
 8009260:	9b04      	ldr	r3, [sp, #16]
 8009262:	4699      	mov	r9, r3
 8009264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009266:	1b1a      	subs	r2, r3, r4
 8009268:	d004      	beq.n	8009274 <_dtoa_r+0x78c>
 800926a:	4649      	mov	r1, r9
 800926c:	4658      	mov	r0, fp
 800926e:	f000 fcfd 	bl	8009c6c <__pow5mult>
 8009272:	4681      	mov	r9, r0
 8009274:	2101      	movs	r1, #1
 8009276:	4658      	mov	r0, fp
 8009278:	f000 fc38 	bl	8009aec <__i2b>
 800927c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800927e:	4604      	mov	r4, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 81cf 	beq.w	8009624 <_dtoa_r+0xb3c>
 8009286:	461a      	mov	r2, r3
 8009288:	4601      	mov	r1, r0
 800928a:	4658      	mov	r0, fp
 800928c:	f000 fcee 	bl	8009c6c <__pow5mult>
 8009290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009292:	2b01      	cmp	r3, #1
 8009294:	4604      	mov	r4, r0
 8009296:	f300 8095 	bgt.w	80093c4 <_dtoa_r+0x8dc>
 800929a:	9b02      	ldr	r3, [sp, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f040 8087 	bne.w	80093b0 <_dtoa_r+0x8c8>
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f040 8089 	bne.w	80093c0 <_dtoa_r+0x8d8>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092b4:	0d1b      	lsrs	r3, r3, #20
 80092b6:	051b      	lsls	r3, r3, #20
 80092b8:	b12b      	cbz	r3, 80092c6 <_dtoa_r+0x7de>
 80092ba:	9b08      	ldr	r3, [sp, #32]
 80092bc:	3301      	adds	r3, #1
 80092be:	9308      	str	r3, [sp, #32]
 80092c0:	f108 0801 	add.w	r8, r8, #1
 80092c4:	2301      	movs	r3, #1
 80092c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80092c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 81b0 	beq.w	8009630 <_dtoa_r+0xb48>
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092d6:	6918      	ldr	r0, [r3, #16]
 80092d8:	f000 fbbc 	bl	8009a54 <__hi0bits>
 80092dc:	f1c0 0020 	rsb	r0, r0, #32
 80092e0:	9b08      	ldr	r3, [sp, #32]
 80092e2:	4418      	add	r0, r3
 80092e4:	f010 001f 	ands.w	r0, r0, #31
 80092e8:	d077      	beq.n	80093da <_dtoa_r+0x8f2>
 80092ea:	f1c0 0320 	rsb	r3, r0, #32
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	dd6b      	ble.n	80093ca <_dtoa_r+0x8e2>
 80092f2:	9b08      	ldr	r3, [sp, #32]
 80092f4:	f1c0 001c 	rsb	r0, r0, #28
 80092f8:	4403      	add	r3, r0
 80092fa:	4480      	add	r8, r0
 80092fc:	4406      	add	r6, r0
 80092fe:	9308      	str	r3, [sp, #32]
 8009300:	f1b8 0f00 	cmp.w	r8, #0
 8009304:	dd05      	ble.n	8009312 <_dtoa_r+0x82a>
 8009306:	4649      	mov	r1, r9
 8009308:	4642      	mov	r2, r8
 800930a:	4658      	mov	r0, fp
 800930c:	f000 fd08 	bl	8009d20 <__lshift>
 8009310:	4681      	mov	r9, r0
 8009312:	9b08      	ldr	r3, [sp, #32]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd05      	ble.n	8009324 <_dtoa_r+0x83c>
 8009318:	4621      	mov	r1, r4
 800931a:	461a      	mov	r2, r3
 800931c:	4658      	mov	r0, fp
 800931e:	f000 fcff 	bl	8009d20 <__lshift>
 8009322:	4604      	mov	r4, r0
 8009324:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009326:	2b00      	cmp	r3, #0
 8009328:	d059      	beq.n	80093de <_dtoa_r+0x8f6>
 800932a:	4621      	mov	r1, r4
 800932c:	4648      	mov	r0, r9
 800932e:	f000 fd63 	bl	8009df8 <__mcmp>
 8009332:	2800      	cmp	r0, #0
 8009334:	da53      	bge.n	80093de <_dtoa_r+0x8f6>
 8009336:	1e7b      	subs	r3, r7, #1
 8009338:	9304      	str	r3, [sp, #16]
 800933a:	4649      	mov	r1, r9
 800933c:	2300      	movs	r3, #0
 800933e:	220a      	movs	r2, #10
 8009340:	4658      	mov	r0, fp
 8009342:	f000 faf7 	bl	8009934 <__multadd>
 8009346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009348:	4681      	mov	r9, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 8172 	beq.w	8009634 <_dtoa_r+0xb4c>
 8009350:	2300      	movs	r3, #0
 8009352:	4629      	mov	r1, r5
 8009354:	220a      	movs	r2, #10
 8009356:	4658      	mov	r0, fp
 8009358:	f000 faec 	bl	8009934 <__multadd>
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	4605      	mov	r5, r0
 8009362:	dc67      	bgt.n	8009434 <_dtoa_r+0x94c>
 8009364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009366:	2b02      	cmp	r3, #2
 8009368:	dc41      	bgt.n	80093ee <_dtoa_r+0x906>
 800936a:	e063      	b.n	8009434 <_dtoa_r+0x94c>
 800936c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800936e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009372:	e746      	b.n	8009202 <_dtoa_r+0x71a>
 8009374:	9b07      	ldr	r3, [sp, #28]
 8009376:	1e5c      	subs	r4, r3, #1
 8009378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800937a:	42a3      	cmp	r3, r4
 800937c:	bfbf      	itttt	lt
 800937e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009380:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009382:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009384:	1ae3      	sublt	r3, r4, r3
 8009386:	bfb4      	ite	lt
 8009388:	18d2      	addlt	r2, r2, r3
 800938a:	1b1c      	subge	r4, r3, r4
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	bfbc      	itt	lt
 8009390:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009392:	2400      	movlt	r4, #0
 8009394:	2b00      	cmp	r3, #0
 8009396:	bfb5      	itete	lt
 8009398:	eba8 0603 	sublt.w	r6, r8, r3
 800939c:	9b07      	ldrge	r3, [sp, #28]
 800939e:	2300      	movlt	r3, #0
 80093a0:	4646      	movge	r6, r8
 80093a2:	e730      	b.n	8009206 <_dtoa_r+0x71e>
 80093a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80093a8:	4646      	mov	r6, r8
 80093aa:	e735      	b.n	8009218 <_dtoa_r+0x730>
 80093ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093ae:	e75c      	b.n	800926a <_dtoa_r+0x782>
 80093b0:	2300      	movs	r3, #0
 80093b2:	e788      	b.n	80092c6 <_dtoa_r+0x7de>
 80093b4:	3fe00000 	.word	0x3fe00000
 80093b8:	40240000 	.word	0x40240000
 80093bc:	40140000 	.word	0x40140000
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	e780      	b.n	80092c6 <_dtoa_r+0x7de>
 80093c4:	2300      	movs	r3, #0
 80093c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80093c8:	e782      	b.n	80092d0 <_dtoa_r+0x7e8>
 80093ca:	d099      	beq.n	8009300 <_dtoa_r+0x818>
 80093cc:	9a08      	ldr	r2, [sp, #32]
 80093ce:	331c      	adds	r3, #28
 80093d0:	441a      	add	r2, r3
 80093d2:	4498      	add	r8, r3
 80093d4:	441e      	add	r6, r3
 80093d6:	9208      	str	r2, [sp, #32]
 80093d8:	e792      	b.n	8009300 <_dtoa_r+0x818>
 80093da:	4603      	mov	r3, r0
 80093dc:	e7f6      	b.n	80093cc <_dtoa_r+0x8e4>
 80093de:	9b07      	ldr	r3, [sp, #28]
 80093e0:	9704      	str	r7, [sp, #16]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dc20      	bgt.n	8009428 <_dtoa_r+0x940>
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	dd1e      	ble.n	800942c <_dtoa_r+0x944>
 80093ee:	9b00      	ldr	r3, [sp, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f47f aec0 	bne.w	8009176 <_dtoa_r+0x68e>
 80093f6:	4621      	mov	r1, r4
 80093f8:	2205      	movs	r2, #5
 80093fa:	4658      	mov	r0, fp
 80093fc:	f000 fa9a 	bl	8009934 <__multadd>
 8009400:	4601      	mov	r1, r0
 8009402:	4604      	mov	r4, r0
 8009404:	4648      	mov	r0, r9
 8009406:	f000 fcf7 	bl	8009df8 <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	f77f aeb3 	ble.w	8009176 <_dtoa_r+0x68e>
 8009410:	4656      	mov	r6, sl
 8009412:	2331      	movs	r3, #49	@ 0x31
 8009414:	f806 3b01 	strb.w	r3, [r6], #1
 8009418:	9b04      	ldr	r3, [sp, #16]
 800941a:	3301      	adds	r3, #1
 800941c:	9304      	str	r3, [sp, #16]
 800941e:	e6ae      	b.n	800917e <_dtoa_r+0x696>
 8009420:	9c07      	ldr	r4, [sp, #28]
 8009422:	9704      	str	r7, [sp, #16]
 8009424:	4625      	mov	r5, r4
 8009426:	e7f3      	b.n	8009410 <_dtoa_r+0x928>
 8009428:	9b07      	ldr	r3, [sp, #28]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 8104 	beq.w	800963c <_dtoa_r+0xb54>
 8009434:	2e00      	cmp	r6, #0
 8009436:	dd05      	ble.n	8009444 <_dtoa_r+0x95c>
 8009438:	4629      	mov	r1, r5
 800943a:	4632      	mov	r2, r6
 800943c:	4658      	mov	r0, fp
 800943e:	f000 fc6f 	bl	8009d20 <__lshift>
 8009442:	4605      	mov	r5, r0
 8009444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009446:	2b00      	cmp	r3, #0
 8009448:	d05a      	beq.n	8009500 <_dtoa_r+0xa18>
 800944a:	6869      	ldr	r1, [r5, #4]
 800944c:	4658      	mov	r0, fp
 800944e:	f000 fa0f 	bl	8009870 <_Balloc>
 8009452:	4606      	mov	r6, r0
 8009454:	b928      	cbnz	r0, 8009462 <_dtoa_r+0x97a>
 8009456:	4b84      	ldr	r3, [pc, #528]	@ (8009668 <_dtoa_r+0xb80>)
 8009458:	4602      	mov	r2, r0
 800945a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800945e:	f7ff bb5a 	b.w	8008b16 <_dtoa_r+0x2e>
 8009462:	692a      	ldr	r2, [r5, #16]
 8009464:	3202      	adds	r2, #2
 8009466:	0092      	lsls	r2, r2, #2
 8009468:	f105 010c 	add.w	r1, r5, #12
 800946c:	300c      	adds	r0, #12
 800946e:	f7ff fa9e 	bl	80089ae <memcpy>
 8009472:	2201      	movs	r2, #1
 8009474:	4631      	mov	r1, r6
 8009476:	4658      	mov	r0, fp
 8009478:	f000 fc52 	bl	8009d20 <__lshift>
 800947c:	f10a 0301 	add.w	r3, sl, #1
 8009480:	9307      	str	r3, [sp, #28]
 8009482:	9b00      	ldr	r3, [sp, #0]
 8009484:	4453      	add	r3, sl
 8009486:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009488:	9b02      	ldr	r3, [sp, #8]
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	462f      	mov	r7, r5
 8009490:	930a      	str	r3, [sp, #40]	@ 0x28
 8009492:	4605      	mov	r5, r0
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	4621      	mov	r1, r4
 8009498:	3b01      	subs	r3, #1
 800949a:	4648      	mov	r0, r9
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	f7ff fa9b 	bl	80089d8 <quorem>
 80094a2:	4639      	mov	r1, r7
 80094a4:	9002      	str	r0, [sp, #8]
 80094a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094aa:	4648      	mov	r0, r9
 80094ac:	f000 fca4 	bl	8009df8 <__mcmp>
 80094b0:	462a      	mov	r2, r5
 80094b2:	9008      	str	r0, [sp, #32]
 80094b4:	4621      	mov	r1, r4
 80094b6:	4658      	mov	r0, fp
 80094b8:	f000 fcba 	bl	8009e30 <__mdiff>
 80094bc:	68c2      	ldr	r2, [r0, #12]
 80094be:	4606      	mov	r6, r0
 80094c0:	bb02      	cbnz	r2, 8009504 <_dtoa_r+0xa1c>
 80094c2:	4601      	mov	r1, r0
 80094c4:	4648      	mov	r0, r9
 80094c6:	f000 fc97 	bl	8009df8 <__mcmp>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4631      	mov	r1, r6
 80094ce:	4658      	mov	r0, fp
 80094d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80094d2:	f000 fa0d 	bl	80098f0 <_Bfree>
 80094d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094da:	9e07      	ldr	r6, [sp, #28]
 80094dc:	ea43 0102 	orr.w	r1, r3, r2
 80094e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094e2:	4319      	orrs	r1, r3
 80094e4:	d110      	bne.n	8009508 <_dtoa_r+0xa20>
 80094e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094ea:	d029      	beq.n	8009540 <_dtoa_r+0xa58>
 80094ec:	9b08      	ldr	r3, [sp, #32]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd02      	ble.n	80094f8 <_dtoa_r+0xa10>
 80094f2:	9b02      	ldr	r3, [sp, #8]
 80094f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80094f8:	9b00      	ldr	r3, [sp, #0]
 80094fa:	f883 8000 	strb.w	r8, [r3]
 80094fe:	e63f      	b.n	8009180 <_dtoa_r+0x698>
 8009500:	4628      	mov	r0, r5
 8009502:	e7bb      	b.n	800947c <_dtoa_r+0x994>
 8009504:	2201      	movs	r2, #1
 8009506:	e7e1      	b.n	80094cc <_dtoa_r+0x9e4>
 8009508:	9b08      	ldr	r3, [sp, #32]
 800950a:	2b00      	cmp	r3, #0
 800950c:	db04      	blt.n	8009518 <_dtoa_r+0xa30>
 800950e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009510:	430b      	orrs	r3, r1
 8009512:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009514:	430b      	orrs	r3, r1
 8009516:	d120      	bne.n	800955a <_dtoa_r+0xa72>
 8009518:	2a00      	cmp	r2, #0
 800951a:	dded      	ble.n	80094f8 <_dtoa_r+0xa10>
 800951c:	4649      	mov	r1, r9
 800951e:	2201      	movs	r2, #1
 8009520:	4658      	mov	r0, fp
 8009522:	f000 fbfd 	bl	8009d20 <__lshift>
 8009526:	4621      	mov	r1, r4
 8009528:	4681      	mov	r9, r0
 800952a:	f000 fc65 	bl	8009df8 <__mcmp>
 800952e:	2800      	cmp	r0, #0
 8009530:	dc03      	bgt.n	800953a <_dtoa_r+0xa52>
 8009532:	d1e1      	bne.n	80094f8 <_dtoa_r+0xa10>
 8009534:	f018 0f01 	tst.w	r8, #1
 8009538:	d0de      	beq.n	80094f8 <_dtoa_r+0xa10>
 800953a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800953e:	d1d8      	bne.n	80094f2 <_dtoa_r+0xa0a>
 8009540:	9a00      	ldr	r2, [sp, #0]
 8009542:	2339      	movs	r3, #57	@ 0x39
 8009544:	7013      	strb	r3, [r2, #0]
 8009546:	4633      	mov	r3, r6
 8009548:	461e      	mov	r6, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009550:	2a39      	cmp	r2, #57	@ 0x39
 8009552:	d052      	beq.n	80095fa <_dtoa_r+0xb12>
 8009554:	3201      	adds	r2, #1
 8009556:	701a      	strb	r2, [r3, #0]
 8009558:	e612      	b.n	8009180 <_dtoa_r+0x698>
 800955a:	2a00      	cmp	r2, #0
 800955c:	dd07      	ble.n	800956e <_dtoa_r+0xa86>
 800955e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009562:	d0ed      	beq.n	8009540 <_dtoa_r+0xa58>
 8009564:	9a00      	ldr	r2, [sp, #0]
 8009566:	f108 0301 	add.w	r3, r8, #1
 800956a:	7013      	strb	r3, [r2, #0]
 800956c:	e608      	b.n	8009180 <_dtoa_r+0x698>
 800956e:	9b07      	ldr	r3, [sp, #28]
 8009570:	9a07      	ldr	r2, [sp, #28]
 8009572:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009578:	4293      	cmp	r3, r2
 800957a:	d028      	beq.n	80095ce <_dtoa_r+0xae6>
 800957c:	4649      	mov	r1, r9
 800957e:	2300      	movs	r3, #0
 8009580:	220a      	movs	r2, #10
 8009582:	4658      	mov	r0, fp
 8009584:	f000 f9d6 	bl	8009934 <__multadd>
 8009588:	42af      	cmp	r7, r5
 800958a:	4681      	mov	r9, r0
 800958c:	f04f 0300 	mov.w	r3, #0
 8009590:	f04f 020a 	mov.w	r2, #10
 8009594:	4639      	mov	r1, r7
 8009596:	4658      	mov	r0, fp
 8009598:	d107      	bne.n	80095aa <_dtoa_r+0xac2>
 800959a:	f000 f9cb 	bl	8009934 <__multadd>
 800959e:	4607      	mov	r7, r0
 80095a0:	4605      	mov	r5, r0
 80095a2:	9b07      	ldr	r3, [sp, #28]
 80095a4:	3301      	adds	r3, #1
 80095a6:	9307      	str	r3, [sp, #28]
 80095a8:	e774      	b.n	8009494 <_dtoa_r+0x9ac>
 80095aa:	f000 f9c3 	bl	8009934 <__multadd>
 80095ae:	4629      	mov	r1, r5
 80095b0:	4607      	mov	r7, r0
 80095b2:	2300      	movs	r3, #0
 80095b4:	220a      	movs	r2, #10
 80095b6:	4658      	mov	r0, fp
 80095b8:	f000 f9bc 	bl	8009934 <__multadd>
 80095bc:	4605      	mov	r5, r0
 80095be:	e7f0      	b.n	80095a2 <_dtoa_r+0xaba>
 80095c0:	9b00      	ldr	r3, [sp, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bfcc      	ite	gt
 80095c6:	461e      	movgt	r6, r3
 80095c8:	2601      	movle	r6, #1
 80095ca:	4456      	add	r6, sl
 80095cc:	2700      	movs	r7, #0
 80095ce:	4649      	mov	r1, r9
 80095d0:	2201      	movs	r2, #1
 80095d2:	4658      	mov	r0, fp
 80095d4:	f000 fba4 	bl	8009d20 <__lshift>
 80095d8:	4621      	mov	r1, r4
 80095da:	4681      	mov	r9, r0
 80095dc:	f000 fc0c 	bl	8009df8 <__mcmp>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	dcb0      	bgt.n	8009546 <_dtoa_r+0xa5e>
 80095e4:	d102      	bne.n	80095ec <_dtoa_r+0xb04>
 80095e6:	f018 0f01 	tst.w	r8, #1
 80095ea:	d1ac      	bne.n	8009546 <_dtoa_r+0xa5e>
 80095ec:	4633      	mov	r3, r6
 80095ee:	461e      	mov	r6, r3
 80095f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095f4:	2a30      	cmp	r2, #48	@ 0x30
 80095f6:	d0fa      	beq.n	80095ee <_dtoa_r+0xb06>
 80095f8:	e5c2      	b.n	8009180 <_dtoa_r+0x698>
 80095fa:	459a      	cmp	sl, r3
 80095fc:	d1a4      	bne.n	8009548 <_dtoa_r+0xa60>
 80095fe:	9b04      	ldr	r3, [sp, #16]
 8009600:	3301      	adds	r3, #1
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	2331      	movs	r3, #49	@ 0x31
 8009606:	f88a 3000 	strb.w	r3, [sl]
 800960a:	e5b9      	b.n	8009180 <_dtoa_r+0x698>
 800960c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800960e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800966c <_dtoa_r+0xb84>
 8009612:	b11b      	cbz	r3, 800961c <_dtoa_r+0xb34>
 8009614:	f10a 0308 	add.w	r3, sl, #8
 8009618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	4650      	mov	r0, sl
 800961e:	b019      	add	sp, #100	@ 0x64
 8009620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009626:	2b01      	cmp	r3, #1
 8009628:	f77f ae37 	ble.w	800929a <_dtoa_r+0x7b2>
 800962c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009630:	2001      	movs	r0, #1
 8009632:	e655      	b.n	80092e0 <_dtoa_r+0x7f8>
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	f77f aed6 	ble.w	80093e8 <_dtoa_r+0x900>
 800963c:	4656      	mov	r6, sl
 800963e:	4621      	mov	r1, r4
 8009640:	4648      	mov	r0, r9
 8009642:	f7ff f9c9 	bl	80089d8 <quorem>
 8009646:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800964a:	f806 8b01 	strb.w	r8, [r6], #1
 800964e:	9b00      	ldr	r3, [sp, #0]
 8009650:	eba6 020a 	sub.w	r2, r6, sl
 8009654:	4293      	cmp	r3, r2
 8009656:	ddb3      	ble.n	80095c0 <_dtoa_r+0xad8>
 8009658:	4649      	mov	r1, r9
 800965a:	2300      	movs	r3, #0
 800965c:	220a      	movs	r2, #10
 800965e:	4658      	mov	r0, fp
 8009660:	f000 f968 	bl	8009934 <__multadd>
 8009664:	4681      	mov	r9, r0
 8009666:	e7ea      	b.n	800963e <_dtoa_r+0xb56>
 8009668:	0800c9a3 	.word	0x0800c9a3
 800966c:	0800c927 	.word	0x0800c927

08009670 <_free_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4605      	mov	r5, r0
 8009674:	2900      	cmp	r1, #0
 8009676:	d041      	beq.n	80096fc <_free_r+0x8c>
 8009678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967c:	1f0c      	subs	r4, r1, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfb8      	it	lt
 8009682:	18e4      	addlt	r4, r4, r3
 8009684:	f000 f8e8 	bl	8009858 <__malloc_lock>
 8009688:	4a1d      	ldr	r2, [pc, #116]	@ (8009700 <_free_r+0x90>)
 800968a:	6813      	ldr	r3, [r2, #0]
 800968c:	b933      	cbnz	r3, 800969c <_free_r+0x2c>
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	6014      	str	r4, [r2, #0]
 8009692:	4628      	mov	r0, r5
 8009694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009698:	f000 b8e4 	b.w	8009864 <__malloc_unlock>
 800969c:	42a3      	cmp	r3, r4
 800969e:	d908      	bls.n	80096b2 <_free_r+0x42>
 80096a0:	6820      	ldr	r0, [r4, #0]
 80096a2:	1821      	adds	r1, r4, r0
 80096a4:	428b      	cmp	r3, r1
 80096a6:	bf01      	itttt	eq
 80096a8:	6819      	ldreq	r1, [r3, #0]
 80096aa:	685b      	ldreq	r3, [r3, #4]
 80096ac:	1809      	addeq	r1, r1, r0
 80096ae:	6021      	streq	r1, [r4, #0]
 80096b0:	e7ed      	b.n	800968e <_free_r+0x1e>
 80096b2:	461a      	mov	r2, r3
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	b10b      	cbz	r3, 80096bc <_free_r+0x4c>
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	d9fa      	bls.n	80096b2 <_free_r+0x42>
 80096bc:	6811      	ldr	r1, [r2, #0]
 80096be:	1850      	adds	r0, r2, r1
 80096c0:	42a0      	cmp	r0, r4
 80096c2:	d10b      	bne.n	80096dc <_free_r+0x6c>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	4401      	add	r1, r0
 80096c8:	1850      	adds	r0, r2, r1
 80096ca:	4283      	cmp	r3, r0
 80096cc:	6011      	str	r1, [r2, #0]
 80096ce:	d1e0      	bne.n	8009692 <_free_r+0x22>
 80096d0:	6818      	ldr	r0, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	6053      	str	r3, [r2, #4]
 80096d6:	4408      	add	r0, r1
 80096d8:	6010      	str	r0, [r2, #0]
 80096da:	e7da      	b.n	8009692 <_free_r+0x22>
 80096dc:	d902      	bls.n	80096e4 <_free_r+0x74>
 80096de:	230c      	movs	r3, #12
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	e7d6      	b.n	8009692 <_free_r+0x22>
 80096e4:	6820      	ldr	r0, [r4, #0]
 80096e6:	1821      	adds	r1, r4, r0
 80096e8:	428b      	cmp	r3, r1
 80096ea:	bf04      	itt	eq
 80096ec:	6819      	ldreq	r1, [r3, #0]
 80096ee:	685b      	ldreq	r3, [r3, #4]
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	bf04      	itt	eq
 80096f4:	1809      	addeq	r1, r1, r0
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	6054      	str	r4, [r2, #4]
 80096fa:	e7ca      	b.n	8009692 <_free_r+0x22>
 80096fc:	bd38      	pop	{r3, r4, r5, pc}
 80096fe:	bf00      	nop
 8009700:	20004684 	.word	0x20004684

08009704 <malloc>:
 8009704:	4b02      	ldr	r3, [pc, #8]	@ (8009710 <malloc+0xc>)
 8009706:	4601      	mov	r1, r0
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f000 b825 	b.w	8009758 <_malloc_r>
 800970e:	bf00      	nop
 8009710:	20000024 	.word	0x20000024

08009714 <sbrk_aligned>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4e0f      	ldr	r6, [pc, #60]	@ (8009754 <sbrk_aligned+0x40>)
 8009718:	460c      	mov	r4, r1
 800971a:	6831      	ldr	r1, [r6, #0]
 800971c:	4605      	mov	r5, r0
 800971e:	b911      	cbnz	r1, 8009726 <sbrk_aligned+0x12>
 8009720:	f002 fb70 	bl	800be04 <_sbrk_r>
 8009724:	6030      	str	r0, [r6, #0]
 8009726:	4621      	mov	r1, r4
 8009728:	4628      	mov	r0, r5
 800972a:	f002 fb6b 	bl	800be04 <_sbrk_r>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d103      	bne.n	800973a <sbrk_aligned+0x26>
 8009732:	f04f 34ff 	mov.w	r4, #4294967295
 8009736:	4620      	mov	r0, r4
 8009738:	bd70      	pop	{r4, r5, r6, pc}
 800973a:	1cc4      	adds	r4, r0, #3
 800973c:	f024 0403 	bic.w	r4, r4, #3
 8009740:	42a0      	cmp	r0, r4
 8009742:	d0f8      	beq.n	8009736 <sbrk_aligned+0x22>
 8009744:	1a21      	subs	r1, r4, r0
 8009746:	4628      	mov	r0, r5
 8009748:	f002 fb5c 	bl	800be04 <_sbrk_r>
 800974c:	3001      	adds	r0, #1
 800974e:	d1f2      	bne.n	8009736 <sbrk_aligned+0x22>
 8009750:	e7ef      	b.n	8009732 <sbrk_aligned+0x1e>
 8009752:	bf00      	nop
 8009754:	20004680 	.word	0x20004680

08009758 <_malloc_r>:
 8009758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	1ccd      	adds	r5, r1, #3
 800975e:	f025 0503 	bic.w	r5, r5, #3
 8009762:	3508      	adds	r5, #8
 8009764:	2d0c      	cmp	r5, #12
 8009766:	bf38      	it	cc
 8009768:	250c      	movcc	r5, #12
 800976a:	2d00      	cmp	r5, #0
 800976c:	4606      	mov	r6, r0
 800976e:	db01      	blt.n	8009774 <_malloc_r+0x1c>
 8009770:	42a9      	cmp	r1, r5
 8009772:	d904      	bls.n	800977e <_malloc_r+0x26>
 8009774:	230c      	movs	r3, #12
 8009776:	6033      	str	r3, [r6, #0]
 8009778:	2000      	movs	r0, #0
 800977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009854 <_malloc_r+0xfc>
 8009782:	f000 f869 	bl	8009858 <__malloc_lock>
 8009786:	f8d8 3000 	ldr.w	r3, [r8]
 800978a:	461c      	mov	r4, r3
 800978c:	bb44      	cbnz	r4, 80097e0 <_malloc_r+0x88>
 800978e:	4629      	mov	r1, r5
 8009790:	4630      	mov	r0, r6
 8009792:	f7ff ffbf 	bl	8009714 <sbrk_aligned>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	4604      	mov	r4, r0
 800979a:	d158      	bne.n	800984e <_malloc_r+0xf6>
 800979c:	f8d8 4000 	ldr.w	r4, [r8]
 80097a0:	4627      	mov	r7, r4
 80097a2:	2f00      	cmp	r7, #0
 80097a4:	d143      	bne.n	800982e <_malloc_r+0xd6>
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	d04b      	beq.n	8009842 <_malloc_r+0xea>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	4639      	mov	r1, r7
 80097ae:	4630      	mov	r0, r6
 80097b0:	eb04 0903 	add.w	r9, r4, r3
 80097b4:	f002 fb26 	bl	800be04 <_sbrk_r>
 80097b8:	4581      	cmp	r9, r0
 80097ba:	d142      	bne.n	8009842 <_malloc_r+0xea>
 80097bc:	6821      	ldr	r1, [r4, #0]
 80097be:	1a6d      	subs	r5, r5, r1
 80097c0:	4629      	mov	r1, r5
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7ff ffa6 	bl	8009714 <sbrk_aligned>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d03a      	beq.n	8009842 <_malloc_r+0xea>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	442b      	add	r3, r5
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	f8d8 3000 	ldr.w	r3, [r8]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	bb62      	cbnz	r2, 8009834 <_malloc_r+0xdc>
 80097da:	f8c8 7000 	str.w	r7, [r8]
 80097de:	e00f      	b.n	8009800 <_malloc_r+0xa8>
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	1b52      	subs	r2, r2, r5
 80097e4:	d420      	bmi.n	8009828 <_malloc_r+0xd0>
 80097e6:	2a0b      	cmp	r2, #11
 80097e8:	d917      	bls.n	800981a <_malloc_r+0xc2>
 80097ea:	1961      	adds	r1, r4, r5
 80097ec:	42a3      	cmp	r3, r4
 80097ee:	6025      	str	r5, [r4, #0]
 80097f0:	bf18      	it	ne
 80097f2:	6059      	strne	r1, [r3, #4]
 80097f4:	6863      	ldr	r3, [r4, #4]
 80097f6:	bf08      	it	eq
 80097f8:	f8c8 1000 	streq.w	r1, [r8]
 80097fc:	5162      	str	r2, [r4, r5]
 80097fe:	604b      	str	r3, [r1, #4]
 8009800:	4630      	mov	r0, r6
 8009802:	f000 f82f 	bl	8009864 <__malloc_unlock>
 8009806:	f104 000b 	add.w	r0, r4, #11
 800980a:	1d23      	adds	r3, r4, #4
 800980c:	f020 0007 	bic.w	r0, r0, #7
 8009810:	1ac2      	subs	r2, r0, r3
 8009812:	bf1c      	itt	ne
 8009814:	1a1b      	subne	r3, r3, r0
 8009816:	50a3      	strne	r3, [r4, r2]
 8009818:	e7af      	b.n	800977a <_malloc_r+0x22>
 800981a:	6862      	ldr	r2, [r4, #4]
 800981c:	42a3      	cmp	r3, r4
 800981e:	bf0c      	ite	eq
 8009820:	f8c8 2000 	streq.w	r2, [r8]
 8009824:	605a      	strne	r2, [r3, #4]
 8009826:	e7eb      	b.n	8009800 <_malloc_r+0xa8>
 8009828:	4623      	mov	r3, r4
 800982a:	6864      	ldr	r4, [r4, #4]
 800982c:	e7ae      	b.n	800978c <_malloc_r+0x34>
 800982e:	463c      	mov	r4, r7
 8009830:	687f      	ldr	r7, [r7, #4]
 8009832:	e7b6      	b.n	80097a2 <_malloc_r+0x4a>
 8009834:	461a      	mov	r2, r3
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	42a3      	cmp	r3, r4
 800983a:	d1fb      	bne.n	8009834 <_malloc_r+0xdc>
 800983c:	2300      	movs	r3, #0
 800983e:	6053      	str	r3, [r2, #4]
 8009840:	e7de      	b.n	8009800 <_malloc_r+0xa8>
 8009842:	230c      	movs	r3, #12
 8009844:	6033      	str	r3, [r6, #0]
 8009846:	4630      	mov	r0, r6
 8009848:	f000 f80c 	bl	8009864 <__malloc_unlock>
 800984c:	e794      	b.n	8009778 <_malloc_r+0x20>
 800984e:	6005      	str	r5, [r0, #0]
 8009850:	e7d6      	b.n	8009800 <_malloc_r+0xa8>
 8009852:	bf00      	nop
 8009854:	20004684 	.word	0x20004684

08009858 <__malloc_lock>:
 8009858:	4801      	ldr	r0, [pc, #4]	@ (8009860 <__malloc_lock+0x8>)
 800985a:	f7ff b8a6 	b.w	80089aa <__retarget_lock_acquire_recursive>
 800985e:	bf00      	nop
 8009860:	2000467c 	.word	0x2000467c

08009864 <__malloc_unlock>:
 8009864:	4801      	ldr	r0, [pc, #4]	@ (800986c <__malloc_unlock+0x8>)
 8009866:	f7ff b8a1 	b.w	80089ac <__retarget_lock_release_recursive>
 800986a:	bf00      	nop
 800986c:	2000467c 	.word	0x2000467c

08009870 <_Balloc>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	69c6      	ldr	r6, [r0, #28]
 8009874:	4604      	mov	r4, r0
 8009876:	460d      	mov	r5, r1
 8009878:	b976      	cbnz	r6, 8009898 <_Balloc+0x28>
 800987a:	2010      	movs	r0, #16
 800987c:	f7ff ff42 	bl	8009704 <malloc>
 8009880:	4602      	mov	r2, r0
 8009882:	61e0      	str	r0, [r4, #28]
 8009884:	b920      	cbnz	r0, 8009890 <_Balloc+0x20>
 8009886:	4b18      	ldr	r3, [pc, #96]	@ (80098e8 <_Balloc+0x78>)
 8009888:	4818      	ldr	r0, [pc, #96]	@ (80098ec <_Balloc+0x7c>)
 800988a:	216b      	movs	r1, #107	@ 0x6b
 800988c:	f002 fad4 	bl	800be38 <__assert_func>
 8009890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009894:	6006      	str	r6, [r0, #0]
 8009896:	60c6      	str	r6, [r0, #12]
 8009898:	69e6      	ldr	r6, [r4, #28]
 800989a:	68f3      	ldr	r3, [r6, #12]
 800989c:	b183      	cbz	r3, 80098c0 <_Balloc+0x50>
 800989e:	69e3      	ldr	r3, [r4, #28]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098a6:	b9b8      	cbnz	r0, 80098d8 <_Balloc+0x68>
 80098a8:	2101      	movs	r1, #1
 80098aa:	fa01 f605 	lsl.w	r6, r1, r5
 80098ae:	1d72      	adds	r2, r6, #5
 80098b0:	0092      	lsls	r2, r2, #2
 80098b2:	4620      	mov	r0, r4
 80098b4:	f002 fade 	bl	800be74 <_calloc_r>
 80098b8:	b160      	cbz	r0, 80098d4 <_Balloc+0x64>
 80098ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098be:	e00e      	b.n	80098de <_Balloc+0x6e>
 80098c0:	2221      	movs	r2, #33	@ 0x21
 80098c2:	2104      	movs	r1, #4
 80098c4:	4620      	mov	r0, r4
 80098c6:	f002 fad5 	bl	800be74 <_calloc_r>
 80098ca:	69e3      	ldr	r3, [r4, #28]
 80098cc:	60f0      	str	r0, [r6, #12]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e4      	bne.n	800989e <_Balloc+0x2e>
 80098d4:	2000      	movs	r0, #0
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	6802      	ldr	r2, [r0, #0]
 80098da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098de:	2300      	movs	r3, #0
 80098e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098e4:	e7f7      	b.n	80098d6 <_Balloc+0x66>
 80098e6:	bf00      	nop
 80098e8:	0800c934 	.word	0x0800c934
 80098ec:	0800c9b4 	.word	0x0800c9b4

080098f0 <_Bfree>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	69c6      	ldr	r6, [r0, #28]
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b976      	cbnz	r6, 8009918 <_Bfree+0x28>
 80098fa:	2010      	movs	r0, #16
 80098fc:	f7ff ff02 	bl	8009704 <malloc>
 8009900:	4602      	mov	r2, r0
 8009902:	61e8      	str	r0, [r5, #28]
 8009904:	b920      	cbnz	r0, 8009910 <_Bfree+0x20>
 8009906:	4b09      	ldr	r3, [pc, #36]	@ (800992c <_Bfree+0x3c>)
 8009908:	4809      	ldr	r0, [pc, #36]	@ (8009930 <_Bfree+0x40>)
 800990a:	218f      	movs	r1, #143	@ 0x8f
 800990c:	f002 fa94 	bl	800be38 <__assert_func>
 8009910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009914:	6006      	str	r6, [r0, #0]
 8009916:	60c6      	str	r6, [r0, #12]
 8009918:	b13c      	cbz	r4, 800992a <_Bfree+0x3a>
 800991a:	69eb      	ldr	r3, [r5, #28]
 800991c:	6862      	ldr	r2, [r4, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009924:	6021      	str	r1, [r4, #0]
 8009926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	0800c934 	.word	0x0800c934
 8009930:	0800c9b4 	.word	0x0800c9b4

08009934 <__multadd>:
 8009934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009938:	690d      	ldr	r5, [r1, #16]
 800993a:	4607      	mov	r7, r0
 800993c:	460c      	mov	r4, r1
 800993e:	461e      	mov	r6, r3
 8009940:	f101 0c14 	add.w	ip, r1, #20
 8009944:	2000      	movs	r0, #0
 8009946:	f8dc 3000 	ldr.w	r3, [ip]
 800994a:	b299      	uxth	r1, r3
 800994c:	fb02 6101 	mla	r1, r2, r1, r6
 8009950:	0c1e      	lsrs	r6, r3, #16
 8009952:	0c0b      	lsrs	r3, r1, #16
 8009954:	fb02 3306 	mla	r3, r2, r6, r3
 8009958:	b289      	uxth	r1, r1
 800995a:	3001      	adds	r0, #1
 800995c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009960:	4285      	cmp	r5, r0
 8009962:	f84c 1b04 	str.w	r1, [ip], #4
 8009966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800996a:	dcec      	bgt.n	8009946 <__multadd+0x12>
 800996c:	b30e      	cbz	r6, 80099b2 <__multadd+0x7e>
 800996e:	68a3      	ldr	r3, [r4, #8]
 8009970:	42ab      	cmp	r3, r5
 8009972:	dc19      	bgt.n	80099a8 <__multadd+0x74>
 8009974:	6861      	ldr	r1, [r4, #4]
 8009976:	4638      	mov	r0, r7
 8009978:	3101      	adds	r1, #1
 800997a:	f7ff ff79 	bl	8009870 <_Balloc>
 800997e:	4680      	mov	r8, r0
 8009980:	b928      	cbnz	r0, 800998e <__multadd+0x5a>
 8009982:	4602      	mov	r2, r0
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <__multadd+0x84>)
 8009986:	480d      	ldr	r0, [pc, #52]	@ (80099bc <__multadd+0x88>)
 8009988:	21ba      	movs	r1, #186	@ 0xba
 800998a:	f002 fa55 	bl	800be38 <__assert_func>
 800998e:	6922      	ldr	r2, [r4, #16]
 8009990:	3202      	adds	r2, #2
 8009992:	f104 010c 	add.w	r1, r4, #12
 8009996:	0092      	lsls	r2, r2, #2
 8009998:	300c      	adds	r0, #12
 800999a:	f7ff f808 	bl	80089ae <memcpy>
 800999e:	4621      	mov	r1, r4
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7ff ffa5 	bl	80098f0 <_Bfree>
 80099a6:	4644      	mov	r4, r8
 80099a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099ac:	3501      	adds	r5, #1
 80099ae:	615e      	str	r6, [r3, #20]
 80099b0:	6125      	str	r5, [r4, #16]
 80099b2:	4620      	mov	r0, r4
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b8:	0800c9a3 	.word	0x0800c9a3
 80099bc:	0800c9b4 	.word	0x0800c9b4

080099c0 <__s2b>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	460c      	mov	r4, r1
 80099c6:	4615      	mov	r5, r2
 80099c8:	461f      	mov	r7, r3
 80099ca:	2209      	movs	r2, #9
 80099cc:	3308      	adds	r3, #8
 80099ce:	4606      	mov	r6, r0
 80099d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80099d4:	2100      	movs	r1, #0
 80099d6:	2201      	movs	r2, #1
 80099d8:	429a      	cmp	r2, r3
 80099da:	db09      	blt.n	80099f0 <__s2b+0x30>
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff ff47 	bl	8009870 <_Balloc>
 80099e2:	b940      	cbnz	r0, 80099f6 <__s2b+0x36>
 80099e4:	4602      	mov	r2, r0
 80099e6:	4b19      	ldr	r3, [pc, #100]	@ (8009a4c <__s2b+0x8c>)
 80099e8:	4819      	ldr	r0, [pc, #100]	@ (8009a50 <__s2b+0x90>)
 80099ea:	21d3      	movs	r1, #211	@ 0xd3
 80099ec:	f002 fa24 	bl	800be38 <__assert_func>
 80099f0:	0052      	lsls	r2, r2, #1
 80099f2:	3101      	adds	r1, #1
 80099f4:	e7f0      	b.n	80099d8 <__s2b+0x18>
 80099f6:	9b08      	ldr	r3, [sp, #32]
 80099f8:	6143      	str	r3, [r0, #20]
 80099fa:	2d09      	cmp	r5, #9
 80099fc:	f04f 0301 	mov.w	r3, #1
 8009a00:	6103      	str	r3, [r0, #16]
 8009a02:	dd16      	ble.n	8009a32 <__s2b+0x72>
 8009a04:	f104 0909 	add.w	r9, r4, #9
 8009a08:	46c8      	mov	r8, r9
 8009a0a:	442c      	add	r4, r5
 8009a0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a10:	4601      	mov	r1, r0
 8009a12:	3b30      	subs	r3, #48	@ 0x30
 8009a14:	220a      	movs	r2, #10
 8009a16:	4630      	mov	r0, r6
 8009a18:	f7ff ff8c 	bl	8009934 <__multadd>
 8009a1c:	45a0      	cmp	r8, r4
 8009a1e:	d1f5      	bne.n	8009a0c <__s2b+0x4c>
 8009a20:	f1a5 0408 	sub.w	r4, r5, #8
 8009a24:	444c      	add	r4, r9
 8009a26:	1b2d      	subs	r5, r5, r4
 8009a28:	1963      	adds	r3, r4, r5
 8009a2a:	42bb      	cmp	r3, r7
 8009a2c:	db04      	blt.n	8009a38 <__s2b+0x78>
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	340a      	adds	r4, #10
 8009a34:	2509      	movs	r5, #9
 8009a36:	e7f6      	b.n	8009a26 <__s2b+0x66>
 8009a38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	3b30      	subs	r3, #48	@ 0x30
 8009a40:	220a      	movs	r2, #10
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff76 	bl	8009934 <__multadd>
 8009a48:	e7ee      	b.n	8009a28 <__s2b+0x68>
 8009a4a:	bf00      	nop
 8009a4c:	0800c9a3 	.word	0x0800c9a3
 8009a50:	0800c9b4 	.word	0x0800c9b4

08009a54 <__hi0bits>:
 8009a54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a58:	4603      	mov	r3, r0
 8009a5a:	bf36      	itet	cc
 8009a5c:	0403      	lslcc	r3, r0, #16
 8009a5e:	2000      	movcs	r0, #0
 8009a60:	2010      	movcc	r0, #16
 8009a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a66:	bf3c      	itt	cc
 8009a68:	021b      	lslcc	r3, r3, #8
 8009a6a:	3008      	addcc	r0, #8
 8009a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a70:	bf3c      	itt	cc
 8009a72:	011b      	lslcc	r3, r3, #4
 8009a74:	3004      	addcc	r0, #4
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a7a:	bf3c      	itt	cc
 8009a7c:	009b      	lslcc	r3, r3, #2
 8009a7e:	3002      	addcc	r0, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	db05      	blt.n	8009a90 <__hi0bits+0x3c>
 8009a84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a88:	f100 0001 	add.w	r0, r0, #1
 8009a8c:	bf08      	it	eq
 8009a8e:	2020      	moveq	r0, #32
 8009a90:	4770      	bx	lr

08009a92 <__lo0bits>:
 8009a92:	6803      	ldr	r3, [r0, #0]
 8009a94:	4602      	mov	r2, r0
 8009a96:	f013 0007 	ands.w	r0, r3, #7
 8009a9a:	d00b      	beq.n	8009ab4 <__lo0bits+0x22>
 8009a9c:	07d9      	lsls	r1, r3, #31
 8009a9e:	d421      	bmi.n	8009ae4 <__lo0bits+0x52>
 8009aa0:	0798      	lsls	r0, r3, #30
 8009aa2:	bf49      	itett	mi
 8009aa4:	085b      	lsrmi	r3, r3, #1
 8009aa6:	089b      	lsrpl	r3, r3, #2
 8009aa8:	2001      	movmi	r0, #1
 8009aaa:	6013      	strmi	r3, [r2, #0]
 8009aac:	bf5c      	itt	pl
 8009aae:	6013      	strpl	r3, [r2, #0]
 8009ab0:	2002      	movpl	r0, #2
 8009ab2:	4770      	bx	lr
 8009ab4:	b299      	uxth	r1, r3
 8009ab6:	b909      	cbnz	r1, 8009abc <__lo0bits+0x2a>
 8009ab8:	0c1b      	lsrs	r3, r3, #16
 8009aba:	2010      	movs	r0, #16
 8009abc:	b2d9      	uxtb	r1, r3
 8009abe:	b909      	cbnz	r1, 8009ac4 <__lo0bits+0x32>
 8009ac0:	3008      	adds	r0, #8
 8009ac2:	0a1b      	lsrs	r3, r3, #8
 8009ac4:	0719      	lsls	r1, r3, #28
 8009ac6:	bf04      	itt	eq
 8009ac8:	091b      	lsreq	r3, r3, #4
 8009aca:	3004      	addeq	r0, #4
 8009acc:	0799      	lsls	r1, r3, #30
 8009ace:	bf04      	itt	eq
 8009ad0:	089b      	lsreq	r3, r3, #2
 8009ad2:	3002      	addeq	r0, #2
 8009ad4:	07d9      	lsls	r1, r3, #31
 8009ad6:	d403      	bmi.n	8009ae0 <__lo0bits+0x4e>
 8009ad8:	085b      	lsrs	r3, r3, #1
 8009ada:	f100 0001 	add.w	r0, r0, #1
 8009ade:	d003      	beq.n	8009ae8 <__lo0bits+0x56>
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	4770      	bx	lr
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	4770      	bx	lr
 8009ae8:	2020      	movs	r0, #32
 8009aea:	4770      	bx	lr

08009aec <__i2b>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	460c      	mov	r4, r1
 8009af0:	2101      	movs	r1, #1
 8009af2:	f7ff febd 	bl	8009870 <_Balloc>
 8009af6:	4602      	mov	r2, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <__i2b+0x1a>
 8009afa:	4b05      	ldr	r3, [pc, #20]	@ (8009b10 <__i2b+0x24>)
 8009afc:	4805      	ldr	r0, [pc, #20]	@ (8009b14 <__i2b+0x28>)
 8009afe:	f240 1145 	movw	r1, #325	@ 0x145
 8009b02:	f002 f999 	bl	800be38 <__assert_func>
 8009b06:	2301      	movs	r3, #1
 8009b08:	6144      	str	r4, [r0, #20]
 8009b0a:	6103      	str	r3, [r0, #16]
 8009b0c:	bd10      	pop	{r4, pc}
 8009b0e:	bf00      	nop
 8009b10:	0800c9a3 	.word	0x0800c9a3
 8009b14:	0800c9b4 	.word	0x0800c9b4

08009b18 <__multiply>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	690a      	ldr	r2, [r1, #16]
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	bfa8      	it	ge
 8009b26:	4623      	movge	r3, r4
 8009b28:	460f      	mov	r7, r1
 8009b2a:	bfa4      	itt	ge
 8009b2c:	460c      	movge	r4, r1
 8009b2e:	461f      	movge	r7, r3
 8009b30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b38:	68a3      	ldr	r3, [r4, #8]
 8009b3a:	6861      	ldr	r1, [r4, #4]
 8009b3c:	eb0a 0609 	add.w	r6, sl, r9
 8009b40:	42b3      	cmp	r3, r6
 8009b42:	b085      	sub	sp, #20
 8009b44:	bfb8      	it	lt
 8009b46:	3101      	addlt	r1, #1
 8009b48:	f7ff fe92 	bl	8009870 <_Balloc>
 8009b4c:	b930      	cbnz	r0, 8009b5c <__multiply+0x44>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	4b44      	ldr	r3, [pc, #272]	@ (8009c64 <__multiply+0x14c>)
 8009b52:	4845      	ldr	r0, [pc, #276]	@ (8009c68 <__multiply+0x150>)
 8009b54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b58:	f002 f96e 	bl	800be38 <__assert_func>
 8009b5c:	f100 0514 	add.w	r5, r0, #20
 8009b60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b64:	462b      	mov	r3, r5
 8009b66:	2200      	movs	r2, #0
 8009b68:	4543      	cmp	r3, r8
 8009b6a:	d321      	bcc.n	8009bb0 <__multiply+0x98>
 8009b6c:	f107 0114 	add.w	r1, r7, #20
 8009b70:	f104 0214 	add.w	r2, r4, #20
 8009b74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	1b13      	subs	r3, r2, r4
 8009b80:	3b15      	subs	r3, #21
 8009b82:	f023 0303 	bic.w	r3, r3, #3
 8009b86:	3304      	adds	r3, #4
 8009b88:	f104 0715 	add.w	r7, r4, #21
 8009b8c:	42ba      	cmp	r2, r7
 8009b8e:	bf38      	it	cc
 8009b90:	2304      	movcc	r3, #4
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	9b02      	ldr	r3, [sp, #8]
 8009b96:	9103      	str	r1, [sp, #12]
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	d80c      	bhi.n	8009bb6 <__multiply+0x9e>
 8009b9c:	2e00      	cmp	r6, #0
 8009b9e:	dd03      	ble.n	8009ba8 <__multiply+0x90>
 8009ba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d05b      	beq.n	8009c60 <__multiply+0x148>
 8009ba8:	6106      	str	r6, [r0, #16]
 8009baa:	b005      	add	sp, #20
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	f843 2b04 	str.w	r2, [r3], #4
 8009bb4:	e7d8      	b.n	8009b68 <__multiply+0x50>
 8009bb6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009bba:	f1ba 0f00 	cmp.w	sl, #0
 8009bbe:	d024      	beq.n	8009c0a <__multiply+0xf2>
 8009bc0:	f104 0e14 	add.w	lr, r4, #20
 8009bc4:	46a9      	mov	r9, r5
 8009bc6:	f04f 0c00 	mov.w	ip, #0
 8009bca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bce:	f8d9 3000 	ldr.w	r3, [r9]
 8009bd2:	fa1f fb87 	uxth.w	fp, r7
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009bdc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009be0:	f8d9 7000 	ldr.w	r7, [r9]
 8009be4:	4463      	add	r3, ip
 8009be6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bea:	fb0a c70b 	mla	r7, sl, fp, ip
 8009bee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009bf8:	4572      	cmp	r2, lr
 8009bfa:	f849 3b04 	str.w	r3, [r9], #4
 8009bfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c02:	d8e2      	bhi.n	8009bca <__multiply+0xb2>
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	f845 c003 	str.w	ip, [r5, r3]
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c10:	3104      	adds	r1, #4
 8009c12:	f1b9 0f00 	cmp.w	r9, #0
 8009c16:	d021      	beq.n	8009c5c <__multiply+0x144>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	f104 0c14 	add.w	ip, r4, #20
 8009c1e:	46ae      	mov	lr, r5
 8009c20:	f04f 0a00 	mov.w	sl, #0
 8009c24:	f8bc b000 	ldrh.w	fp, [ip]
 8009c28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c2c:	fb09 770b 	mla	r7, r9, fp, r7
 8009c30:	4457      	add	r7, sl
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c38:	f84e 3b04 	str.w	r3, [lr], #4
 8009c3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c44:	f8be 3000 	ldrh.w	r3, [lr]
 8009c48:	fb09 330a 	mla	r3, r9, sl, r3
 8009c4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c50:	4562      	cmp	r2, ip
 8009c52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c56:	d8e5      	bhi.n	8009c24 <__multiply+0x10c>
 8009c58:	9f01      	ldr	r7, [sp, #4]
 8009c5a:	51eb      	str	r3, [r5, r7]
 8009c5c:	3504      	adds	r5, #4
 8009c5e:	e799      	b.n	8009b94 <__multiply+0x7c>
 8009c60:	3e01      	subs	r6, #1
 8009c62:	e79b      	b.n	8009b9c <__multiply+0x84>
 8009c64:	0800c9a3 	.word	0x0800c9a3
 8009c68:	0800c9b4 	.word	0x0800c9b4

08009c6c <__pow5mult>:
 8009c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c70:	4615      	mov	r5, r2
 8009c72:	f012 0203 	ands.w	r2, r2, #3
 8009c76:	4607      	mov	r7, r0
 8009c78:	460e      	mov	r6, r1
 8009c7a:	d007      	beq.n	8009c8c <__pow5mult+0x20>
 8009c7c:	4c25      	ldr	r4, [pc, #148]	@ (8009d14 <__pow5mult+0xa8>)
 8009c7e:	3a01      	subs	r2, #1
 8009c80:	2300      	movs	r3, #0
 8009c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c86:	f7ff fe55 	bl	8009934 <__multadd>
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	10ad      	asrs	r5, r5, #2
 8009c8e:	d03d      	beq.n	8009d0c <__pow5mult+0xa0>
 8009c90:	69fc      	ldr	r4, [r7, #28]
 8009c92:	b97c      	cbnz	r4, 8009cb4 <__pow5mult+0x48>
 8009c94:	2010      	movs	r0, #16
 8009c96:	f7ff fd35 	bl	8009704 <malloc>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	61f8      	str	r0, [r7, #28]
 8009c9e:	b928      	cbnz	r0, 8009cac <__pow5mult+0x40>
 8009ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d18 <__pow5mult+0xac>)
 8009ca2:	481e      	ldr	r0, [pc, #120]	@ (8009d1c <__pow5mult+0xb0>)
 8009ca4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ca8:	f002 f8c6 	bl	800be38 <__assert_func>
 8009cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cb0:	6004      	str	r4, [r0, #0]
 8009cb2:	60c4      	str	r4, [r0, #12]
 8009cb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cbc:	b94c      	cbnz	r4, 8009cd2 <__pow5mult+0x66>
 8009cbe:	f240 2171 	movw	r1, #625	@ 0x271
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f7ff ff12 	bl	8009aec <__i2b>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cce:	4604      	mov	r4, r0
 8009cd0:	6003      	str	r3, [r0, #0]
 8009cd2:	f04f 0900 	mov.w	r9, #0
 8009cd6:	07eb      	lsls	r3, r5, #31
 8009cd8:	d50a      	bpl.n	8009cf0 <__pow5mult+0x84>
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4622      	mov	r2, r4
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f7ff ff1a 	bl	8009b18 <__multiply>
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4680      	mov	r8, r0
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff fe01 	bl	80098f0 <_Bfree>
 8009cee:	4646      	mov	r6, r8
 8009cf0:	106d      	asrs	r5, r5, #1
 8009cf2:	d00b      	beq.n	8009d0c <__pow5mult+0xa0>
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	b938      	cbnz	r0, 8009d08 <__pow5mult+0x9c>
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff ff0b 	bl	8009b18 <__multiply>
 8009d02:	6020      	str	r0, [r4, #0]
 8009d04:	f8c0 9000 	str.w	r9, [r0]
 8009d08:	4604      	mov	r4, r0
 8009d0a:	e7e4      	b.n	8009cd6 <__pow5mult+0x6a>
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d12:	bf00      	nop
 8009d14:	0800ca10 	.word	0x0800ca10
 8009d18:	0800c934 	.word	0x0800c934
 8009d1c:	0800c9b4 	.word	0x0800c9b4

08009d20 <__lshift>:
 8009d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	460c      	mov	r4, r1
 8009d26:	6849      	ldr	r1, [r1, #4]
 8009d28:	6923      	ldr	r3, [r4, #16]
 8009d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	4607      	mov	r7, r0
 8009d32:	4691      	mov	r9, r2
 8009d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d38:	f108 0601 	add.w	r6, r8, #1
 8009d3c:	42b3      	cmp	r3, r6
 8009d3e:	db0b      	blt.n	8009d58 <__lshift+0x38>
 8009d40:	4638      	mov	r0, r7
 8009d42:	f7ff fd95 	bl	8009870 <_Balloc>
 8009d46:	4605      	mov	r5, r0
 8009d48:	b948      	cbnz	r0, 8009d5e <__lshift+0x3e>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	4b28      	ldr	r3, [pc, #160]	@ (8009df0 <__lshift+0xd0>)
 8009d4e:	4829      	ldr	r0, [pc, #164]	@ (8009df4 <__lshift+0xd4>)
 8009d50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d54:	f002 f870 	bl	800be38 <__assert_func>
 8009d58:	3101      	adds	r1, #1
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	e7ee      	b.n	8009d3c <__lshift+0x1c>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f100 0114 	add.w	r1, r0, #20
 8009d64:	f100 0210 	add.w	r2, r0, #16
 8009d68:	4618      	mov	r0, r3
 8009d6a:	4553      	cmp	r3, sl
 8009d6c:	db33      	blt.n	8009dd6 <__lshift+0xb6>
 8009d6e:	6920      	ldr	r0, [r4, #16]
 8009d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d74:	f104 0314 	add.w	r3, r4, #20
 8009d78:	f019 091f 	ands.w	r9, r9, #31
 8009d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d84:	d02b      	beq.n	8009dde <__lshift+0xbe>
 8009d86:	f1c9 0e20 	rsb	lr, r9, #32
 8009d8a:	468a      	mov	sl, r1
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	fa00 f009 	lsl.w	r0, r0, r9
 8009d94:	4310      	orrs	r0, r2
 8009d96:	f84a 0b04 	str.w	r0, [sl], #4
 8009d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d9e:	459c      	cmp	ip, r3
 8009da0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009da4:	d8f3      	bhi.n	8009d8e <__lshift+0x6e>
 8009da6:	ebac 0304 	sub.w	r3, ip, r4
 8009daa:	3b15      	subs	r3, #21
 8009dac:	f023 0303 	bic.w	r3, r3, #3
 8009db0:	3304      	adds	r3, #4
 8009db2:	f104 0015 	add.w	r0, r4, #21
 8009db6:	4584      	cmp	ip, r0
 8009db8:	bf38      	it	cc
 8009dba:	2304      	movcc	r3, #4
 8009dbc:	50ca      	str	r2, [r1, r3]
 8009dbe:	b10a      	cbz	r2, 8009dc4 <__lshift+0xa4>
 8009dc0:	f108 0602 	add.w	r6, r8, #2
 8009dc4:	3e01      	subs	r6, #1
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	612e      	str	r6, [r5, #16]
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f7ff fd90 	bl	80098f0 <_Bfree>
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dda:	3301      	adds	r3, #1
 8009ddc:	e7c5      	b.n	8009d6a <__lshift+0x4a>
 8009dde:	3904      	subs	r1, #4
 8009de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009de8:	459c      	cmp	ip, r3
 8009dea:	d8f9      	bhi.n	8009de0 <__lshift+0xc0>
 8009dec:	e7ea      	b.n	8009dc4 <__lshift+0xa4>
 8009dee:	bf00      	nop
 8009df0:	0800c9a3 	.word	0x0800c9a3
 8009df4:	0800c9b4 	.word	0x0800c9b4

08009df8 <__mcmp>:
 8009df8:	690a      	ldr	r2, [r1, #16]
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	6900      	ldr	r0, [r0, #16]
 8009dfe:	1a80      	subs	r0, r0, r2
 8009e00:	b530      	push	{r4, r5, lr}
 8009e02:	d10e      	bne.n	8009e22 <__mcmp+0x2a>
 8009e04:	3314      	adds	r3, #20
 8009e06:	3114      	adds	r1, #20
 8009e08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e18:	4295      	cmp	r5, r2
 8009e1a:	d003      	beq.n	8009e24 <__mcmp+0x2c>
 8009e1c:	d205      	bcs.n	8009e2a <__mcmp+0x32>
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e22:	bd30      	pop	{r4, r5, pc}
 8009e24:	42a3      	cmp	r3, r4
 8009e26:	d3f3      	bcc.n	8009e10 <__mcmp+0x18>
 8009e28:	e7fb      	b.n	8009e22 <__mcmp+0x2a>
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	e7f9      	b.n	8009e22 <__mcmp+0x2a>
	...

08009e30 <__mdiff>:
 8009e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	4689      	mov	r9, r1
 8009e36:	4606      	mov	r6, r0
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4648      	mov	r0, r9
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	f7ff ffdb 	bl	8009df8 <__mcmp>
 8009e42:	1e05      	subs	r5, r0, #0
 8009e44:	d112      	bne.n	8009e6c <__mdiff+0x3c>
 8009e46:	4629      	mov	r1, r5
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f7ff fd11 	bl	8009870 <_Balloc>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	b928      	cbnz	r0, 8009e5e <__mdiff+0x2e>
 8009e52:	4b3f      	ldr	r3, [pc, #252]	@ (8009f50 <__mdiff+0x120>)
 8009e54:	f240 2137 	movw	r1, #567	@ 0x237
 8009e58:	483e      	ldr	r0, [pc, #248]	@ (8009f54 <__mdiff+0x124>)
 8009e5a:	f001 ffed 	bl	800be38 <__assert_func>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e64:	4610      	mov	r0, r2
 8009e66:	b003      	add	sp, #12
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	bfbc      	itt	lt
 8009e6e:	464b      	movlt	r3, r9
 8009e70:	46a1      	movlt	r9, r4
 8009e72:	4630      	mov	r0, r6
 8009e74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e78:	bfba      	itte	lt
 8009e7a:	461c      	movlt	r4, r3
 8009e7c:	2501      	movlt	r5, #1
 8009e7e:	2500      	movge	r5, #0
 8009e80:	f7ff fcf6 	bl	8009870 <_Balloc>
 8009e84:	4602      	mov	r2, r0
 8009e86:	b918      	cbnz	r0, 8009e90 <__mdiff+0x60>
 8009e88:	4b31      	ldr	r3, [pc, #196]	@ (8009f50 <__mdiff+0x120>)
 8009e8a:	f240 2145 	movw	r1, #581	@ 0x245
 8009e8e:	e7e3      	b.n	8009e58 <__mdiff+0x28>
 8009e90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e94:	6926      	ldr	r6, [r4, #16]
 8009e96:	60c5      	str	r5, [r0, #12]
 8009e98:	f109 0310 	add.w	r3, r9, #16
 8009e9c:	f109 0514 	add.w	r5, r9, #20
 8009ea0:	f104 0e14 	add.w	lr, r4, #20
 8009ea4:	f100 0b14 	add.w	fp, r0, #20
 8009ea8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009eac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	46d9      	mov	r9, fp
 8009eb4:	f04f 0c00 	mov.w	ip, #0
 8009eb8:	9b01      	ldr	r3, [sp, #4]
 8009eba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ebe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	fa1f f38a 	uxth.w	r3, sl
 8009ec8:	4619      	mov	r1, r3
 8009eca:	b283      	uxth	r3, r0
 8009ecc:	1acb      	subs	r3, r1, r3
 8009ece:	0c00      	lsrs	r0, r0, #16
 8009ed0:	4463      	add	r3, ip
 8009ed2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ed6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ee0:	4576      	cmp	r6, lr
 8009ee2:	f849 3b04 	str.w	r3, [r9], #4
 8009ee6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009eea:	d8e5      	bhi.n	8009eb8 <__mdiff+0x88>
 8009eec:	1b33      	subs	r3, r6, r4
 8009eee:	3b15      	subs	r3, #21
 8009ef0:	f023 0303 	bic.w	r3, r3, #3
 8009ef4:	3415      	adds	r4, #21
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	42a6      	cmp	r6, r4
 8009efa:	bf38      	it	cc
 8009efc:	2304      	movcc	r3, #4
 8009efe:	441d      	add	r5, r3
 8009f00:	445b      	add	r3, fp
 8009f02:	461e      	mov	r6, r3
 8009f04:	462c      	mov	r4, r5
 8009f06:	4544      	cmp	r4, r8
 8009f08:	d30e      	bcc.n	8009f28 <__mdiff+0xf8>
 8009f0a:	f108 0103 	add.w	r1, r8, #3
 8009f0e:	1b49      	subs	r1, r1, r5
 8009f10:	f021 0103 	bic.w	r1, r1, #3
 8009f14:	3d03      	subs	r5, #3
 8009f16:	45a8      	cmp	r8, r5
 8009f18:	bf38      	it	cc
 8009f1a:	2100      	movcc	r1, #0
 8009f1c:	440b      	add	r3, r1
 8009f1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f22:	b191      	cbz	r1, 8009f4a <__mdiff+0x11a>
 8009f24:	6117      	str	r7, [r2, #16]
 8009f26:	e79d      	b.n	8009e64 <__mdiff+0x34>
 8009f28:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f2c:	46e6      	mov	lr, ip
 8009f2e:	0c08      	lsrs	r0, r1, #16
 8009f30:	fa1c fc81 	uxtah	ip, ip, r1
 8009f34:	4471      	add	r1, lr
 8009f36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f3a:	b289      	uxth	r1, r1
 8009f3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f40:	f846 1b04 	str.w	r1, [r6], #4
 8009f44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f48:	e7dd      	b.n	8009f06 <__mdiff+0xd6>
 8009f4a:	3f01      	subs	r7, #1
 8009f4c:	e7e7      	b.n	8009f1e <__mdiff+0xee>
 8009f4e:	bf00      	nop
 8009f50:	0800c9a3 	.word	0x0800c9a3
 8009f54:	0800c9b4 	.word	0x0800c9b4

08009f58 <__ulp>:
 8009f58:	b082      	sub	sp, #8
 8009f5a:	ed8d 0b00 	vstr	d0, [sp]
 8009f5e:	9a01      	ldr	r2, [sp, #4]
 8009f60:	4b0f      	ldr	r3, [pc, #60]	@ (8009fa0 <__ulp+0x48>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dc08      	bgt.n	8009f7e <__ulp+0x26>
 8009f6c:	425b      	negs	r3, r3
 8009f6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f76:	da04      	bge.n	8009f82 <__ulp+0x2a>
 8009f78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f7c:	4113      	asrs	r3, r2
 8009f7e:	2200      	movs	r2, #0
 8009f80:	e008      	b.n	8009f94 <__ulp+0x3c>
 8009f82:	f1a2 0314 	sub.w	r3, r2, #20
 8009f86:	2b1e      	cmp	r3, #30
 8009f88:	bfda      	itte	le
 8009f8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f8e:	40da      	lsrle	r2, r3
 8009f90:	2201      	movgt	r2, #1
 8009f92:	2300      	movs	r3, #0
 8009f94:	4619      	mov	r1, r3
 8009f96:	4610      	mov	r0, r2
 8009f98:	ec41 0b10 	vmov	d0, r0, r1
 8009f9c:	b002      	add	sp, #8
 8009f9e:	4770      	bx	lr
 8009fa0:	7ff00000 	.word	0x7ff00000

08009fa4 <__b2d>:
 8009fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa8:	6906      	ldr	r6, [r0, #16]
 8009faa:	f100 0814 	add.w	r8, r0, #20
 8009fae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009fb2:	1f37      	subs	r7, r6, #4
 8009fb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7ff fd4b 	bl	8009a54 <__hi0bits>
 8009fbe:	f1c0 0320 	rsb	r3, r0, #32
 8009fc2:	280a      	cmp	r0, #10
 8009fc4:	600b      	str	r3, [r1, #0]
 8009fc6:	491b      	ldr	r1, [pc, #108]	@ (800a034 <__b2d+0x90>)
 8009fc8:	dc15      	bgt.n	8009ff6 <__b2d+0x52>
 8009fca:	f1c0 0c0b 	rsb	ip, r0, #11
 8009fce:	fa22 f30c 	lsr.w	r3, r2, ip
 8009fd2:	45b8      	cmp	r8, r7
 8009fd4:	ea43 0501 	orr.w	r5, r3, r1
 8009fd8:	bf34      	ite	cc
 8009fda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009fde:	2300      	movcs	r3, #0
 8009fe0:	3015      	adds	r0, #21
 8009fe2:	fa02 f000 	lsl.w	r0, r2, r0
 8009fe6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009fea:	4303      	orrs	r3, r0
 8009fec:	461c      	mov	r4, r3
 8009fee:	ec45 4b10 	vmov	d0, r4, r5
 8009ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff6:	45b8      	cmp	r8, r7
 8009ff8:	bf3a      	itte	cc
 8009ffa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ffe:	f1a6 0708 	subcc.w	r7, r6, #8
 800a002:	2300      	movcs	r3, #0
 800a004:	380b      	subs	r0, #11
 800a006:	d012      	beq.n	800a02e <__b2d+0x8a>
 800a008:	f1c0 0120 	rsb	r1, r0, #32
 800a00c:	fa23 f401 	lsr.w	r4, r3, r1
 800a010:	4082      	lsls	r2, r0
 800a012:	4322      	orrs	r2, r4
 800a014:	4547      	cmp	r7, r8
 800a016:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a01a:	bf8c      	ite	hi
 800a01c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a020:	2200      	movls	r2, #0
 800a022:	4083      	lsls	r3, r0
 800a024:	40ca      	lsrs	r2, r1
 800a026:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a02a:	4313      	orrs	r3, r2
 800a02c:	e7de      	b.n	8009fec <__b2d+0x48>
 800a02e:	ea42 0501 	orr.w	r5, r2, r1
 800a032:	e7db      	b.n	8009fec <__b2d+0x48>
 800a034:	3ff00000 	.word	0x3ff00000

0800a038 <__d2b>:
 800a038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a03c:	460f      	mov	r7, r1
 800a03e:	2101      	movs	r1, #1
 800a040:	ec59 8b10 	vmov	r8, r9, d0
 800a044:	4616      	mov	r6, r2
 800a046:	f7ff fc13 	bl	8009870 <_Balloc>
 800a04a:	4604      	mov	r4, r0
 800a04c:	b930      	cbnz	r0, 800a05c <__d2b+0x24>
 800a04e:	4602      	mov	r2, r0
 800a050:	4b23      	ldr	r3, [pc, #140]	@ (800a0e0 <__d2b+0xa8>)
 800a052:	4824      	ldr	r0, [pc, #144]	@ (800a0e4 <__d2b+0xac>)
 800a054:	f240 310f 	movw	r1, #783	@ 0x30f
 800a058:	f001 feee 	bl	800be38 <__assert_func>
 800a05c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a060:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a064:	b10d      	cbz	r5, 800a06a <__d2b+0x32>
 800a066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	f1b8 0300 	subs.w	r3, r8, #0
 800a070:	d023      	beq.n	800a0ba <__d2b+0x82>
 800a072:	4668      	mov	r0, sp
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	f7ff fd0c 	bl	8009a92 <__lo0bits>
 800a07a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a07e:	b1d0      	cbz	r0, 800a0b6 <__d2b+0x7e>
 800a080:	f1c0 0320 	rsb	r3, r0, #32
 800a084:	fa02 f303 	lsl.w	r3, r2, r3
 800a088:	430b      	orrs	r3, r1
 800a08a:	40c2      	lsrs	r2, r0
 800a08c:	6163      	str	r3, [r4, #20]
 800a08e:	9201      	str	r2, [sp, #4]
 800a090:	9b01      	ldr	r3, [sp, #4]
 800a092:	61a3      	str	r3, [r4, #24]
 800a094:	2b00      	cmp	r3, #0
 800a096:	bf0c      	ite	eq
 800a098:	2201      	moveq	r2, #1
 800a09a:	2202      	movne	r2, #2
 800a09c:	6122      	str	r2, [r4, #16]
 800a09e:	b1a5      	cbz	r5, 800a0ca <__d2b+0x92>
 800a0a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0a4:	4405      	add	r5, r0
 800a0a6:	603d      	str	r5, [r7, #0]
 800a0a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0ac:	6030      	str	r0, [r6, #0]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	b003      	add	sp, #12
 800a0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0b6:	6161      	str	r1, [r4, #20]
 800a0b8:	e7ea      	b.n	800a090 <__d2b+0x58>
 800a0ba:	a801      	add	r0, sp, #4
 800a0bc:	f7ff fce9 	bl	8009a92 <__lo0bits>
 800a0c0:	9b01      	ldr	r3, [sp, #4]
 800a0c2:	6163      	str	r3, [r4, #20]
 800a0c4:	3020      	adds	r0, #32
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	e7e8      	b.n	800a09c <__d2b+0x64>
 800a0ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0d2:	6038      	str	r0, [r7, #0]
 800a0d4:	6918      	ldr	r0, [r3, #16]
 800a0d6:	f7ff fcbd 	bl	8009a54 <__hi0bits>
 800a0da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0de:	e7e5      	b.n	800a0ac <__d2b+0x74>
 800a0e0:	0800c9a3 	.word	0x0800c9a3
 800a0e4:	0800c9b4 	.word	0x0800c9b4

0800a0e8 <__ratio>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	e9cd 1000 	strd	r1, r0, [sp]
 800a0f2:	a902      	add	r1, sp, #8
 800a0f4:	f7ff ff56 	bl	8009fa4 <__b2d>
 800a0f8:	9800      	ldr	r0, [sp, #0]
 800a0fa:	a903      	add	r1, sp, #12
 800a0fc:	ec55 4b10 	vmov	r4, r5, d0
 800a100:	f7ff ff50 	bl	8009fa4 <__b2d>
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	6919      	ldr	r1, [r3, #16]
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	1ac9      	subs	r1, r1, r3
 800a10e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a112:	1a9b      	subs	r3, r3, r2
 800a114:	ec5b ab10 	vmov	sl, fp, d0
 800a118:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfce      	itee	gt
 800a120:	462a      	movgt	r2, r5
 800a122:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a126:	465a      	movle	r2, fp
 800a128:	462f      	mov	r7, r5
 800a12a:	46d9      	mov	r9, fp
 800a12c:	bfcc      	ite	gt
 800a12e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a132:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a136:	464b      	mov	r3, r9
 800a138:	4652      	mov	r2, sl
 800a13a:	4620      	mov	r0, r4
 800a13c:	4639      	mov	r1, r7
 800a13e:	f7f6 fb85 	bl	800084c <__aeabi_ddiv>
 800a142:	ec41 0b10 	vmov	d0, r0, r1
 800a146:	b005      	add	sp, #20
 800a148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a14c <__copybits>:
 800a14c:	3901      	subs	r1, #1
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	1149      	asrs	r1, r1, #5
 800a152:	6914      	ldr	r4, [r2, #16]
 800a154:	3101      	adds	r1, #1
 800a156:	f102 0314 	add.w	r3, r2, #20
 800a15a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a15e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a162:	1f05      	subs	r5, r0, #4
 800a164:	42a3      	cmp	r3, r4
 800a166:	d30c      	bcc.n	800a182 <__copybits+0x36>
 800a168:	1aa3      	subs	r3, r4, r2
 800a16a:	3b11      	subs	r3, #17
 800a16c:	f023 0303 	bic.w	r3, r3, #3
 800a170:	3211      	adds	r2, #17
 800a172:	42a2      	cmp	r2, r4
 800a174:	bf88      	it	hi
 800a176:	2300      	movhi	r3, #0
 800a178:	4418      	add	r0, r3
 800a17a:	2300      	movs	r3, #0
 800a17c:	4288      	cmp	r0, r1
 800a17e:	d305      	bcc.n	800a18c <__copybits+0x40>
 800a180:	bd70      	pop	{r4, r5, r6, pc}
 800a182:	f853 6b04 	ldr.w	r6, [r3], #4
 800a186:	f845 6f04 	str.w	r6, [r5, #4]!
 800a18a:	e7eb      	b.n	800a164 <__copybits+0x18>
 800a18c:	f840 3b04 	str.w	r3, [r0], #4
 800a190:	e7f4      	b.n	800a17c <__copybits+0x30>

0800a192 <__any_on>:
 800a192:	f100 0214 	add.w	r2, r0, #20
 800a196:	6900      	ldr	r0, [r0, #16]
 800a198:	114b      	asrs	r3, r1, #5
 800a19a:	4298      	cmp	r0, r3
 800a19c:	b510      	push	{r4, lr}
 800a19e:	db11      	blt.n	800a1c4 <__any_on+0x32>
 800a1a0:	dd0a      	ble.n	800a1b8 <__any_on+0x26>
 800a1a2:	f011 011f 	ands.w	r1, r1, #31
 800a1a6:	d007      	beq.n	800a1b8 <__any_on+0x26>
 800a1a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1ac:	fa24 f001 	lsr.w	r0, r4, r1
 800a1b0:	fa00 f101 	lsl.w	r1, r0, r1
 800a1b4:	428c      	cmp	r4, r1
 800a1b6:	d10b      	bne.n	800a1d0 <__any_on+0x3e>
 800a1b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d803      	bhi.n	800a1c8 <__any_on+0x36>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	bd10      	pop	{r4, pc}
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	e7f7      	b.n	800a1b8 <__any_on+0x26>
 800a1c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d0f5      	beq.n	800a1bc <__any_on+0x2a>
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	e7f6      	b.n	800a1c2 <__any_on+0x30>

0800a1d4 <sulp>:
 800a1d4:	b570      	push	{r4, r5, r6, lr}
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	460d      	mov	r5, r1
 800a1da:	ec45 4b10 	vmov	d0, r4, r5
 800a1de:	4616      	mov	r6, r2
 800a1e0:	f7ff feba 	bl	8009f58 <__ulp>
 800a1e4:	ec51 0b10 	vmov	r0, r1, d0
 800a1e8:	b17e      	cbz	r6, 800a20a <sulp+0x36>
 800a1ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a1ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd09      	ble.n	800a20a <sulp+0x36>
 800a1f6:	051b      	lsls	r3, r3, #20
 800a1f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a1fc:	2400      	movs	r4, #0
 800a1fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a202:	4622      	mov	r2, r4
 800a204:	462b      	mov	r3, r5
 800a206:	f7f6 f9f7 	bl	80005f8 <__aeabi_dmul>
 800a20a:	ec41 0b10 	vmov	d0, r0, r1
 800a20e:	bd70      	pop	{r4, r5, r6, pc}

0800a210 <_strtod_l>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	b09f      	sub	sp, #124	@ 0x7c
 800a216:	460c      	mov	r4, r1
 800a218:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a21a:	2200      	movs	r2, #0
 800a21c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a21e:	9005      	str	r0, [sp, #20]
 800a220:	f04f 0a00 	mov.w	sl, #0
 800a224:	f04f 0b00 	mov.w	fp, #0
 800a228:	460a      	mov	r2, r1
 800a22a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a22c:	7811      	ldrb	r1, [r2, #0]
 800a22e:	292b      	cmp	r1, #43	@ 0x2b
 800a230:	d04a      	beq.n	800a2c8 <_strtod_l+0xb8>
 800a232:	d838      	bhi.n	800a2a6 <_strtod_l+0x96>
 800a234:	290d      	cmp	r1, #13
 800a236:	d832      	bhi.n	800a29e <_strtod_l+0x8e>
 800a238:	2908      	cmp	r1, #8
 800a23a:	d832      	bhi.n	800a2a2 <_strtod_l+0x92>
 800a23c:	2900      	cmp	r1, #0
 800a23e:	d03b      	beq.n	800a2b8 <_strtod_l+0xa8>
 800a240:	2200      	movs	r2, #0
 800a242:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a244:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a246:	782a      	ldrb	r2, [r5, #0]
 800a248:	2a30      	cmp	r2, #48	@ 0x30
 800a24a:	f040 80b3 	bne.w	800a3b4 <_strtod_l+0x1a4>
 800a24e:	786a      	ldrb	r2, [r5, #1]
 800a250:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a254:	2a58      	cmp	r2, #88	@ 0x58
 800a256:	d16e      	bne.n	800a336 <_strtod_l+0x126>
 800a258:	9302      	str	r3, [sp, #8]
 800a25a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4a8e      	ldr	r2, [pc, #568]	@ (800a49c <_strtod_l+0x28c>)
 800a264:	9805      	ldr	r0, [sp, #20]
 800a266:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a268:	a919      	add	r1, sp, #100	@ 0x64
 800a26a:	f001 fe7f 	bl	800bf6c <__gethex>
 800a26e:	f010 060f 	ands.w	r6, r0, #15
 800a272:	4604      	mov	r4, r0
 800a274:	d005      	beq.n	800a282 <_strtod_l+0x72>
 800a276:	2e06      	cmp	r6, #6
 800a278:	d128      	bne.n	800a2cc <_strtod_l+0xbc>
 800a27a:	3501      	adds	r5, #1
 800a27c:	2300      	movs	r3, #0
 800a27e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a280:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a284:	2b00      	cmp	r3, #0
 800a286:	f040 858e 	bne.w	800ada6 <_strtod_l+0xb96>
 800a28a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a28c:	b1cb      	cbz	r3, 800a2c2 <_strtod_l+0xb2>
 800a28e:	4652      	mov	r2, sl
 800a290:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a294:	ec43 2b10 	vmov	d0, r2, r3
 800a298:	b01f      	add	sp, #124	@ 0x7c
 800a29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29e:	2920      	cmp	r1, #32
 800a2a0:	d1ce      	bne.n	800a240 <_strtod_l+0x30>
 800a2a2:	3201      	adds	r2, #1
 800a2a4:	e7c1      	b.n	800a22a <_strtod_l+0x1a>
 800a2a6:	292d      	cmp	r1, #45	@ 0x2d
 800a2a8:	d1ca      	bne.n	800a240 <_strtod_l+0x30>
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a2ae:	1c51      	adds	r1, r2, #1
 800a2b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a2b2:	7852      	ldrb	r2, [r2, #1]
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	d1c5      	bne.n	800a244 <_strtod_l+0x34>
 800a2b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 8570 	bne.w	800ada2 <_strtod_l+0xb92>
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	e7e5      	b.n	800a294 <_strtod_l+0x84>
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	e7ef      	b.n	800a2ac <_strtod_l+0x9c>
 800a2cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a2ce:	b13a      	cbz	r2, 800a2e0 <_strtod_l+0xd0>
 800a2d0:	2135      	movs	r1, #53	@ 0x35
 800a2d2:	a81c      	add	r0, sp, #112	@ 0x70
 800a2d4:	f7ff ff3a 	bl	800a14c <__copybits>
 800a2d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2da:	9805      	ldr	r0, [sp, #20]
 800a2dc:	f7ff fb08 	bl	80098f0 <_Bfree>
 800a2e0:	3e01      	subs	r6, #1
 800a2e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a2e4:	2e04      	cmp	r6, #4
 800a2e6:	d806      	bhi.n	800a2f6 <_strtod_l+0xe6>
 800a2e8:	e8df f006 	tbb	[pc, r6]
 800a2ec:	201d0314 	.word	0x201d0314
 800a2f0:	14          	.byte	0x14
 800a2f1:	00          	.byte	0x00
 800a2f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a2f6:	05e1      	lsls	r1, r4, #23
 800a2f8:	bf48      	it	mi
 800a2fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a2fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a302:	0d1b      	lsrs	r3, r3, #20
 800a304:	051b      	lsls	r3, r3, #20
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1bb      	bne.n	800a282 <_strtod_l+0x72>
 800a30a:	f7fe fb23 	bl	8008954 <__errno>
 800a30e:	2322      	movs	r3, #34	@ 0x22
 800a310:	6003      	str	r3, [r0, #0]
 800a312:	e7b6      	b.n	800a282 <_strtod_l+0x72>
 800a314:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a318:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a31c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a320:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a324:	e7e7      	b.n	800a2f6 <_strtod_l+0xe6>
 800a326:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a4a4 <_strtod_l+0x294>
 800a32a:	e7e4      	b.n	800a2f6 <_strtod_l+0xe6>
 800a32c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a330:	f04f 3aff 	mov.w	sl, #4294967295
 800a334:	e7df      	b.n	800a2f6 <_strtod_l+0xe6>
 800a336:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	2b30      	cmp	r3, #48	@ 0x30
 800a340:	d0f9      	beq.n	800a336 <_strtod_l+0x126>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d09d      	beq.n	800a282 <_strtod_l+0x72>
 800a346:	2301      	movs	r3, #1
 800a348:	9309      	str	r3, [sp, #36]	@ 0x24
 800a34a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a34c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a34e:	2300      	movs	r3, #0
 800a350:	9308      	str	r3, [sp, #32]
 800a352:	930a      	str	r3, [sp, #40]	@ 0x28
 800a354:	461f      	mov	r7, r3
 800a356:	220a      	movs	r2, #10
 800a358:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a35a:	7805      	ldrb	r5, [r0, #0]
 800a35c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a360:	b2d9      	uxtb	r1, r3
 800a362:	2909      	cmp	r1, #9
 800a364:	d928      	bls.n	800a3b8 <_strtod_l+0x1a8>
 800a366:	494e      	ldr	r1, [pc, #312]	@ (800a4a0 <_strtod_l+0x290>)
 800a368:	2201      	movs	r2, #1
 800a36a:	f001 fd39 	bl	800bde0 <strncmp>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d032      	beq.n	800a3d8 <_strtod_l+0x1c8>
 800a372:	2000      	movs	r0, #0
 800a374:	462a      	mov	r2, r5
 800a376:	4681      	mov	r9, r0
 800a378:	463d      	mov	r5, r7
 800a37a:	4603      	mov	r3, r0
 800a37c:	2a65      	cmp	r2, #101	@ 0x65
 800a37e:	d001      	beq.n	800a384 <_strtod_l+0x174>
 800a380:	2a45      	cmp	r2, #69	@ 0x45
 800a382:	d114      	bne.n	800a3ae <_strtod_l+0x19e>
 800a384:	b91d      	cbnz	r5, 800a38e <_strtod_l+0x17e>
 800a386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a388:	4302      	orrs	r2, r0
 800a38a:	d095      	beq.n	800a2b8 <_strtod_l+0xa8>
 800a38c:	2500      	movs	r5, #0
 800a38e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a390:	1c62      	adds	r2, r4, #1
 800a392:	9219      	str	r2, [sp, #100]	@ 0x64
 800a394:	7862      	ldrb	r2, [r4, #1]
 800a396:	2a2b      	cmp	r2, #43	@ 0x2b
 800a398:	d077      	beq.n	800a48a <_strtod_l+0x27a>
 800a39a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a39c:	d07b      	beq.n	800a496 <_strtod_l+0x286>
 800a39e:	f04f 0c00 	mov.w	ip, #0
 800a3a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a3a6:	2909      	cmp	r1, #9
 800a3a8:	f240 8082 	bls.w	800a4b0 <_strtod_l+0x2a0>
 800a3ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3ae:	f04f 0800 	mov.w	r8, #0
 800a3b2:	e0a2      	b.n	800a4fa <_strtod_l+0x2ea>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e7c7      	b.n	800a348 <_strtod_l+0x138>
 800a3b8:	2f08      	cmp	r7, #8
 800a3ba:	bfd5      	itete	le
 800a3bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a3be:	9908      	ldrgt	r1, [sp, #32]
 800a3c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a3c8:	f100 0001 	add.w	r0, r0, #1
 800a3cc:	bfd4      	ite	le
 800a3ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a3d0:	9308      	strgt	r3, [sp, #32]
 800a3d2:	3701      	adds	r7, #1
 800a3d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a3d6:	e7bf      	b.n	800a358 <_strtod_l+0x148>
 800a3d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3de:	785a      	ldrb	r2, [r3, #1]
 800a3e0:	b37f      	cbz	r7, 800a442 <_strtod_l+0x232>
 800a3e2:	4681      	mov	r9, r0
 800a3e4:	463d      	mov	r5, r7
 800a3e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	d912      	bls.n	800a414 <_strtod_l+0x204>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e7c4      	b.n	800a37c <_strtod_l+0x16c>
 800a3f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3f8:	785a      	ldrb	r2, [r3, #1]
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	2a30      	cmp	r2, #48	@ 0x30
 800a3fe:	d0f8      	beq.n	800a3f2 <_strtod_l+0x1e2>
 800a400:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a404:	2b08      	cmp	r3, #8
 800a406:	f200 84d3 	bhi.w	800adb0 <_strtod_l+0xba0>
 800a40a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a40c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a40e:	4681      	mov	r9, r0
 800a410:	2000      	movs	r0, #0
 800a412:	4605      	mov	r5, r0
 800a414:	3a30      	subs	r2, #48	@ 0x30
 800a416:	f100 0301 	add.w	r3, r0, #1
 800a41a:	d02a      	beq.n	800a472 <_strtod_l+0x262>
 800a41c:	4499      	add	r9, r3
 800a41e:	eb00 0c05 	add.w	ip, r0, r5
 800a422:	462b      	mov	r3, r5
 800a424:	210a      	movs	r1, #10
 800a426:	4563      	cmp	r3, ip
 800a428:	d10d      	bne.n	800a446 <_strtod_l+0x236>
 800a42a:	1c69      	adds	r1, r5, #1
 800a42c:	4401      	add	r1, r0
 800a42e:	4428      	add	r0, r5
 800a430:	2808      	cmp	r0, #8
 800a432:	dc16      	bgt.n	800a462 <_strtod_l+0x252>
 800a434:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a436:	230a      	movs	r3, #10
 800a438:	fb03 2300 	mla	r3, r3, r0, r2
 800a43c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a43e:	2300      	movs	r3, #0
 800a440:	e018      	b.n	800a474 <_strtod_l+0x264>
 800a442:	4638      	mov	r0, r7
 800a444:	e7da      	b.n	800a3fc <_strtod_l+0x1ec>
 800a446:	2b08      	cmp	r3, #8
 800a448:	f103 0301 	add.w	r3, r3, #1
 800a44c:	dc03      	bgt.n	800a456 <_strtod_l+0x246>
 800a44e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a450:	434e      	muls	r6, r1
 800a452:	960a      	str	r6, [sp, #40]	@ 0x28
 800a454:	e7e7      	b.n	800a426 <_strtod_l+0x216>
 800a456:	2b10      	cmp	r3, #16
 800a458:	bfde      	ittt	le
 800a45a:	9e08      	ldrle	r6, [sp, #32]
 800a45c:	434e      	mulle	r6, r1
 800a45e:	9608      	strle	r6, [sp, #32]
 800a460:	e7e1      	b.n	800a426 <_strtod_l+0x216>
 800a462:	280f      	cmp	r0, #15
 800a464:	dceb      	bgt.n	800a43e <_strtod_l+0x22e>
 800a466:	9808      	ldr	r0, [sp, #32]
 800a468:	230a      	movs	r3, #10
 800a46a:	fb03 2300 	mla	r3, r3, r0, r2
 800a46e:	9308      	str	r3, [sp, #32]
 800a470:	e7e5      	b.n	800a43e <_strtod_l+0x22e>
 800a472:	4629      	mov	r1, r5
 800a474:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a476:	1c50      	adds	r0, r2, #1
 800a478:	9019      	str	r0, [sp, #100]	@ 0x64
 800a47a:	7852      	ldrb	r2, [r2, #1]
 800a47c:	4618      	mov	r0, r3
 800a47e:	460d      	mov	r5, r1
 800a480:	e7b1      	b.n	800a3e6 <_strtod_l+0x1d6>
 800a482:	f04f 0900 	mov.w	r9, #0
 800a486:	2301      	movs	r3, #1
 800a488:	e77d      	b.n	800a386 <_strtod_l+0x176>
 800a48a:	f04f 0c00 	mov.w	ip, #0
 800a48e:	1ca2      	adds	r2, r4, #2
 800a490:	9219      	str	r2, [sp, #100]	@ 0x64
 800a492:	78a2      	ldrb	r2, [r4, #2]
 800a494:	e785      	b.n	800a3a2 <_strtod_l+0x192>
 800a496:	f04f 0c01 	mov.w	ip, #1
 800a49a:	e7f8      	b.n	800a48e <_strtod_l+0x27e>
 800a49c:	0800cb28 	.word	0x0800cb28
 800a4a0:	0800cb10 	.word	0x0800cb10
 800a4a4:	7ff00000 	.word	0x7ff00000
 800a4a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4aa:	1c51      	adds	r1, r2, #1
 800a4ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800a4ae:	7852      	ldrb	r2, [r2, #1]
 800a4b0:	2a30      	cmp	r2, #48	@ 0x30
 800a4b2:	d0f9      	beq.n	800a4a8 <_strtod_l+0x298>
 800a4b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a4b8:	2908      	cmp	r1, #8
 800a4ba:	f63f af78 	bhi.w	800a3ae <_strtod_l+0x19e>
 800a4be:	3a30      	subs	r2, #48	@ 0x30
 800a4c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a4c6:	f04f 080a 	mov.w	r8, #10
 800a4ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4cc:	1c56      	adds	r6, r2, #1
 800a4ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800a4d0:	7852      	ldrb	r2, [r2, #1]
 800a4d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a4d6:	f1be 0f09 	cmp.w	lr, #9
 800a4da:	d939      	bls.n	800a550 <_strtod_l+0x340>
 800a4dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a4de:	1a76      	subs	r6, r6, r1
 800a4e0:	2e08      	cmp	r6, #8
 800a4e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a4e6:	dc03      	bgt.n	800a4f0 <_strtod_l+0x2e0>
 800a4e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a4ea:	4588      	cmp	r8, r1
 800a4ec:	bfa8      	it	ge
 800a4ee:	4688      	movge	r8, r1
 800a4f0:	f1bc 0f00 	cmp.w	ip, #0
 800a4f4:	d001      	beq.n	800a4fa <_strtod_l+0x2ea>
 800a4f6:	f1c8 0800 	rsb	r8, r8, #0
 800a4fa:	2d00      	cmp	r5, #0
 800a4fc:	d14e      	bne.n	800a59c <_strtod_l+0x38c>
 800a4fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a500:	4308      	orrs	r0, r1
 800a502:	f47f aebe 	bne.w	800a282 <_strtod_l+0x72>
 800a506:	2b00      	cmp	r3, #0
 800a508:	f47f aed6 	bne.w	800a2b8 <_strtod_l+0xa8>
 800a50c:	2a69      	cmp	r2, #105	@ 0x69
 800a50e:	d028      	beq.n	800a562 <_strtod_l+0x352>
 800a510:	dc25      	bgt.n	800a55e <_strtod_l+0x34e>
 800a512:	2a49      	cmp	r2, #73	@ 0x49
 800a514:	d025      	beq.n	800a562 <_strtod_l+0x352>
 800a516:	2a4e      	cmp	r2, #78	@ 0x4e
 800a518:	f47f aece 	bne.w	800a2b8 <_strtod_l+0xa8>
 800a51c:	499b      	ldr	r1, [pc, #620]	@ (800a78c <_strtod_l+0x57c>)
 800a51e:	a819      	add	r0, sp, #100	@ 0x64
 800a520:	f001 ff46 	bl	800c3b0 <__match>
 800a524:	2800      	cmp	r0, #0
 800a526:	f43f aec7 	beq.w	800a2b8 <_strtod_l+0xa8>
 800a52a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b28      	cmp	r3, #40	@ 0x28
 800a530:	d12e      	bne.n	800a590 <_strtod_l+0x380>
 800a532:	4997      	ldr	r1, [pc, #604]	@ (800a790 <_strtod_l+0x580>)
 800a534:	aa1c      	add	r2, sp, #112	@ 0x70
 800a536:	a819      	add	r0, sp, #100	@ 0x64
 800a538:	f001 ff4e 	bl	800c3d8 <__hexnan>
 800a53c:	2805      	cmp	r0, #5
 800a53e:	d127      	bne.n	800a590 <_strtod_l+0x380>
 800a540:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a542:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a546:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a54a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a54e:	e698      	b.n	800a282 <_strtod_l+0x72>
 800a550:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a552:	fb08 2101 	mla	r1, r8, r1, r2
 800a556:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a55a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a55c:	e7b5      	b.n	800a4ca <_strtod_l+0x2ba>
 800a55e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a560:	e7da      	b.n	800a518 <_strtod_l+0x308>
 800a562:	498c      	ldr	r1, [pc, #560]	@ (800a794 <_strtod_l+0x584>)
 800a564:	a819      	add	r0, sp, #100	@ 0x64
 800a566:	f001 ff23 	bl	800c3b0 <__match>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	f43f aea4 	beq.w	800a2b8 <_strtod_l+0xa8>
 800a570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a572:	4989      	ldr	r1, [pc, #548]	@ (800a798 <_strtod_l+0x588>)
 800a574:	3b01      	subs	r3, #1
 800a576:	a819      	add	r0, sp, #100	@ 0x64
 800a578:	9319      	str	r3, [sp, #100]	@ 0x64
 800a57a:	f001 ff19 	bl	800c3b0 <__match>
 800a57e:	b910      	cbnz	r0, 800a586 <_strtod_l+0x376>
 800a580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a582:	3301      	adds	r3, #1
 800a584:	9319      	str	r3, [sp, #100]	@ 0x64
 800a586:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a7a8 <_strtod_l+0x598>
 800a58a:	f04f 0a00 	mov.w	sl, #0
 800a58e:	e678      	b.n	800a282 <_strtod_l+0x72>
 800a590:	4882      	ldr	r0, [pc, #520]	@ (800a79c <_strtod_l+0x58c>)
 800a592:	f001 fc49 	bl	800be28 <nan>
 800a596:	ec5b ab10 	vmov	sl, fp, d0
 800a59a:	e672      	b.n	800a282 <_strtod_l+0x72>
 800a59c:	eba8 0309 	sub.w	r3, r8, r9
 800a5a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a5a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5a4:	2f00      	cmp	r7, #0
 800a5a6:	bf08      	it	eq
 800a5a8:	462f      	moveq	r7, r5
 800a5aa:	2d10      	cmp	r5, #16
 800a5ac:	462c      	mov	r4, r5
 800a5ae:	bfa8      	it	ge
 800a5b0:	2410      	movge	r4, #16
 800a5b2:	f7f5 ffa7 	bl	8000504 <__aeabi_ui2d>
 800a5b6:	2d09      	cmp	r5, #9
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	468b      	mov	fp, r1
 800a5bc:	dc13      	bgt.n	800a5e6 <_strtod_l+0x3d6>
 800a5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f43f ae5e 	beq.w	800a282 <_strtod_l+0x72>
 800a5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c8:	dd78      	ble.n	800a6bc <_strtod_l+0x4ac>
 800a5ca:	2b16      	cmp	r3, #22
 800a5cc:	dc5f      	bgt.n	800a68e <_strtod_l+0x47e>
 800a5ce:	4974      	ldr	r1, [pc, #464]	@ (800a7a0 <_strtod_l+0x590>)
 800a5d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5d8:	4652      	mov	r2, sl
 800a5da:	465b      	mov	r3, fp
 800a5dc:	f7f6 f80c 	bl	80005f8 <__aeabi_dmul>
 800a5e0:	4682      	mov	sl, r0
 800a5e2:	468b      	mov	fp, r1
 800a5e4:	e64d      	b.n	800a282 <_strtod_l+0x72>
 800a5e6:	4b6e      	ldr	r3, [pc, #440]	@ (800a7a0 <_strtod_l+0x590>)
 800a5e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a5f0:	f7f6 f802 	bl	80005f8 <__aeabi_dmul>
 800a5f4:	4682      	mov	sl, r0
 800a5f6:	9808      	ldr	r0, [sp, #32]
 800a5f8:	468b      	mov	fp, r1
 800a5fa:	f7f5 ff83 	bl	8000504 <__aeabi_ui2d>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4650      	mov	r0, sl
 800a604:	4659      	mov	r1, fp
 800a606:	f7f5 fe41 	bl	800028c <__adddf3>
 800a60a:	2d0f      	cmp	r5, #15
 800a60c:	4682      	mov	sl, r0
 800a60e:	468b      	mov	fp, r1
 800a610:	ddd5      	ble.n	800a5be <_strtod_l+0x3ae>
 800a612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a614:	1b2c      	subs	r4, r5, r4
 800a616:	441c      	add	r4, r3
 800a618:	2c00      	cmp	r4, #0
 800a61a:	f340 8096 	ble.w	800a74a <_strtod_l+0x53a>
 800a61e:	f014 030f 	ands.w	r3, r4, #15
 800a622:	d00a      	beq.n	800a63a <_strtod_l+0x42a>
 800a624:	495e      	ldr	r1, [pc, #376]	@ (800a7a0 <_strtod_l+0x590>)
 800a626:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a62a:	4652      	mov	r2, sl
 800a62c:	465b      	mov	r3, fp
 800a62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a632:	f7f5 ffe1 	bl	80005f8 <__aeabi_dmul>
 800a636:	4682      	mov	sl, r0
 800a638:	468b      	mov	fp, r1
 800a63a:	f034 040f 	bics.w	r4, r4, #15
 800a63e:	d073      	beq.n	800a728 <_strtod_l+0x518>
 800a640:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a644:	dd48      	ble.n	800a6d8 <_strtod_l+0x4c8>
 800a646:	2400      	movs	r4, #0
 800a648:	46a0      	mov	r8, r4
 800a64a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a64c:	46a1      	mov	r9, r4
 800a64e:	9a05      	ldr	r2, [sp, #20]
 800a650:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a7a8 <_strtod_l+0x598>
 800a654:	2322      	movs	r3, #34	@ 0x22
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	f04f 0a00 	mov.w	sl, #0
 800a65c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f43f ae0f 	beq.w	800a282 <_strtod_l+0x72>
 800a664:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a666:	9805      	ldr	r0, [sp, #20]
 800a668:	f7ff f942 	bl	80098f0 <_Bfree>
 800a66c:	9805      	ldr	r0, [sp, #20]
 800a66e:	4649      	mov	r1, r9
 800a670:	f7ff f93e 	bl	80098f0 <_Bfree>
 800a674:	9805      	ldr	r0, [sp, #20]
 800a676:	4641      	mov	r1, r8
 800a678:	f7ff f93a 	bl	80098f0 <_Bfree>
 800a67c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a67e:	9805      	ldr	r0, [sp, #20]
 800a680:	f7ff f936 	bl	80098f0 <_Bfree>
 800a684:	9805      	ldr	r0, [sp, #20]
 800a686:	4621      	mov	r1, r4
 800a688:	f7ff f932 	bl	80098f0 <_Bfree>
 800a68c:	e5f9      	b.n	800a282 <_strtod_l+0x72>
 800a68e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a690:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a694:	4293      	cmp	r3, r2
 800a696:	dbbc      	blt.n	800a612 <_strtod_l+0x402>
 800a698:	4c41      	ldr	r4, [pc, #260]	@ (800a7a0 <_strtod_l+0x590>)
 800a69a:	f1c5 050f 	rsb	r5, r5, #15
 800a69e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a6a2:	4652      	mov	r2, sl
 800a6a4:	465b      	mov	r3, fp
 800a6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6aa:	f7f5 ffa5 	bl	80005f8 <__aeabi_dmul>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b0:	1b5d      	subs	r5, r3, r5
 800a6b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a6b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a6ba:	e78f      	b.n	800a5dc <_strtod_l+0x3cc>
 800a6bc:	3316      	adds	r3, #22
 800a6be:	dba8      	blt.n	800a612 <_strtod_l+0x402>
 800a6c0:	4b37      	ldr	r3, [pc, #220]	@ (800a7a0 <_strtod_l+0x590>)
 800a6c2:	eba9 0808 	sub.w	r8, r9, r8
 800a6c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a6ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a6ce:	4650      	mov	r0, sl
 800a6d0:	4659      	mov	r1, fp
 800a6d2:	f7f6 f8bb 	bl	800084c <__aeabi_ddiv>
 800a6d6:	e783      	b.n	800a5e0 <_strtod_l+0x3d0>
 800a6d8:	4b32      	ldr	r3, [pc, #200]	@ (800a7a4 <_strtod_l+0x594>)
 800a6da:	9308      	str	r3, [sp, #32]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	1124      	asrs	r4, r4, #4
 800a6e0:	4650      	mov	r0, sl
 800a6e2:	4659      	mov	r1, fp
 800a6e4:	461e      	mov	r6, r3
 800a6e6:	2c01      	cmp	r4, #1
 800a6e8:	dc21      	bgt.n	800a72e <_strtod_l+0x51e>
 800a6ea:	b10b      	cbz	r3, 800a6f0 <_strtod_l+0x4e0>
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	468b      	mov	fp, r1
 800a6f0:	492c      	ldr	r1, [pc, #176]	@ (800a7a4 <_strtod_l+0x594>)
 800a6f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a6f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a702:	f7f5 ff79 	bl	80005f8 <__aeabi_dmul>
 800a706:	4b28      	ldr	r3, [pc, #160]	@ (800a7a8 <_strtod_l+0x598>)
 800a708:	460a      	mov	r2, r1
 800a70a:	400b      	ands	r3, r1
 800a70c:	4927      	ldr	r1, [pc, #156]	@ (800a7ac <_strtod_l+0x59c>)
 800a70e:	428b      	cmp	r3, r1
 800a710:	4682      	mov	sl, r0
 800a712:	d898      	bhi.n	800a646 <_strtod_l+0x436>
 800a714:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a718:	428b      	cmp	r3, r1
 800a71a:	bf86      	itte	hi
 800a71c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a7b0 <_strtod_l+0x5a0>
 800a720:	f04f 3aff 	movhi.w	sl, #4294967295
 800a724:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a728:	2300      	movs	r3, #0
 800a72a:	9308      	str	r3, [sp, #32]
 800a72c:	e07a      	b.n	800a824 <_strtod_l+0x614>
 800a72e:	07e2      	lsls	r2, r4, #31
 800a730:	d505      	bpl.n	800a73e <_strtod_l+0x52e>
 800a732:	9b08      	ldr	r3, [sp, #32]
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 ff5e 	bl	80005f8 <__aeabi_dmul>
 800a73c:	2301      	movs	r3, #1
 800a73e:	9a08      	ldr	r2, [sp, #32]
 800a740:	3208      	adds	r2, #8
 800a742:	3601      	adds	r6, #1
 800a744:	1064      	asrs	r4, r4, #1
 800a746:	9208      	str	r2, [sp, #32]
 800a748:	e7cd      	b.n	800a6e6 <_strtod_l+0x4d6>
 800a74a:	d0ed      	beq.n	800a728 <_strtod_l+0x518>
 800a74c:	4264      	negs	r4, r4
 800a74e:	f014 020f 	ands.w	r2, r4, #15
 800a752:	d00a      	beq.n	800a76a <_strtod_l+0x55a>
 800a754:	4b12      	ldr	r3, [pc, #72]	@ (800a7a0 <_strtod_l+0x590>)
 800a756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a75a:	4650      	mov	r0, sl
 800a75c:	4659      	mov	r1, fp
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f6 f873 	bl	800084c <__aeabi_ddiv>
 800a766:	4682      	mov	sl, r0
 800a768:	468b      	mov	fp, r1
 800a76a:	1124      	asrs	r4, r4, #4
 800a76c:	d0dc      	beq.n	800a728 <_strtod_l+0x518>
 800a76e:	2c1f      	cmp	r4, #31
 800a770:	dd20      	ble.n	800a7b4 <_strtod_l+0x5a4>
 800a772:	2400      	movs	r4, #0
 800a774:	46a0      	mov	r8, r4
 800a776:	940a      	str	r4, [sp, #40]	@ 0x28
 800a778:	46a1      	mov	r9, r4
 800a77a:	9a05      	ldr	r2, [sp, #20]
 800a77c:	2322      	movs	r3, #34	@ 0x22
 800a77e:	f04f 0a00 	mov.w	sl, #0
 800a782:	f04f 0b00 	mov.w	fp, #0
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	e768      	b.n	800a65c <_strtod_l+0x44c>
 800a78a:	bf00      	nop
 800a78c:	0800c8fd 	.word	0x0800c8fd
 800a790:	0800cb14 	.word	0x0800cb14
 800a794:	0800c8f5 	.word	0x0800c8f5
 800a798:	0800c92a 	.word	0x0800c92a
 800a79c:	0800ccd8 	.word	0x0800ccd8
 800a7a0:	0800ca48 	.word	0x0800ca48
 800a7a4:	0800ca20 	.word	0x0800ca20
 800a7a8:	7ff00000 	.word	0x7ff00000
 800a7ac:	7ca00000 	.word	0x7ca00000
 800a7b0:	7fefffff 	.word	0x7fefffff
 800a7b4:	f014 0310 	ands.w	r3, r4, #16
 800a7b8:	bf18      	it	ne
 800a7ba:	236a      	movne	r3, #106	@ 0x6a
 800a7bc:	4ea9      	ldr	r6, [pc, #676]	@ (800aa64 <_strtod_l+0x854>)
 800a7be:	9308      	str	r3, [sp, #32]
 800a7c0:	4650      	mov	r0, sl
 800a7c2:	4659      	mov	r1, fp
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	07e2      	lsls	r2, r4, #31
 800a7c8:	d504      	bpl.n	800a7d4 <_strtod_l+0x5c4>
 800a7ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7ce:	f7f5 ff13 	bl	80005f8 <__aeabi_dmul>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	1064      	asrs	r4, r4, #1
 800a7d6:	f106 0608 	add.w	r6, r6, #8
 800a7da:	d1f4      	bne.n	800a7c6 <_strtod_l+0x5b6>
 800a7dc:	b10b      	cbz	r3, 800a7e2 <_strtod_l+0x5d2>
 800a7de:	4682      	mov	sl, r0
 800a7e0:	468b      	mov	fp, r1
 800a7e2:	9b08      	ldr	r3, [sp, #32]
 800a7e4:	b1b3      	cbz	r3, 800a814 <_strtod_l+0x604>
 800a7e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a7ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	dd0f      	ble.n	800a814 <_strtod_l+0x604>
 800a7f4:	2b1f      	cmp	r3, #31
 800a7f6:	dd55      	ble.n	800a8a4 <_strtod_l+0x694>
 800a7f8:	2b34      	cmp	r3, #52	@ 0x34
 800a7fa:	bfde      	ittt	le
 800a7fc:	f04f 33ff 	movle.w	r3, #4294967295
 800a800:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a804:	4093      	lslle	r3, r2
 800a806:	f04f 0a00 	mov.w	sl, #0
 800a80a:	bfcc      	ite	gt
 800a80c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a810:	ea03 0b01 	andle.w	fp, r3, r1
 800a814:	2200      	movs	r2, #0
 800a816:	2300      	movs	r3, #0
 800a818:	4650      	mov	r0, sl
 800a81a:	4659      	mov	r1, fp
 800a81c:	f7f6 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 800a820:	2800      	cmp	r0, #0
 800a822:	d1a6      	bne.n	800a772 <_strtod_l+0x562>
 800a824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a82a:	9805      	ldr	r0, [sp, #20]
 800a82c:	462b      	mov	r3, r5
 800a82e:	463a      	mov	r2, r7
 800a830:	f7ff f8c6 	bl	80099c0 <__s2b>
 800a834:	900a      	str	r0, [sp, #40]	@ 0x28
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f af05 	beq.w	800a646 <_strtod_l+0x436>
 800a83c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a83e:	2a00      	cmp	r2, #0
 800a840:	eba9 0308 	sub.w	r3, r9, r8
 800a844:	bfa8      	it	ge
 800a846:	2300      	movge	r3, #0
 800a848:	9312      	str	r3, [sp, #72]	@ 0x48
 800a84a:	2400      	movs	r4, #0
 800a84c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a850:	9316      	str	r3, [sp, #88]	@ 0x58
 800a852:	46a0      	mov	r8, r4
 800a854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a856:	9805      	ldr	r0, [sp, #20]
 800a858:	6859      	ldr	r1, [r3, #4]
 800a85a:	f7ff f809 	bl	8009870 <_Balloc>
 800a85e:	4681      	mov	r9, r0
 800a860:	2800      	cmp	r0, #0
 800a862:	f43f aef4 	beq.w	800a64e <_strtod_l+0x43e>
 800a866:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a868:	691a      	ldr	r2, [r3, #16]
 800a86a:	3202      	adds	r2, #2
 800a86c:	f103 010c 	add.w	r1, r3, #12
 800a870:	0092      	lsls	r2, r2, #2
 800a872:	300c      	adds	r0, #12
 800a874:	f7fe f89b 	bl	80089ae <memcpy>
 800a878:	ec4b ab10 	vmov	d0, sl, fp
 800a87c:	9805      	ldr	r0, [sp, #20]
 800a87e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a880:	a91b      	add	r1, sp, #108	@ 0x6c
 800a882:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a886:	f7ff fbd7 	bl	800a038 <__d2b>
 800a88a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f43f aede 	beq.w	800a64e <_strtod_l+0x43e>
 800a892:	9805      	ldr	r0, [sp, #20]
 800a894:	2101      	movs	r1, #1
 800a896:	f7ff f929 	bl	8009aec <__i2b>
 800a89a:	4680      	mov	r8, r0
 800a89c:	b948      	cbnz	r0, 800a8b2 <_strtod_l+0x6a2>
 800a89e:	f04f 0800 	mov.w	r8, #0
 800a8a2:	e6d4      	b.n	800a64e <_strtod_l+0x43e>
 800a8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	ea03 0a0a 	and.w	sl, r3, sl
 800a8b0:	e7b0      	b.n	800a814 <_strtod_l+0x604>
 800a8b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a8b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	bfab      	itete	ge
 800a8ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a8bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a8be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a8c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a8c2:	bfac      	ite	ge
 800a8c4:	18ef      	addge	r7, r5, r3
 800a8c6:	1b5e      	sublt	r6, r3, r5
 800a8c8:	9b08      	ldr	r3, [sp, #32]
 800a8ca:	1aed      	subs	r5, r5, r3
 800a8cc:	4415      	add	r5, r2
 800a8ce:	4b66      	ldr	r3, [pc, #408]	@ (800aa68 <_strtod_l+0x858>)
 800a8d0:	3d01      	subs	r5, #1
 800a8d2:	429d      	cmp	r5, r3
 800a8d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a8d8:	da50      	bge.n	800a97c <_strtod_l+0x76c>
 800a8da:	1b5b      	subs	r3, r3, r5
 800a8dc:	2b1f      	cmp	r3, #31
 800a8de:	eba2 0203 	sub.w	r2, r2, r3
 800a8e2:	f04f 0101 	mov.w	r1, #1
 800a8e6:	dc3d      	bgt.n	800a964 <_strtod_l+0x754>
 800a8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8f2:	18bd      	adds	r5, r7, r2
 800a8f4:	9b08      	ldr	r3, [sp, #32]
 800a8f6:	42af      	cmp	r7, r5
 800a8f8:	4416      	add	r6, r2
 800a8fa:	441e      	add	r6, r3
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	bfa8      	it	ge
 800a900:	462b      	movge	r3, r5
 800a902:	42b3      	cmp	r3, r6
 800a904:	bfa8      	it	ge
 800a906:	4633      	movge	r3, r6
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bfc2      	ittt	gt
 800a90c:	1aed      	subgt	r5, r5, r3
 800a90e:	1af6      	subgt	r6, r6, r3
 800a910:	1aff      	subgt	r7, r7, r3
 800a912:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd16      	ble.n	800a946 <_strtod_l+0x736>
 800a918:	4641      	mov	r1, r8
 800a91a:	9805      	ldr	r0, [sp, #20]
 800a91c:	461a      	mov	r2, r3
 800a91e:	f7ff f9a5 	bl	8009c6c <__pow5mult>
 800a922:	4680      	mov	r8, r0
 800a924:	2800      	cmp	r0, #0
 800a926:	d0ba      	beq.n	800a89e <_strtod_l+0x68e>
 800a928:	4601      	mov	r1, r0
 800a92a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a92c:	9805      	ldr	r0, [sp, #20]
 800a92e:	f7ff f8f3 	bl	8009b18 <__multiply>
 800a932:	900e      	str	r0, [sp, #56]	@ 0x38
 800a934:	2800      	cmp	r0, #0
 800a936:	f43f ae8a 	beq.w	800a64e <_strtod_l+0x43e>
 800a93a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a93c:	9805      	ldr	r0, [sp, #20]
 800a93e:	f7fe ffd7 	bl	80098f0 <_Bfree>
 800a942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a944:	931a      	str	r3, [sp, #104]	@ 0x68
 800a946:	2d00      	cmp	r5, #0
 800a948:	dc1d      	bgt.n	800a986 <_strtod_l+0x776>
 800a94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	dd23      	ble.n	800a998 <_strtod_l+0x788>
 800a950:	4649      	mov	r1, r9
 800a952:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a954:	9805      	ldr	r0, [sp, #20]
 800a956:	f7ff f989 	bl	8009c6c <__pow5mult>
 800a95a:	4681      	mov	r9, r0
 800a95c:	b9e0      	cbnz	r0, 800a998 <_strtod_l+0x788>
 800a95e:	f04f 0900 	mov.w	r9, #0
 800a962:	e674      	b.n	800a64e <_strtod_l+0x43e>
 800a964:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a968:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a96c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a970:	35e2      	adds	r5, #226	@ 0xe2
 800a972:	fa01 f305 	lsl.w	r3, r1, r5
 800a976:	9310      	str	r3, [sp, #64]	@ 0x40
 800a978:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a97a:	e7ba      	b.n	800a8f2 <_strtod_l+0x6e2>
 800a97c:	2300      	movs	r3, #0
 800a97e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a980:	2301      	movs	r3, #1
 800a982:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a984:	e7b5      	b.n	800a8f2 <_strtod_l+0x6e2>
 800a986:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a988:	9805      	ldr	r0, [sp, #20]
 800a98a:	462a      	mov	r2, r5
 800a98c:	f7ff f9c8 	bl	8009d20 <__lshift>
 800a990:	901a      	str	r0, [sp, #104]	@ 0x68
 800a992:	2800      	cmp	r0, #0
 800a994:	d1d9      	bne.n	800a94a <_strtod_l+0x73a>
 800a996:	e65a      	b.n	800a64e <_strtod_l+0x43e>
 800a998:	2e00      	cmp	r6, #0
 800a99a:	dd07      	ble.n	800a9ac <_strtod_l+0x79c>
 800a99c:	4649      	mov	r1, r9
 800a99e:	9805      	ldr	r0, [sp, #20]
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	f7ff f9bd 	bl	8009d20 <__lshift>
 800a9a6:	4681      	mov	r9, r0
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d0d8      	beq.n	800a95e <_strtod_l+0x74e>
 800a9ac:	2f00      	cmp	r7, #0
 800a9ae:	dd08      	ble.n	800a9c2 <_strtod_l+0x7b2>
 800a9b0:	4641      	mov	r1, r8
 800a9b2:	9805      	ldr	r0, [sp, #20]
 800a9b4:	463a      	mov	r2, r7
 800a9b6:	f7ff f9b3 	bl	8009d20 <__lshift>
 800a9ba:	4680      	mov	r8, r0
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	f43f ae46 	beq.w	800a64e <_strtod_l+0x43e>
 800a9c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9c4:	9805      	ldr	r0, [sp, #20]
 800a9c6:	464a      	mov	r2, r9
 800a9c8:	f7ff fa32 	bl	8009e30 <__mdiff>
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	f43f ae3d 	beq.w	800a64e <_strtod_l+0x43e>
 800a9d4:	68c3      	ldr	r3, [r0, #12]
 800a9d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60c3      	str	r3, [r0, #12]
 800a9dc:	4641      	mov	r1, r8
 800a9de:	f7ff fa0b 	bl	8009df8 <__mcmp>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	da46      	bge.n	800aa74 <_strtod_l+0x864>
 800a9e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e8:	ea53 030a 	orrs.w	r3, r3, sl
 800a9ec:	d16c      	bne.n	800aac8 <_strtod_l+0x8b8>
 800a9ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d168      	bne.n	800aac8 <_strtod_l+0x8b8>
 800a9f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9fa:	0d1b      	lsrs	r3, r3, #20
 800a9fc:	051b      	lsls	r3, r3, #20
 800a9fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa02:	d961      	bls.n	800aac8 <_strtod_l+0x8b8>
 800aa04:	6963      	ldr	r3, [r4, #20]
 800aa06:	b913      	cbnz	r3, 800aa0e <_strtod_l+0x7fe>
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	dd5c      	ble.n	800aac8 <_strtod_l+0x8b8>
 800aa0e:	4621      	mov	r1, r4
 800aa10:	2201      	movs	r2, #1
 800aa12:	9805      	ldr	r0, [sp, #20]
 800aa14:	f7ff f984 	bl	8009d20 <__lshift>
 800aa18:	4641      	mov	r1, r8
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	f7ff f9ec 	bl	8009df8 <__mcmp>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	dd51      	ble.n	800aac8 <_strtod_l+0x8b8>
 800aa24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa28:	9a08      	ldr	r2, [sp, #32]
 800aa2a:	0d1b      	lsrs	r3, r3, #20
 800aa2c:	051b      	lsls	r3, r3, #20
 800aa2e:	2a00      	cmp	r2, #0
 800aa30:	d06b      	beq.n	800ab0a <_strtod_l+0x8fa>
 800aa32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa36:	d868      	bhi.n	800ab0a <_strtod_l+0x8fa>
 800aa38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aa3c:	f67f ae9d 	bls.w	800a77a <_strtod_l+0x56a>
 800aa40:	4b0a      	ldr	r3, [pc, #40]	@ (800aa6c <_strtod_l+0x85c>)
 800aa42:	4650      	mov	r0, sl
 800aa44:	4659      	mov	r1, fp
 800aa46:	2200      	movs	r2, #0
 800aa48:	f7f5 fdd6 	bl	80005f8 <__aeabi_dmul>
 800aa4c:	4b08      	ldr	r3, [pc, #32]	@ (800aa70 <_strtod_l+0x860>)
 800aa4e:	400b      	ands	r3, r1
 800aa50:	4682      	mov	sl, r0
 800aa52:	468b      	mov	fp, r1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f47f ae05 	bne.w	800a664 <_strtod_l+0x454>
 800aa5a:	9a05      	ldr	r2, [sp, #20]
 800aa5c:	2322      	movs	r3, #34	@ 0x22
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	e600      	b.n	800a664 <_strtod_l+0x454>
 800aa62:	bf00      	nop
 800aa64:	0800cb40 	.word	0x0800cb40
 800aa68:	fffffc02 	.word	0xfffffc02
 800aa6c:	39500000 	.word	0x39500000
 800aa70:	7ff00000 	.word	0x7ff00000
 800aa74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aa78:	d165      	bne.n	800ab46 <_strtod_l+0x936>
 800aa7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa80:	b35a      	cbz	r2, 800aada <_strtod_l+0x8ca>
 800aa82:	4a9f      	ldr	r2, [pc, #636]	@ (800ad00 <_strtod_l+0xaf0>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d12b      	bne.n	800aae0 <_strtod_l+0x8d0>
 800aa88:	9b08      	ldr	r3, [sp, #32]
 800aa8a:	4651      	mov	r1, sl
 800aa8c:	b303      	cbz	r3, 800aad0 <_strtod_l+0x8c0>
 800aa8e:	4b9d      	ldr	r3, [pc, #628]	@ (800ad04 <_strtod_l+0xaf4>)
 800aa90:	465a      	mov	r2, fp
 800aa92:	4013      	ands	r3, r2
 800aa94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa98:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9c:	d81b      	bhi.n	800aad6 <_strtod_l+0x8c6>
 800aa9e:	0d1b      	lsrs	r3, r3, #20
 800aaa0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d119      	bne.n	800aae0 <_strtod_l+0x8d0>
 800aaac:	4b96      	ldr	r3, [pc, #600]	@ (800ad08 <_strtod_l+0xaf8>)
 800aaae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d102      	bne.n	800aaba <_strtod_l+0x8aa>
 800aab4:	3101      	adds	r1, #1
 800aab6:	f43f adca 	beq.w	800a64e <_strtod_l+0x43e>
 800aaba:	4b92      	ldr	r3, [pc, #584]	@ (800ad04 <_strtod_l+0xaf4>)
 800aabc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aabe:	401a      	ands	r2, r3
 800aac0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aac4:	f04f 0a00 	mov.w	sl, #0
 800aac8:	9b08      	ldr	r3, [sp, #32]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1b8      	bne.n	800aa40 <_strtod_l+0x830>
 800aace:	e5c9      	b.n	800a664 <_strtod_l+0x454>
 800aad0:	f04f 33ff 	mov.w	r3, #4294967295
 800aad4:	e7e8      	b.n	800aaa8 <_strtod_l+0x898>
 800aad6:	4613      	mov	r3, r2
 800aad8:	e7e6      	b.n	800aaa8 <_strtod_l+0x898>
 800aada:	ea53 030a 	orrs.w	r3, r3, sl
 800aade:	d0a1      	beq.n	800aa24 <_strtod_l+0x814>
 800aae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aae2:	b1db      	cbz	r3, 800ab1c <_strtod_l+0x90c>
 800aae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aae6:	4213      	tst	r3, r2
 800aae8:	d0ee      	beq.n	800aac8 <_strtod_l+0x8b8>
 800aaea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaec:	9a08      	ldr	r2, [sp, #32]
 800aaee:	4650      	mov	r0, sl
 800aaf0:	4659      	mov	r1, fp
 800aaf2:	b1bb      	cbz	r3, 800ab24 <_strtod_l+0x914>
 800aaf4:	f7ff fb6e 	bl	800a1d4 <sulp>
 800aaf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aafc:	ec53 2b10 	vmov	r2, r3, d0
 800ab00:	f7f5 fbc4 	bl	800028c <__adddf3>
 800ab04:	4682      	mov	sl, r0
 800ab06:	468b      	mov	fp, r1
 800ab08:	e7de      	b.n	800aac8 <_strtod_l+0x8b8>
 800ab0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ab0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab16:	f04f 3aff 	mov.w	sl, #4294967295
 800ab1a:	e7d5      	b.n	800aac8 <_strtod_l+0x8b8>
 800ab1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab1e:	ea13 0f0a 	tst.w	r3, sl
 800ab22:	e7e1      	b.n	800aae8 <_strtod_l+0x8d8>
 800ab24:	f7ff fb56 	bl	800a1d4 <sulp>
 800ab28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab2c:	ec53 2b10 	vmov	r2, r3, d0
 800ab30:	f7f5 fbaa 	bl	8000288 <__aeabi_dsub>
 800ab34:	2200      	movs	r2, #0
 800ab36:	2300      	movs	r3, #0
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	f7f5 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d0c1      	beq.n	800aac8 <_strtod_l+0x8b8>
 800ab44:	e619      	b.n	800a77a <_strtod_l+0x56a>
 800ab46:	4641      	mov	r1, r8
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f7ff facd 	bl	800a0e8 <__ratio>
 800ab4e:	ec57 6b10 	vmov	r6, r7, d0
 800ab52:	2200      	movs	r2, #0
 800ab54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	f7f5 ffc8 	bl	8000af0 <__aeabi_dcmple>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d06f      	beq.n	800ac44 <_strtod_l+0xa34>
 800ab64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d17a      	bne.n	800ac60 <_strtod_l+0xa50>
 800ab6a:	f1ba 0f00 	cmp.w	sl, #0
 800ab6e:	d158      	bne.n	800ac22 <_strtod_l+0xa12>
 800ab70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d15a      	bne.n	800ac30 <_strtod_l+0xa20>
 800ab7a:	4b64      	ldr	r3, [pc, #400]	@ (800ad0c <_strtod_l+0xafc>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	4630      	mov	r0, r6
 800ab80:	4639      	mov	r1, r7
 800ab82:	f7f5 ffab 	bl	8000adc <__aeabi_dcmplt>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d159      	bne.n	800ac3e <_strtod_l+0xa2e>
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	4b60      	ldr	r3, [pc, #384]	@ (800ad10 <_strtod_l+0xb00>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	f7f5 fd31 	bl	80005f8 <__aeabi_dmul>
 800ab96:	4606      	mov	r6, r0
 800ab98:	460f      	mov	r7, r1
 800ab9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab9e:	9606      	str	r6, [sp, #24]
 800aba0:	9307      	str	r3, [sp, #28]
 800aba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aba6:	4d57      	ldr	r5, [pc, #348]	@ (800ad04 <_strtod_l+0xaf4>)
 800aba8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800abac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abae:	401d      	ands	r5, r3
 800abb0:	4b58      	ldr	r3, [pc, #352]	@ (800ad14 <_strtod_l+0xb04>)
 800abb2:	429d      	cmp	r5, r3
 800abb4:	f040 80b2 	bne.w	800ad1c <_strtod_l+0xb0c>
 800abb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800abbe:	ec4b ab10 	vmov	d0, sl, fp
 800abc2:	f7ff f9c9 	bl	8009f58 <__ulp>
 800abc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abca:	ec51 0b10 	vmov	r0, r1, d0
 800abce:	f7f5 fd13 	bl	80005f8 <__aeabi_dmul>
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	f7f5 fb59 	bl	800028c <__adddf3>
 800abda:	460b      	mov	r3, r1
 800abdc:	4949      	ldr	r1, [pc, #292]	@ (800ad04 <_strtod_l+0xaf4>)
 800abde:	4a4e      	ldr	r2, [pc, #312]	@ (800ad18 <_strtod_l+0xb08>)
 800abe0:	4019      	ands	r1, r3
 800abe2:	4291      	cmp	r1, r2
 800abe4:	4682      	mov	sl, r0
 800abe6:	d942      	bls.n	800ac6e <_strtod_l+0xa5e>
 800abe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abea:	4b47      	ldr	r3, [pc, #284]	@ (800ad08 <_strtod_l+0xaf8>)
 800abec:	429a      	cmp	r2, r3
 800abee:	d103      	bne.n	800abf8 <_strtod_l+0x9e8>
 800abf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abf2:	3301      	adds	r3, #1
 800abf4:	f43f ad2b 	beq.w	800a64e <_strtod_l+0x43e>
 800abf8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ad08 <_strtod_l+0xaf8>
 800abfc:	f04f 3aff 	mov.w	sl, #4294967295
 800ac00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac02:	9805      	ldr	r0, [sp, #20]
 800ac04:	f7fe fe74 	bl	80098f0 <_Bfree>
 800ac08:	9805      	ldr	r0, [sp, #20]
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	f7fe fe70 	bl	80098f0 <_Bfree>
 800ac10:	9805      	ldr	r0, [sp, #20]
 800ac12:	4641      	mov	r1, r8
 800ac14:	f7fe fe6c 	bl	80098f0 <_Bfree>
 800ac18:	9805      	ldr	r0, [sp, #20]
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	f7fe fe68 	bl	80098f0 <_Bfree>
 800ac20:	e618      	b.n	800a854 <_strtod_l+0x644>
 800ac22:	f1ba 0f01 	cmp.w	sl, #1
 800ac26:	d103      	bne.n	800ac30 <_strtod_l+0xa20>
 800ac28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f43f ada5 	beq.w	800a77a <_strtod_l+0x56a>
 800ac30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ace0 <_strtod_l+0xad0>
 800ac34:	4f35      	ldr	r7, [pc, #212]	@ (800ad0c <_strtod_l+0xafc>)
 800ac36:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac3a:	2600      	movs	r6, #0
 800ac3c:	e7b1      	b.n	800aba2 <_strtod_l+0x992>
 800ac3e:	4f34      	ldr	r7, [pc, #208]	@ (800ad10 <_strtod_l+0xb00>)
 800ac40:	2600      	movs	r6, #0
 800ac42:	e7aa      	b.n	800ab9a <_strtod_l+0x98a>
 800ac44:	4b32      	ldr	r3, [pc, #200]	@ (800ad10 <_strtod_l+0xb00>)
 800ac46:	4630      	mov	r0, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f7f5 fcd4 	bl	80005f8 <__aeabi_dmul>
 800ac50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac52:	4606      	mov	r6, r0
 800ac54:	460f      	mov	r7, r1
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d09f      	beq.n	800ab9a <_strtod_l+0x98a>
 800ac5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac5e:	e7a0      	b.n	800aba2 <_strtod_l+0x992>
 800ac60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ace8 <_strtod_l+0xad8>
 800ac64:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac68:	ec57 6b17 	vmov	r6, r7, d7
 800ac6c:	e799      	b.n	800aba2 <_strtod_l+0x992>
 800ac6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ac72:	9b08      	ldr	r3, [sp, #32]
 800ac74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1c1      	bne.n	800ac00 <_strtod_l+0x9f0>
 800ac7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac80:	0d1b      	lsrs	r3, r3, #20
 800ac82:	051b      	lsls	r3, r3, #20
 800ac84:	429d      	cmp	r5, r3
 800ac86:	d1bb      	bne.n	800ac00 <_strtod_l+0x9f0>
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f6 f814 	bl	8000cb8 <__aeabi_d2lz>
 800ac90:	f7f5 fc84 	bl	800059c <__aeabi_l2d>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4630      	mov	r0, r6
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	f7f5 faf4 	bl	8000288 <__aeabi_dsub>
 800aca0:	460b      	mov	r3, r1
 800aca2:	4602      	mov	r2, r0
 800aca4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aca8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800acac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acae:	ea46 060a 	orr.w	r6, r6, sl
 800acb2:	431e      	orrs	r6, r3
 800acb4:	d06f      	beq.n	800ad96 <_strtod_l+0xb86>
 800acb6:	a30e      	add	r3, pc, #56	@ (adr r3, 800acf0 <_strtod_l+0xae0>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 ff0e 	bl	8000adc <__aeabi_dcmplt>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f47f accf 	bne.w	800a664 <_strtod_l+0x454>
 800acc6:	a30c      	add	r3, pc, #48	@ (adr r3, 800acf8 <_strtod_l+0xae8>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acd0:	f7f5 ff22 	bl	8000b18 <__aeabi_dcmpgt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d093      	beq.n	800ac00 <_strtod_l+0x9f0>
 800acd8:	e4c4      	b.n	800a664 <_strtod_l+0x454>
 800acda:	bf00      	nop
 800acdc:	f3af 8000 	nop.w
 800ace0:	00000000 	.word	0x00000000
 800ace4:	bff00000 	.word	0xbff00000
 800ace8:	00000000 	.word	0x00000000
 800acec:	3ff00000 	.word	0x3ff00000
 800acf0:	94a03595 	.word	0x94a03595
 800acf4:	3fdfffff 	.word	0x3fdfffff
 800acf8:	35afe535 	.word	0x35afe535
 800acfc:	3fe00000 	.word	0x3fe00000
 800ad00:	000fffff 	.word	0x000fffff
 800ad04:	7ff00000 	.word	0x7ff00000
 800ad08:	7fefffff 	.word	0x7fefffff
 800ad0c:	3ff00000 	.word	0x3ff00000
 800ad10:	3fe00000 	.word	0x3fe00000
 800ad14:	7fe00000 	.word	0x7fe00000
 800ad18:	7c9fffff 	.word	0x7c9fffff
 800ad1c:	9b08      	ldr	r3, [sp, #32]
 800ad1e:	b323      	cbz	r3, 800ad6a <_strtod_l+0xb5a>
 800ad20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ad24:	d821      	bhi.n	800ad6a <_strtod_l+0xb5a>
 800ad26:	a328      	add	r3, pc, #160	@ (adr r3, 800adc8 <_strtod_l+0xbb8>)
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 fede 	bl	8000af0 <__aeabi_dcmple>
 800ad34:	b1a0      	cbz	r0, 800ad60 <_strtod_l+0xb50>
 800ad36:	4639      	mov	r1, r7
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7f5 ff35 	bl	8000ba8 <__aeabi_d2uiz>
 800ad3e:	2801      	cmp	r0, #1
 800ad40:	bf38      	it	cc
 800ad42:	2001      	movcc	r0, #1
 800ad44:	f7f5 fbde 	bl	8000504 <__aeabi_ui2d>
 800ad48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	b9fb      	cbnz	r3, 800ad90 <_strtod_l+0xb80>
 800ad50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad54:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad56:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ad5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ad60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ad66:	1b5b      	subs	r3, r3, r5
 800ad68:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ad72:	f7ff f8f1 	bl	8009f58 <__ulp>
 800ad76:	4650      	mov	r0, sl
 800ad78:	ec53 2b10 	vmov	r2, r3, d0
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	f7f5 fc3b 	bl	80005f8 <__aeabi_dmul>
 800ad82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad86:	f7f5 fa81 	bl	800028c <__adddf3>
 800ad8a:	4682      	mov	sl, r0
 800ad8c:	468b      	mov	fp, r1
 800ad8e:	e770      	b.n	800ac72 <_strtod_l+0xa62>
 800ad90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ad94:	e7e0      	b.n	800ad58 <_strtod_l+0xb48>
 800ad96:	a30e      	add	r3, pc, #56	@ (adr r3, 800add0 <_strtod_l+0xbc0>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fe9e 	bl	8000adc <__aeabi_dcmplt>
 800ada0:	e798      	b.n	800acd4 <_strtod_l+0xac4>
 800ada2:	2300      	movs	r3, #0
 800ada4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ada6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ada8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	f7ff ba6d 	b.w	800a28a <_strtod_l+0x7a>
 800adb0:	2a65      	cmp	r2, #101	@ 0x65
 800adb2:	f43f ab66 	beq.w	800a482 <_strtod_l+0x272>
 800adb6:	2a45      	cmp	r2, #69	@ 0x45
 800adb8:	f43f ab63 	beq.w	800a482 <_strtod_l+0x272>
 800adbc:	2301      	movs	r3, #1
 800adbe:	f7ff bb9e 	b.w	800a4fe <_strtod_l+0x2ee>
 800adc2:	bf00      	nop
 800adc4:	f3af 8000 	nop.w
 800adc8:	ffc00000 	.word	0xffc00000
 800adcc:	41dfffff 	.word	0x41dfffff
 800add0:	94a03595 	.word	0x94a03595
 800add4:	3fcfffff 	.word	0x3fcfffff

0800add8 <_strtod_r>:
 800add8:	4b01      	ldr	r3, [pc, #4]	@ (800ade0 <_strtod_r+0x8>)
 800adda:	f7ff ba19 	b.w	800a210 <_strtod_l>
 800adde:	bf00      	nop
 800ade0:	20000074 	.word	0x20000074

0800ade4 <_strtol_l.constprop.0>:
 800ade4:	2b24      	cmp	r3, #36	@ 0x24
 800ade6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adea:	4686      	mov	lr, r0
 800adec:	4690      	mov	r8, r2
 800adee:	d801      	bhi.n	800adf4 <_strtol_l.constprop.0+0x10>
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d106      	bne.n	800ae02 <_strtol_l.constprop.0+0x1e>
 800adf4:	f7fd fdae 	bl	8008954 <__errno>
 800adf8:	2316      	movs	r3, #22
 800adfa:	6003      	str	r3, [r0, #0]
 800adfc:	2000      	movs	r0, #0
 800adfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae02:	4834      	ldr	r0, [pc, #208]	@ (800aed4 <_strtol_l.constprop.0+0xf0>)
 800ae04:	460d      	mov	r5, r1
 800ae06:	462a      	mov	r2, r5
 800ae08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae0c:	5d06      	ldrb	r6, [r0, r4]
 800ae0e:	f016 0608 	ands.w	r6, r6, #8
 800ae12:	d1f8      	bne.n	800ae06 <_strtol_l.constprop.0+0x22>
 800ae14:	2c2d      	cmp	r4, #45	@ 0x2d
 800ae16:	d12d      	bne.n	800ae74 <_strtol_l.constprop.0+0x90>
 800ae18:	782c      	ldrb	r4, [r5, #0]
 800ae1a:	2601      	movs	r6, #1
 800ae1c:	1c95      	adds	r5, r2, #2
 800ae1e:	f033 0210 	bics.w	r2, r3, #16
 800ae22:	d109      	bne.n	800ae38 <_strtol_l.constprop.0+0x54>
 800ae24:	2c30      	cmp	r4, #48	@ 0x30
 800ae26:	d12a      	bne.n	800ae7e <_strtol_l.constprop.0+0x9a>
 800ae28:	782a      	ldrb	r2, [r5, #0]
 800ae2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae2e:	2a58      	cmp	r2, #88	@ 0x58
 800ae30:	d125      	bne.n	800ae7e <_strtol_l.constprop.0+0x9a>
 800ae32:	786c      	ldrb	r4, [r5, #1]
 800ae34:	2310      	movs	r3, #16
 800ae36:	3502      	adds	r5, #2
 800ae38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae40:	2200      	movs	r2, #0
 800ae42:	fbbc f9f3 	udiv	r9, ip, r3
 800ae46:	4610      	mov	r0, r2
 800ae48:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae50:	2f09      	cmp	r7, #9
 800ae52:	d81b      	bhi.n	800ae8c <_strtol_l.constprop.0+0xa8>
 800ae54:	463c      	mov	r4, r7
 800ae56:	42a3      	cmp	r3, r4
 800ae58:	dd27      	ble.n	800aeaa <_strtol_l.constprop.0+0xc6>
 800ae5a:	1c57      	adds	r7, r2, #1
 800ae5c:	d007      	beq.n	800ae6e <_strtol_l.constprop.0+0x8a>
 800ae5e:	4581      	cmp	r9, r0
 800ae60:	d320      	bcc.n	800aea4 <_strtol_l.constprop.0+0xc0>
 800ae62:	d101      	bne.n	800ae68 <_strtol_l.constprop.0+0x84>
 800ae64:	45a2      	cmp	sl, r4
 800ae66:	db1d      	blt.n	800aea4 <_strtol_l.constprop.0+0xc0>
 800ae68:	fb00 4003 	mla	r0, r0, r3, r4
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae72:	e7eb      	b.n	800ae4c <_strtol_l.constprop.0+0x68>
 800ae74:	2c2b      	cmp	r4, #43	@ 0x2b
 800ae76:	bf04      	itt	eq
 800ae78:	782c      	ldrbeq	r4, [r5, #0]
 800ae7a:	1c95      	addeq	r5, r2, #2
 800ae7c:	e7cf      	b.n	800ae1e <_strtol_l.constprop.0+0x3a>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1da      	bne.n	800ae38 <_strtol_l.constprop.0+0x54>
 800ae82:	2c30      	cmp	r4, #48	@ 0x30
 800ae84:	bf0c      	ite	eq
 800ae86:	2308      	moveq	r3, #8
 800ae88:	230a      	movne	r3, #10
 800ae8a:	e7d5      	b.n	800ae38 <_strtol_l.constprop.0+0x54>
 800ae8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae90:	2f19      	cmp	r7, #25
 800ae92:	d801      	bhi.n	800ae98 <_strtol_l.constprop.0+0xb4>
 800ae94:	3c37      	subs	r4, #55	@ 0x37
 800ae96:	e7de      	b.n	800ae56 <_strtol_l.constprop.0+0x72>
 800ae98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae9c:	2f19      	cmp	r7, #25
 800ae9e:	d804      	bhi.n	800aeaa <_strtol_l.constprop.0+0xc6>
 800aea0:	3c57      	subs	r4, #87	@ 0x57
 800aea2:	e7d8      	b.n	800ae56 <_strtol_l.constprop.0+0x72>
 800aea4:	f04f 32ff 	mov.w	r2, #4294967295
 800aea8:	e7e1      	b.n	800ae6e <_strtol_l.constprop.0+0x8a>
 800aeaa:	1c53      	adds	r3, r2, #1
 800aeac:	d108      	bne.n	800aec0 <_strtol_l.constprop.0+0xdc>
 800aeae:	2322      	movs	r3, #34	@ 0x22
 800aeb0:	f8ce 3000 	str.w	r3, [lr]
 800aeb4:	4660      	mov	r0, ip
 800aeb6:	f1b8 0f00 	cmp.w	r8, #0
 800aeba:	d0a0      	beq.n	800adfe <_strtol_l.constprop.0+0x1a>
 800aebc:	1e69      	subs	r1, r5, #1
 800aebe:	e006      	b.n	800aece <_strtol_l.constprop.0+0xea>
 800aec0:	b106      	cbz	r6, 800aec4 <_strtol_l.constprop.0+0xe0>
 800aec2:	4240      	negs	r0, r0
 800aec4:	f1b8 0f00 	cmp.w	r8, #0
 800aec8:	d099      	beq.n	800adfe <_strtol_l.constprop.0+0x1a>
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	d1f6      	bne.n	800aebc <_strtol_l.constprop.0+0xd8>
 800aece:	f8c8 1000 	str.w	r1, [r8]
 800aed2:	e794      	b.n	800adfe <_strtol_l.constprop.0+0x1a>
 800aed4:	0800cb69 	.word	0x0800cb69

0800aed8 <_strtol_r>:
 800aed8:	f7ff bf84 	b.w	800ade4 <_strtol_l.constprop.0>

0800aedc <__ssputs_r>:
 800aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	688e      	ldr	r6, [r1, #8]
 800aee2:	461f      	mov	r7, r3
 800aee4:	42be      	cmp	r6, r7
 800aee6:	680b      	ldr	r3, [r1, #0]
 800aee8:	4682      	mov	sl, r0
 800aeea:	460c      	mov	r4, r1
 800aeec:	4690      	mov	r8, r2
 800aeee:	d82d      	bhi.n	800af4c <__ssputs_r+0x70>
 800aef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aef4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aef8:	d026      	beq.n	800af48 <__ssputs_r+0x6c>
 800aefa:	6965      	ldr	r5, [r4, #20]
 800aefc:	6909      	ldr	r1, [r1, #16]
 800aefe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af02:	eba3 0901 	sub.w	r9, r3, r1
 800af06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af0a:	1c7b      	adds	r3, r7, #1
 800af0c:	444b      	add	r3, r9
 800af0e:	106d      	asrs	r5, r5, #1
 800af10:	429d      	cmp	r5, r3
 800af12:	bf38      	it	cc
 800af14:	461d      	movcc	r5, r3
 800af16:	0553      	lsls	r3, r2, #21
 800af18:	d527      	bpl.n	800af6a <__ssputs_r+0x8e>
 800af1a:	4629      	mov	r1, r5
 800af1c:	f7fe fc1c 	bl	8009758 <_malloc_r>
 800af20:	4606      	mov	r6, r0
 800af22:	b360      	cbz	r0, 800af7e <__ssputs_r+0xa2>
 800af24:	6921      	ldr	r1, [r4, #16]
 800af26:	464a      	mov	r2, r9
 800af28:	f7fd fd41 	bl	80089ae <memcpy>
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	6126      	str	r6, [r4, #16]
 800af3a:	6165      	str	r5, [r4, #20]
 800af3c:	444e      	add	r6, r9
 800af3e:	eba5 0509 	sub.w	r5, r5, r9
 800af42:	6026      	str	r6, [r4, #0]
 800af44:	60a5      	str	r5, [r4, #8]
 800af46:	463e      	mov	r6, r7
 800af48:	42be      	cmp	r6, r7
 800af4a:	d900      	bls.n	800af4e <__ssputs_r+0x72>
 800af4c:	463e      	mov	r6, r7
 800af4e:	6820      	ldr	r0, [r4, #0]
 800af50:	4632      	mov	r2, r6
 800af52:	4641      	mov	r1, r8
 800af54:	f000 ff2a 	bl	800bdac <memmove>
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	1b9b      	subs	r3, r3, r6
 800af5c:	60a3      	str	r3, [r4, #8]
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	4433      	add	r3, r6
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	2000      	movs	r0, #0
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6a:	462a      	mov	r2, r5
 800af6c:	f001 fae1 	bl	800c532 <_realloc_r>
 800af70:	4606      	mov	r6, r0
 800af72:	2800      	cmp	r0, #0
 800af74:	d1e0      	bne.n	800af38 <__ssputs_r+0x5c>
 800af76:	6921      	ldr	r1, [r4, #16]
 800af78:	4650      	mov	r0, sl
 800af7a:	f7fe fb79 	bl	8009670 <_free_r>
 800af7e:	230c      	movs	r3, #12
 800af80:	f8ca 3000 	str.w	r3, [sl]
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af8a:	81a3      	strh	r3, [r4, #12]
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295
 800af90:	e7e9      	b.n	800af66 <__ssputs_r+0x8a>
	...

0800af94 <_svfiprintf_r>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	4698      	mov	r8, r3
 800af9a:	898b      	ldrh	r3, [r1, #12]
 800af9c:	061b      	lsls	r3, r3, #24
 800af9e:	b09d      	sub	sp, #116	@ 0x74
 800afa0:	4607      	mov	r7, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	d510      	bpl.n	800afca <_svfiprintf_r+0x36>
 800afa8:	690b      	ldr	r3, [r1, #16]
 800afaa:	b973      	cbnz	r3, 800afca <_svfiprintf_r+0x36>
 800afac:	2140      	movs	r1, #64	@ 0x40
 800afae:	f7fe fbd3 	bl	8009758 <_malloc_r>
 800afb2:	6028      	str	r0, [r5, #0]
 800afb4:	6128      	str	r0, [r5, #16]
 800afb6:	b930      	cbnz	r0, 800afc6 <_svfiprintf_r+0x32>
 800afb8:	230c      	movs	r3, #12
 800afba:	603b      	str	r3, [r7, #0]
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295
 800afc0:	b01d      	add	sp, #116	@ 0x74
 800afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc6:	2340      	movs	r3, #64	@ 0x40
 800afc8:	616b      	str	r3, [r5, #20]
 800afca:	2300      	movs	r3, #0
 800afcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afce:	2320      	movs	r3, #32
 800afd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd8:	2330      	movs	r3, #48	@ 0x30
 800afda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b178 <_svfiprintf_r+0x1e4>
 800afde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afe2:	f04f 0901 	mov.w	r9, #1
 800afe6:	4623      	mov	r3, r4
 800afe8:	469a      	mov	sl, r3
 800afea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afee:	b10a      	cbz	r2, 800aff4 <_svfiprintf_r+0x60>
 800aff0:	2a25      	cmp	r2, #37	@ 0x25
 800aff2:	d1f9      	bne.n	800afe8 <_svfiprintf_r+0x54>
 800aff4:	ebba 0b04 	subs.w	fp, sl, r4
 800aff8:	d00b      	beq.n	800b012 <_svfiprintf_r+0x7e>
 800affa:	465b      	mov	r3, fp
 800affc:	4622      	mov	r2, r4
 800affe:	4629      	mov	r1, r5
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff ff6b 	bl	800aedc <__ssputs_r>
 800b006:	3001      	adds	r0, #1
 800b008:	f000 80a7 	beq.w	800b15a <_svfiprintf_r+0x1c6>
 800b00c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b00e:	445a      	add	r2, fp
 800b010:	9209      	str	r2, [sp, #36]	@ 0x24
 800b012:	f89a 3000 	ldrb.w	r3, [sl]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 809f 	beq.w	800b15a <_svfiprintf_r+0x1c6>
 800b01c:	2300      	movs	r3, #0
 800b01e:	f04f 32ff 	mov.w	r2, #4294967295
 800b022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b026:	f10a 0a01 	add.w	sl, sl, #1
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	9307      	str	r3, [sp, #28]
 800b02e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b032:	931a      	str	r3, [sp, #104]	@ 0x68
 800b034:	4654      	mov	r4, sl
 800b036:	2205      	movs	r2, #5
 800b038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03c:	484e      	ldr	r0, [pc, #312]	@ (800b178 <_svfiprintf_r+0x1e4>)
 800b03e:	f7f5 f8c7 	bl	80001d0 <memchr>
 800b042:	9a04      	ldr	r2, [sp, #16]
 800b044:	b9d8      	cbnz	r0, 800b07e <_svfiprintf_r+0xea>
 800b046:	06d0      	lsls	r0, r2, #27
 800b048:	bf44      	itt	mi
 800b04a:	2320      	movmi	r3, #32
 800b04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b050:	0711      	lsls	r1, r2, #28
 800b052:	bf44      	itt	mi
 800b054:	232b      	movmi	r3, #43	@ 0x2b
 800b056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b05a:	f89a 3000 	ldrb.w	r3, [sl]
 800b05e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b060:	d015      	beq.n	800b08e <_svfiprintf_r+0xfa>
 800b062:	9a07      	ldr	r2, [sp, #28]
 800b064:	4654      	mov	r4, sl
 800b066:	2000      	movs	r0, #0
 800b068:	f04f 0c0a 	mov.w	ip, #10
 800b06c:	4621      	mov	r1, r4
 800b06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b072:	3b30      	subs	r3, #48	@ 0x30
 800b074:	2b09      	cmp	r3, #9
 800b076:	d94b      	bls.n	800b110 <_svfiprintf_r+0x17c>
 800b078:	b1b0      	cbz	r0, 800b0a8 <_svfiprintf_r+0x114>
 800b07a:	9207      	str	r2, [sp, #28]
 800b07c:	e014      	b.n	800b0a8 <_svfiprintf_r+0x114>
 800b07e:	eba0 0308 	sub.w	r3, r0, r8
 800b082:	fa09 f303 	lsl.w	r3, r9, r3
 800b086:	4313      	orrs	r3, r2
 800b088:	9304      	str	r3, [sp, #16]
 800b08a:	46a2      	mov	sl, r4
 800b08c:	e7d2      	b.n	800b034 <_svfiprintf_r+0xa0>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	1d19      	adds	r1, r3, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	9103      	str	r1, [sp, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bfbb      	ittet	lt
 800b09a:	425b      	neglt	r3, r3
 800b09c:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a0:	9307      	strge	r3, [sp, #28]
 800b0a2:	9307      	strlt	r3, [sp, #28]
 800b0a4:	bfb8      	it	lt
 800b0a6:	9204      	strlt	r2, [sp, #16]
 800b0a8:	7823      	ldrb	r3, [r4, #0]
 800b0aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0ac:	d10a      	bne.n	800b0c4 <_svfiprintf_r+0x130>
 800b0ae:	7863      	ldrb	r3, [r4, #1]
 800b0b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0b2:	d132      	bne.n	800b11a <_svfiprintf_r+0x186>
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	1d1a      	adds	r2, r3, #4
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	9203      	str	r2, [sp, #12]
 800b0bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0c0:	3402      	adds	r4, #2
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b188 <_svfiprintf_r+0x1f4>
 800b0c8:	7821      	ldrb	r1, [r4, #0]
 800b0ca:	2203      	movs	r2, #3
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	f7f5 f87f 	bl	80001d0 <memchr>
 800b0d2:	b138      	cbz	r0, 800b0e4 <_svfiprintf_r+0x150>
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	eba0 000a 	sub.w	r0, r0, sl
 800b0da:	2240      	movs	r2, #64	@ 0x40
 800b0dc:	4082      	lsls	r2, r0
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	3401      	adds	r4, #1
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e8:	4824      	ldr	r0, [pc, #144]	@ (800b17c <_svfiprintf_r+0x1e8>)
 800b0ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0ee:	2206      	movs	r2, #6
 800b0f0:	f7f5 f86e 	bl	80001d0 <memchr>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d036      	beq.n	800b166 <_svfiprintf_r+0x1d2>
 800b0f8:	4b21      	ldr	r3, [pc, #132]	@ (800b180 <_svfiprintf_r+0x1ec>)
 800b0fa:	bb1b      	cbnz	r3, 800b144 <_svfiprintf_r+0x1b0>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	3307      	adds	r3, #7
 800b100:	f023 0307 	bic.w	r3, r3, #7
 800b104:	3308      	adds	r3, #8
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10a:	4433      	add	r3, r6
 800b10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b10e:	e76a      	b.n	800afe6 <_svfiprintf_r+0x52>
 800b110:	fb0c 3202 	mla	r2, ip, r2, r3
 800b114:	460c      	mov	r4, r1
 800b116:	2001      	movs	r0, #1
 800b118:	e7a8      	b.n	800b06c <_svfiprintf_r+0xd8>
 800b11a:	2300      	movs	r3, #0
 800b11c:	3401      	adds	r4, #1
 800b11e:	9305      	str	r3, [sp, #20]
 800b120:	4619      	mov	r1, r3
 800b122:	f04f 0c0a 	mov.w	ip, #10
 800b126:	4620      	mov	r0, r4
 800b128:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b12c:	3a30      	subs	r2, #48	@ 0x30
 800b12e:	2a09      	cmp	r2, #9
 800b130:	d903      	bls.n	800b13a <_svfiprintf_r+0x1a6>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d0c6      	beq.n	800b0c4 <_svfiprintf_r+0x130>
 800b136:	9105      	str	r1, [sp, #20]
 800b138:	e7c4      	b.n	800b0c4 <_svfiprintf_r+0x130>
 800b13a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b13e:	4604      	mov	r4, r0
 800b140:	2301      	movs	r3, #1
 800b142:	e7f0      	b.n	800b126 <_svfiprintf_r+0x192>
 800b144:	ab03      	add	r3, sp, #12
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	462a      	mov	r2, r5
 800b14a:	4b0e      	ldr	r3, [pc, #56]	@ (800b184 <_svfiprintf_r+0x1f0>)
 800b14c:	a904      	add	r1, sp, #16
 800b14e:	4638      	mov	r0, r7
 800b150:	f7fc fc7e 	bl	8007a50 <_printf_float>
 800b154:	1c42      	adds	r2, r0, #1
 800b156:	4606      	mov	r6, r0
 800b158:	d1d6      	bne.n	800b108 <_svfiprintf_r+0x174>
 800b15a:	89ab      	ldrh	r3, [r5, #12]
 800b15c:	065b      	lsls	r3, r3, #25
 800b15e:	f53f af2d 	bmi.w	800afbc <_svfiprintf_r+0x28>
 800b162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b164:	e72c      	b.n	800afc0 <_svfiprintf_r+0x2c>
 800b166:	ab03      	add	r3, sp, #12
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	462a      	mov	r2, r5
 800b16c:	4b05      	ldr	r3, [pc, #20]	@ (800b184 <_svfiprintf_r+0x1f0>)
 800b16e:	a904      	add	r1, sp, #16
 800b170:	4638      	mov	r0, r7
 800b172:	f7fc ff05 	bl	8007f80 <_printf_i>
 800b176:	e7ed      	b.n	800b154 <_svfiprintf_r+0x1c0>
 800b178:	0800cc69 	.word	0x0800cc69
 800b17c:	0800cc73 	.word	0x0800cc73
 800b180:	08007a51 	.word	0x08007a51
 800b184:	0800aedd 	.word	0x0800aedd
 800b188:	0800cc6f 	.word	0x0800cc6f

0800b18c <_sungetc_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	1c4b      	adds	r3, r1, #1
 800b190:	4614      	mov	r4, r2
 800b192:	d103      	bne.n	800b19c <_sungetc_r+0x10>
 800b194:	f04f 35ff 	mov.w	r5, #4294967295
 800b198:	4628      	mov	r0, r5
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	8993      	ldrh	r3, [r2, #12]
 800b19e:	f023 0320 	bic.w	r3, r3, #32
 800b1a2:	8193      	strh	r3, [r2, #12]
 800b1a4:	6853      	ldr	r3, [r2, #4]
 800b1a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b1a8:	b2cd      	uxtb	r5, r1
 800b1aa:	b18a      	cbz	r2, 800b1d0 <_sungetc_r+0x44>
 800b1ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	dd08      	ble.n	800b1c4 <_sungetc_r+0x38>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	1e5a      	subs	r2, r3, #1
 800b1b6:	6022      	str	r2, [r4, #0]
 800b1b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b1bc:	6863      	ldr	r3, [r4, #4]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	6063      	str	r3, [r4, #4]
 800b1c2:	e7e9      	b.n	800b198 <_sungetc_r+0xc>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	f000 fd22 	bl	800bc0e <__submore>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0f1      	beq.n	800b1b2 <_sungetc_r+0x26>
 800b1ce:	e7e1      	b.n	800b194 <_sungetc_r+0x8>
 800b1d0:	6921      	ldr	r1, [r4, #16]
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	b141      	cbz	r1, 800b1e8 <_sungetc_r+0x5c>
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	d206      	bcs.n	800b1e8 <_sungetc_r+0x5c>
 800b1da:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800b1de:	42a9      	cmp	r1, r5
 800b1e0:	d102      	bne.n	800b1e8 <_sungetc_r+0x5c>
 800b1e2:	3a01      	subs	r2, #1
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	e7ea      	b.n	800b1be <_sungetc_r+0x32>
 800b1e8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800b1ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b1f6:	4623      	mov	r3, r4
 800b1f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b1fc:	6023      	str	r3, [r4, #0]
 800b1fe:	2301      	movs	r3, #1
 800b200:	e7de      	b.n	800b1c0 <_sungetc_r+0x34>

0800b202 <__ssrefill_r>:
 800b202:	b510      	push	{r4, lr}
 800b204:	460c      	mov	r4, r1
 800b206:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b208:	b169      	cbz	r1, 800b226 <__ssrefill_r+0x24>
 800b20a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b20e:	4299      	cmp	r1, r3
 800b210:	d001      	beq.n	800b216 <__ssrefill_r+0x14>
 800b212:	f7fe fa2d 	bl	8009670 <_free_r>
 800b216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b218:	6063      	str	r3, [r4, #4]
 800b21a:	2000      	movs	r0, #0
 800b21c:	6360      	str	r0, [r4, #52]	@ 0x34
 800b21e:	b113      	cbz	r3, 800b226 <__ssrefill_r+0x24>
 800b220:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	bd10      	pop	{r4, pc}
 800b226:	6923      	ldr	r3, [r4, #16]
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	2300      	movs	r3, #0
 800b22c:	6063      	str	r3, [r4, #4]
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	f043 0320 	orr.w	r3, r3, #32
 800b234:	81a3      	strh	r3, [r4, #12]
 800b236:	f04f 30ff 	mov.w	r0, #4294967295
 800b23a:	e7f3      	b.n	800b224 <__ssrefill_r+0x22>

0800b23c <__ssvfiscanf_r>:
 800b23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b240:	460c      	mov	r4, r1
 800b242:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b246:	2100      	movs	r1, #0
 800b248:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800b24c:	49a5      	ldr	r1, [pc, #660]	@ (800b4e4 <__ssvfiscanf_r+0x2a8>)
 800b24e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b250:	f10d 0804 	add.w	r8, sp, #4
 800b254:	49a4      	ldr	r1, [pc, #656]	@ (800b4e8 <__ssvfiscanf_r+0x2ac>)
 800b256:	4fa5      	ldr	r7, [pc, #660]	@ (800b4ec <__ssvfiscanf_r+0x2b0>)
 800b258:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b25c:	4606      	mov	r6, r0
 800b25e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	7813      	ldrb	r3, [r2, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 8158 	beq.w	800b51a <__ssvfiscanf_r+0x2de>
 800b26a:	5cf9      	ldrb	r1, [r7, r3]
 800b26c:	f011 0108 	ands.w	r1, r1, #8
 800b270:	f102 0501 	add.w	r5, r2, #1
 800b274:	d019      	beq.n	800b2aa <__ssvfiscanf_r+0x6e>
 800b276:	6863      	ldr	r3, [r4, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	dd0f      	ble.n	800b29c <__ssvfiscanf_r+0x60>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	5cba      	ldrb	r2, [r7, r2]
 800b282:	0712      	lsls	r2, r2, #28
 800b284:	d401      	bmi.n	800b28a <__ssvfiscanf_r+0x4e>
 800b286:	462a      	mov	r2, r5
 800b288:	e7eb      	b.n	800b262 <__ssvfiscanf_r+0x26>
 800b28a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b28c:	3201      	adds	r2, #1
 800b28e:	9245      	str	r2, [sp, #276]	@ 0x114
 800b290:	6862      	ldr	r2, [r4, #4]
 800b292:	3301      	adds	r3, #1
 800b294:	3a01      	subs	r2, #1
 800b296:	6062      	str	r2, [r4, #4]
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	e7ec      	b.n	800b276 <__ssvfiscanf_r+0x3a>
 800b29c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4798      	blx	r3
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d0e9      	beq.n	800b27c <__ssvfiscanf_r+0x40>
 800b2a8:	e7ed      	b.n	800b286 <__ssvfiscanf_r+0x4a>
 800b2aa:	2b25      	cmp	r3, #37	@ 0x25
 800b2ac:	d012      	beq.n	800b2d4 <__ssvfiscanf_r+0x98>
 800b2ae:	4699      	mov	r9, r3
 800b2b0:	6863      	ldr	r3, [r4, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f340 8093 	ble.w	800b3de <__ssvfiscanf_r+0x1a2>
 800b2b8:	6822      	ldr	r2, [r4, #0]
 800b2ba:	7813      	ldrb	r3, [r2, #0]
 800b2bc:	454b      	cmp	r3, r9
 800b2be:	f040 812c 	bne.w	800b51a <__ssvfiscanf_r+0x2de>
 800b2c2:	6863      	ldr	r3, [r4, #4]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	6063      	str	r3, [r4, #4]
 800b2c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	6022      	str	r2, [r4, #0]
 800b2d0:	9345      	str	r3, [sp, #276]	@ 0x114
 800b2d2:	e7d8      	b.n	800b286 <__ssvfiscanf_r+0x4a>
 800b2d4:	9141      	str	r1, [sp, #260]	@ 0x104
 800b2d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b2d8:	7853      	ldrb	r3, [r2, #1]
 800b2da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2dc:	bf02      	ittt	eq
 800b2de:	2310      	moveq	r3, #16
 800b2e0:	1c95      	addeq	r5, r2, #2
 800b2e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b2e4:	220a      	movs	r2, #10
 800b2e6:	46a9      	mov	r9, r5
 800b2e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b2ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b2f0:	2b09      	cmp	r3, #9
 800b2f2:	d91e      	bls.n	800b332 <__ssvfiscanf_r+0xf6>
 800b2f4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b4f0 <__ssvfiscanf_r+0x2b4>
 800b2f8:	2203      	movs	r2, #3
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	f7f4 ff68 	bl	80001d0 <memchr>
 800b300:	b138      	cbz	r0, 800b312 <__ssvfiscanf_r+0xd6>
 800b302:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b304:	eba0 000a 	sub.w	r0, r0, sl
 800b308:	2301      	movs	r3, #1
 800b30a:	4083      	lsls	r3, r0
 800b30c:	4313      	orrs	r3, r2
 800b30e:	9341      	str	r3, [sp, #260]	@ 0x104
 800b310:	464d      	mov	r5, r9
 800b312:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b316:	2b78      	cmp	r3, #120	@ 0x78
 800b318:	d806      	bhi.n	800b328 <__ssvfiscanf_r+0xec>
 800b31a:	2b57      	cmp	r3, #87	@ 0x57
 800b31c:	d810      	bhi.n	800b340 <__ssvfiscanf_r+0x104>
 800b31e:	2b25      	cmp	r3, #37	@ 0x25
 800b320:	d0c5      	beq.n	800b2ae <__ssvfiscanf_r+0x72>
 800b322:	d857      	bhi.n	800b3d4 <__ssvfiscanf_r+0x198>
 800b324:	2b00      	cmp	r3, #0
 800b326:	d065      	beq.n	800b3f4 <__ssvfiscanf_r+0x1b8>
 800b328:	2303      	movs	r3, #3
 800b32a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b32c:	230a      	movs	r3, #10
 800b32e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b330:	e078      	b.n	800b424 <__ssvfiscanf_r+0x1e8>
 800b332:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b334:	fb02 1103 	mla	r1, r2, r3, r1
 800b338:	3930      	subs	r1, #48	@ 0x30
 800b33a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b33c:	464d      	mov	r5, r9
 800b33e:	e7d2      	b.n	800b2e6 <__ssvfiscanf_r+0xaa>
 800b340:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b344:	2a20      	cmp	r2, #32
 800b346:	d8ef      	bhi.n	800b328 <__ssvfiscanf_r+0xec>
 800b348:	a101      	add	r1, pc, #4	@ (adr r1, 800b350 <__ssvfiscanf_r+0x114>)
 800b34a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b34e:	bf00      	nop
 800b350:	0800b403 	.word	0x0800b403
 800b354:	0800b329 	.word	0x0800b329
 800b358:	0800b329 	.word	0x0800b329
 800b35c:	0800b45d 	.word	0x0800b45d
 800b360:	0800b329 	.word	0x0800b329
 800b364:	0800b329 	.word	0x0800b329
 800b368:	0800b329 	.word	0x0800b329
 800b36c:	0800b329 	.word	0x0800b329
 800b370:	0800b329 	.word	0x0800b329
 800b374:	0800b329 	.word	0x0800b329
 800b378:	0800b329 	.word	0x0800b329
 800b37c:	0800b473 	.word	0x0800b473
 800b380:	0800b459 	.word	0x0800b459
 800b384:	0800b3db 	.word	0x0800b3db
 800b388:	0800b3db 	.word	0x0800b3db
 800b38c:	0800b3db 	.word	0x0800b3db
 800b390:	0800b329 	.word	0x0800b329
 800b394:	0800b415 	.word	0x0800b415
 800b398:	0800b329 	.word	0x0800b329
 800b39c:	0800b329 	.word	0x0800b329
 800b3a0:	0800b329 	.word	0x0800b329
 800b3a4:	0800b329 	.word	0x0800b329
 800b3a8:	0800b483 	.word	0x0800b483
 800b3ac:	0800b41d 	.word	0x0800b41d
 800b3b0:	0800b3fb 	.word	0x0800b3fb
 800b3b4:	0800b329 	.word	0x0800b329
 800b3b8:	0800b329 	.word	0x0800b329
 800b3bc:	0800b47f 	.word	0x0800b47f
 800b3c0:	0800b329 	.word	0x0800b329
 800b3c4:	0800b459 	.word	0x0800b459
 800b3c8:	0800b329 	.word	0x0800b329
 800b3cc:	0800b329 	.word	0x0800b329
 800b3d0:	0800b403 	.word	0x0800b403
 800b3d4:	3b45      	subs	r3, #69	@ 0x45
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d8a6      	bhi.n	800b328 <__ssvfiscanf_r+0xec>
 800b3da:	2305      	movs	r3, #5
 800b3dc:	e021      	b.n	800b422 <__ssvfiscanf_r+0x1e6>
 800b3de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4798      	blx	r3
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f43f af66 	beq.w	800b2b8 <__ssvfiscanf_r+0x7c>
 800b3ec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	f040 808b 	bne.w	800b50a <__ssvfiscanf_r+0x2ce>
 800b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f8:	e08b      	b.n	800b512 <__ssvfiscanf_r+0x2d6>
 800b3fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b3fc:	f042 0220 	orr.w	r2, r2, #32
 800b400:	9241      	str	r2, [sp, #260]	@ 0x104
 800b402:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b408:	9241      	str	r2, [sp, #260]	@ 0x104
 800b40a:	2210      	movs	r2, #16
 800b40c:	2b6e      	cmp	r3, #110	@ 0x6e
 800b40e:	9242      	str	r2, [sp, #264]	@ 0x108
 800b410:	d902      	bls.n	800b418 <__ssvfiscanf_r+0x1dc>
 800b412:	e005      	b.n	800b420 <__ssvfiscanf_r+0x1e4>
 800b414:	2300      	movs	r3, #0
 800b416:	9342      	str	r3, [sp, #264]	@ 0x108
 800b418:	2303      	movs	r3, #3
 800b41a:	e002      	b.n	800b422 <__ssvfiscanf_r+0x1e6>
 800b41c:	2308      	movs	r3, #8
 800b41e:	9342      	str	r3, [sp, #264]	@ 0x108
 800b420:	2304      	movs	r3, #4
 800b422:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b424:	6863      	ldr	r3, [r4, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	dd39      	ble.n	800b49e <__ssvfiscanf_r+0x262>
 800b42a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b42c:	0659      	lsls	r1, r3, #25
 800b42e:	d404      	bmi.n	800b43a <__ssvfiscanf_r+0x1fe>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	5cba      	ldrb	r2, [r7, r2]
 800b436:	0712      	lsls	r2, r2, #28
 800b438:	d438      	bmi.n	800b4ac <__ssvfiscanf_r+0x270>
 800b43a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	dc47      	bgt.n	800b4d0 <__ssvfiscanf_r+0x294>
 800b440:	466b      	mov	r3, sp
 800b442:	4622      	mov	r2, r4
 800b444:	a941      	add	r1, sp, #260	@ 0x104
 800b446:	4630      	mov	r0, r6
 800b448:	f000 f9ae 	bl	800b7a8 <_scanf_chars>
 800b44c:	2801      	cmp	r0, #1
 800b44e:	d064      	beq.n	800b51a <__ssvfiscanf_r+0x2de>
 800b450:	2802      	cmp	r0, #2
 800b452:	f47f af18 	bne.w	800b286 <__ssvfiscanf_r+0x4a>
 800b456:	e7c9      	b.n	800b3ec <__ssvfiscanf_r+0x1b0>
 800b458:	220a      	movs	r2, #10
 800b45a:	e7d7      	b.n	800b40c <__ssvfiscanf_r+0x1d0>
 800b45c:	4629      	mov	r1, r5
 800b45e:	4640      	mov	r0, r8
 800b460:	f000 fb9c 	bl	800bb9c <__sccl>
 800b464:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b46a:	9341      	str	r3, [sp, #260]	@ 0x104
 800b46c:	4605      	mov	r5, r0
 800b46e:	2301      	movs	r3, #1
 800b470:	e7d7      	b.n	800b422 <__ssvfiscanf_r+0x1e6>
 800b472:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b478:	9341      	str	r3, [sp, #260]	@ 0x104
 800b47a:	2300      	movs	r3, #0
 800b47c:	e7d1      	b.n	800b422 <__ssvfiscanf_r+0x1e6>
 800b47e:	2302      	movs	r3, #2
 800b480:	e7cf      	b.n	800b422 <__ssvfiscanf_r+0x1e6>
 800b482:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b484:	06c3      	lsls	r3, r0, #27
 800b486:	f53f aefe 	bmi.w	800b286 <__ssvfiscanf_r+0x4a>
 800b48a:	9b00      	ldr	r3, [sp, #0]
 800b48c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b48e:	1d19      	adds	r1, r3, #4
 800b490:	9100      	str	r1, [sp, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	07c0      	lsls	r0, r0, #31
 800b496:	bf4c      	ite	mi
 800b498:	801a      	strhmi	r2, [r3, #0]
 800b49a:	601a      	strpl	r2, [r3, #0]
 800b49c:	e6f3      	b.n	800b286 <__ssvfiscanf_r+0x4a>
 800b49e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	4798      	blx	r3
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0bf      	beq.n	800b42a <__ssvfiscanf_r+0x1ee>
 800b4aa:	e79f      	b.n	800b3ec <__ssvfiscanf_r+0x1b0>
 800b4ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b4ae:	3201      	adds	r2, #1
 800b4b0:	9245      	str	r2, [sp, #276]	@ 0x114
 800b4b2:	6862      	ldr	r2, [r4, #4]
 800b4b4:	3a01      	subs	r2, #1
 800b4b6:	2a00      	cmp	r2, #0
 800b4b8:	6062      	str	r2, [r4, #4]
 800b4ba:	dd02      	ble.n	800b4c2 <__ssvfiscanf_r+0x286>
 800b4bc:	3301      	adds	r3, #1
 800b4be:	6023      	str	r3, [r4, #0]
 800b4c0:	e7b6      	b.n	800b430 <__ssvfiscanf_r+0x1f4>
 800b4c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	4798      	blx	r3
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0b0      	beq.n	800b430 <__ssvfiscanf_r+0x1f4>
 800b4ce:	e78d      	b.n	800b3ec <__ssvfiscanf_r+0x1b0>
 800b4d0:	2b04      	cmp	r3, #4
 800b4d2:	dc0f      	bgt.n	800b4f4 <__ssvfiscanf_r+0x2b8>
 800b4d4:	466b      	mov	r3, sp
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	a941      	add	r1, sp, #260	@ 0x104
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f000 f9be 	bl	800b85c <_scanf_i>
 800b4e0:	e7b4      	b.n	800b44c <__ssvfiscanf_r+0x210>
 800b4e2:	bf00      	nop
 800b4e4:	0800b18d 	.word	0x0800b18d
 800b4e8:	0800b203 	.word	0x0800b203
 800b4ec:	0800cb69 	.word	0x0800cb69
 800b4f0:	0800cc6f 	.word	0x0800cc6f
 800b4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b520 <__ssvfiscanf_r+0x2e4>)
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f43f aec5 	beq.w	800b286 <__ssvfiscanf_r+0x4a>
 800b4fc:	466b      	mov	r3, sp
 800b4fe:	4622      	mov	r2, r4
 800b500:	a941      	add	r1, sp, #260	@ 0x104
 800b502:	4630      	mov	r0, r6
 800b504:	f7fc fe5c 	bl	80081c0 <_scanf_float>
 800b508:	e7a0      	b.n	800b44c <__ssvfiscanf_r+0x210>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	065b      	lsls	r3, r3, #25
 800b50e:	f53f af71 	bmi.w	800b3f4 <__ssvfiscanf_r+0x1b8>
 800b512:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b51c:	e7f9      	b.n	800b512 <__ssvfiscanf_r+0x2d6>
 800b51e:	bf00      	nop
 800b520:	080081c1 	.word	0x080081c1

0800b524 <__sfputc_r>:
 800b524:	6893      	ldr	r3, [r2, #8]
 800b526:	3b01      	subs	r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	b410      	push	{r4}
 800b52c:	6093      	str	r3, [r2, #8]
 800b52e:	da08      	bge.n	800b542 <__sfputc_r+0x1e>
 800b530:	6994      	ldr	r4, [r2, #24]
 800b532:	42a3      	cmp	r3, r4
 800b534:	db01      	blt.n	800b53a <__sfputc_r+0x16>
 800b536:	290a      	cmp	r1, #10
 800b538:	d103      	bne.n	800b542 <__sfputc_r+0x1e>
 800b53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b53e:	f000 bba0 	b.w	800bc82 <__swbuf_r>
 800b542:	6813      	ldr	r3, [r2, #0]
 800b544:	1c58      	adds	r0, r3, #1
 800b546:	6010      	str	r0, [r2, #0]
 800b548:	7019      	strb	r1, [r3, #0]
 800b54a:	4608      	mov	r0, r1
 800b54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <__sfputs_r>:
 800b552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b554:	4606      	mov	r6, r0
 800b556:	460f      	mov	r7, r1
 800b558:	4614      	mov	r4, r2
 800b55a:	18d5      	adds	r5, r2, r3
 800b55c:	42ac      	cmp	r4, r5
 800b55e:	d101      	bne.n	800b564 <__sfputs_r+0x12>
 800b560:	2000      	movs	r0, #0
 800b562:	e007      	b.n	800b574 <__sfputs_r+0x22>
 800b564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b568:	463a      	mov	r2, r7
 800b56a:	4630      	mov	r0, r6
 800b56c:	f7ff ffda 	bl	800b524 <__sfputc_r>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d1f3      	bne.n	800b55c <__sfputs_r+0xa>
 800b574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b578 <_vfiprintf_r>:
 800b578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b57c:	460d      	mov	r5, r1
 800b57e:	b09d      	sub	sp, #116	@ 0x74
 800b580:	4614      	mov	r4, r2
 800b582:	4698      	mov	r8, r3
 800b584:	4606      	mov	r6, r0
 800b586:	b118      	cbz	r0, 800b590 <_vfiprintf_r+0x18>
 800b588:	6a03      	ldr	r3, [r0, #32]
 800b58a:	b90b      	cbnz	r3, 800b590 <_vfiprintf_r+0x18>
 800b58c:	f7fd f8b8 	bl	8008700 <__sinit>
 800b590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b592:	07d9      	lsls	r1, r3, #31
 800b594:	d405      	bmi.n	800b5a2 <_vfiprintf_r+0x2a>
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	059a      	lsls	r2, r3, #22
 800b59a:	d402      	bmi.n	800b5a2 <_vfiprintf_r+0x2a>
 800b59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b59e:	f7fd fa04 	bl	80089aa <__retarget_lock_acquire_recursive>
 800b5a2:	89ab      	ldrh	r3, [r5, #12]
 800b5a4:	071b      	lsls	r3, r3, #28
 800b5a6:	d501      	bpl.n	800b5ac <_vfiprintf_r+0x34>
 800b5a8:	692b      	ldr	r3, [r5, #16]
 800b5aa:	b99b      	cbnz	r3, 800b5d4 <_vfiprintf_r+0x5c>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f000 fba6 	bl	800bd00 <__swsetup_r>
 800b5b4:	b170      	cbz	r0, 800b5d4 <_vfiprintf_r+0x5c>
 800b5b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5b8:	07dc      	lsls	r4, r3, #31
 800b5ba:	d504      	bpl.n	800b5c6 <_vfiprintf_r+0x4e>
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	b01d      	add	sp, #116	@ 0x74
 800b5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c6:	89ab      	ldrh	r3, [r5, #12]
 800b5c8:	0598      	lsls	r0, r3, #22
 800b5ca:	d4f7      	bmi.n	800b5bc <_vfiprintf_r+0x44>
 800b5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ce:	f7fd f9ed 	bl	80089ac <__retarget_lock_release_recursive>
 800b5d2:	e7f3      	b.n	800b5bc <_vfiprintf_r+0x44>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d8:	2320      	movs	r3, #32
 800b5da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5e2:	2330      	movs	r3, #48	@ 0x30
 800b5e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b794 <_vfiprintf_r+0x21c>
 800b5e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5ec:	f04f 0901 	mov.w	r9, #1
 800b5f0:	4623      	mov	r3, r4
 800b5f2:	469a      	mov	sl, r3
 800b5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5f8:	b10a      	cbz	r2, 800b5fe <_vfiprintf_r+0x86>
 800b5fa:	2a25      	cmp	r2, #37	@ 0x25
 800b5fc:	d1f9      	bne.n	800b5f2 <_vfiprintf_r+0x7a>
 800b5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b602:	d00b      	beq.n	800b61c <_vfiprintf_r+0xa4>
 800b604:	465b      	mov	r3, fp
 800b606:	4622      	mov	r2, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	f7ff ffa1 	bl	800b552 <__sfputs_r>
 800b610:	3001      	adds	r0, #1
 800b612:	f000 80a7 	beq.w	800b764 <_vfiprintf_r+0x1ec>
 800b616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b618:	445a      	add	r2, fp
 800b61a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b61c:	f89a 3000 	ldrb.w	r3, [sl]
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 809f 	beq.w	800b764 <_vfiprintf_r+0x1ec>
 800b626:	2300      	movs	r3, #0
 800b628:	f04f 32ff 	mov.w	r2, #4294967295
 800b62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b630:	f10a 0a01 	add.w	sl, sl, #1
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	9307      	str	r3, [sp, #28]
 800b638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b63c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b63e:	4654      	mov	r4, sl
 800b640:	2205      	movs	r2, #5
 800b642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b646:	4853      	ldr	r0, [pc, #332]	@ (800b794 <_vfiprintf_r+0x21c>)
 800b648:	f7f4 fdc2 	bl	80001d0 <memchr>
 800b64c:	9a04      	ldr	r2, [sp, #16]
 800b64e:	b9d8      	cbnz	r0, 800b688 <_vfiprintf_r+0x110>
 800b650:	06d1      	lsls	r1, r2, #27
 800b652:	bf44      	itt	mi
 800b654:	2320      	movmi	r3, #32
 800b656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b65a:	0713      	lsls	r3, r2, #28
 800b65c:	bf44      	itt	mi
 800b65e:	232b      	movmi	r3, #43	@ 0x2b
 800b660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b664:	f89a 3000 	ldrb.w	r3, [sl]
 800b668:	2b2a      	cmp	r3, #42	@ 0x2a
 800b66a:	d015      	beq.n	800b698 <_vfiprintf_r+0x120>
 800b66c:	9a07      	ldr	r2, [sp, #28]
 800b66e:	4654      	mov	r4, sl
 800b670:	2000      	movs	r0, #0
 800b672:	f04f 0c0a 	mov.w	ip, #10
 800b676:	4621      	mov	r1, r4
 800b678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b67c:	3b30      	subs	r3, #48	@ 0x30
 800b67e:	2b09      	cmp	r3, #9
 800b680:	d94b      	bls.n	800b71a <_vfiprintf_r+0x1a2>
 800b682:	b1b0      	cbz	r0, 800b6b2 <_vfiprintf_r+0x13a>
 800b684:	9207      	str	r2, [sp, #28]
 800b686:	e014      	b.n	800b6b2 <_vfiprintf_r+0x13a>
 800b688:	eba0 0308 	sub.w	r3, r0, r8
 800b68c:	fa09 f303 	lsl.w	r3, r9, r3
 800b690:	4313      	orrs	r3, r2
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	46a2      	mov	sl, r4
 800b696:	e7d2      	b.n	800b63e <_vfiprintf_r+0xc6>
 800b698:	9b03      	ldr	r3, [sp, #12]
 800b69a:	1d19      	adds	r1, r3, #4
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	9103      	str	r1, [sp, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	bfbb      	ittet	lt
 800b6a4:	425b      	neglt	r3, r3
 800b6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b6aa:	9307      	strge	r3, [sp, #28]
 800b6ac:	9307      	strlt	r3, [sp, #28]
 800b6ae:	bfb8      	it	lt
 800b6b0:	9204      	strlt	r2, [sp, #16]
 800b6b2:	7823      	ldrb	r3, [r4, #0]
 800b6b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6b6:	d10a      	bne.n	800b6ce <_vfiprintf_r+0x156>
 800b6b8:	7863      	ldrb	r3, [r4, #1]
 800b6ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6bc:	d132      	bne.n	800b724 <_vfiprintf_r+0x1ac>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	1d1a      	adds	r2, r3, #4
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	9203      	str	r2, [sp, #12]
 800b6c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6ca:	3402      	adds	r4, #2
 800b6cc:	9305      	str	r3, [sp, #20]
 800b6ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7a4 <_vfiprintf_r+0x22c>
 800b6d2:	7821      	ldrb	r1, [r4, #0]
 800b6d4:	2203      	movs	r2, #3
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	f7f4 fd7a 	bl	80001d0 <memchr>
 800b6dc:	b138      	cbz	r0, 800b6ee <_vfiprintf_r+0x176>
 800b6de:	9b04      	ldr	r3, [sp, #16]
 800b6e0:	eba0 000a 	sub.w	r0, r0, sl
 800b6e4:	2240      	movs	r2, #64	@ 0x40
 800b6e6:	4082      	lsls	r2, r0
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	3401      	adds	r4, #1
 800b6ec:	9304      	str	r3, [sp, #16]
 800b6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f2:	4829      	ldr	r0, [pc, #164]	@ (800b798 <_vfiprintf_r+0x220>)
 800b6f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6f8:	2206      	movs	r2, #6
 800b6fa:	f7f4 fd69 	bl	80001d0 <memchr>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d03f      	beq.n	800b782 <_vfiprintf_r+0x20a>
 800b702:	4b26      	ldr	r3, [pc, #152]	@ (800b79c <_vfiprintf_r+0x224>)
 800b704:	bb1b      	cbnz	r3, 800b74e <_vfiprintf_r+0x1d6>
 800b706:	9b03      	ldr	r3, [sp, #12]
 800b708:	3307      	adds	r3, #7
 800b70a:	f023 0307 	bic.w	r3, r3, #7
 800b70e:	3308      	adds	r3, #8
 800b710:	9303      	str	r3, [sp, #12]
 800b712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b714:	443b      	add	r3, r7
 800b716:	9309      	str	r3, [sp, #36]	@ 0x24
 800b718:	e76a      	b.n	800b5f0 <_vfiprintf_r+0x78>
 800b71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b71e:	460c      	mov	r4, r1
 800b720:	2001      	movs	r0, #1
 800b722:	e7a8      	b.n	800b676 <_vfiprintf_r+0xfe>
 800b724:	2300      	movs	r3, #0
 800b726:	3401      	adds	r4, #1
 800b728:	9305      	str	r3, [sp, #20]
 800b72a:	4619      	mov	r1, r3
 800b72c:	f04f 0c0a 	mov.w	ip, #10
 800b730:	4620      	mov	r0, r4
 800b732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b736:	3a30      	subs	r2, #48	@ 0x30
 800b738:	2a09      	cmp	r2, #9
 800b73a:	d903      	bls.n	800b744 <_vfiprintf_r+0x1cc>
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0c6      	beq.n	800b6ce <_vfiprintf_r+0x156>
 800b740:	9105      	str	r1, [sp, #20]
 800b742:	e7c4      	b.n	800b6ce <_vfiprintf_r+0x156>
 800b744:	fb0c 2101 	mla	r1, ip, r1, r2
 800b748:	4604      	mov	r4, r0
 800b74a:	2301      	movs	r3, #1
 800b74c:	e7f0      	b.n	800b730 <_vfiprintf_r+0x1b8>
 800b74e:	ab03      	add	r3, sp, #12
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	462a      	mov	r2, r5
 800b754:	4b12      	ldr	r3, [pc, #72]	@ (800b7a0 <_vfiprintf_r+0x228>)
 800b756:	a904      	add	r1, sp, #16
 800b758:	4630      	mov	r0, r6
 800b75a:	f7fc f979 	bl	8007a50 <_printf_float>
 800b75e:	4607      	mov	r7, r0
 800b760:	1c78      	adds	r0, r7, #1
 800b762:	d1d6      	bne.n	800b712 <_vfiprintf_r+0x19a>
 800b764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b766:	07d9      	lsls	r1, r3, #31
 800b768:	d405      	bmi.n	800b776 <_vfiprintf_r+0x1fe>
 800b76a:	89ab      	ldrh	r3, [r5, #12]
 800b76c:	059a      	lsls	r2, r3, #22
 800b76e:	d402      	bmi.n	800b776 <_vfiprintf_r+0x1fe>
 800b770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b772:	f7fd f91b 	bl	80089ac <__retarget_lock_release_recursive>
 800b776:	89ab      	ldrh	r3, [r5, #12]
 800b778:	065b      	lsls	r3, r3, #25
 800b77a:	f53f af1f 	bmi.w	800b5bc <_vfiprintf_r+0x44>
 800b77e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b780:	e71e      	b.n	800b5c0 <_vfiprintf_r+0x48>
 800b782:	ab03      	add	r3, sp, #12
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	462a      	mov	r2, r5
 800b788:	4b05      	ldr	r3, [pc, #20]	@ (800b7a0 <_vfiprintf_r+0x228>)
 800b78a:	a904      	add	r1, sp, #16
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7fc fbf7 	bl	8007f80 <_printf_i>
 800b792:	e7e4      	b.n	800b75e <_vfiprintf_r+0x1e6>
 800b794:	0800cc69 	.word	0x0800cc69
 800b798:	0800cc73 	.word	0x0800cc73
 800b79c:	08007a51 	.word	0x08007a51
 800b7a0:	0800b553 	.word	0x0800b553
 800b7a4:	0800cc6f 	.word	0x0800cc6f

0800b7a8 <_scanf_chars>:
 800b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	4615      	mov	r5, r2
 800b7ae:	688a      	ldr	r2, [r1, #8]
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	b932      	cbnz	r2, 800b7c4 <_scanf_chars+0x1c>
 800b7b6:	698a      	ldr	r2, [r1, #24]
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	bf14      	ite	ne
 800b7bc:	f04f 32ff 	movne.w	r2, #4294967295
 800b7c0:	2201      	moveq	r2, #1
 800b7c2:	608a      	str	r2, [r1, #8]
 800b7c4:	6822      	ldr	r2, [r4, #0]
 800b7c6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b858 <_scanf_chars+0xb0>
 800b7ca:	06d1      	lsls	r1, r2, #27
 800b7cc:	bf5f      	itttt	pl
 800b7ce:	681a      	ldrpl	r2, [r3, #0]
 800b7d0:	1d11      	addpl	r1, r2, #4
 800b7d2:	6019      	strpl	r1, [r3, #0]
 800b7d4:	6816      	ldrpl	r6, [r2, #0]
 800b7d6:	2700      	movs	r7, #0
 800b7d8:	69a0      	ldr	r0, [r4, #24]
 800b7da:	b188      	cbz	r0, 800b800 <_scanf_chars+0x58>
 800b7dc:	2801      	cmp	r0, #1
 800b7de:	d107      	bne.n	800b7f0 <_scanf_chars+0x48>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	781a      	ldrb	r2, [r3, #0]
 800b7e4:	6963      	ldr	r3, [r4, #20]
 800b7e6:	5c9b      	ldrb	r3, [r3, r2]
 800b7e8:	b953      	cbnz	r3, 800b800 <_scanf_chars+0x58>
 800b7ea:	2f00      	cmp	r7, #0
 800b7ec:	d031      	beq.n	800b852 <_scanf_chars+0xaa>
 800b7ee:	e022      	b.n	800b836 <_scanf_chars+0x8e>
 800b7f0:	2802      	cmp	r0, #2
 800b7f2:	d120      	bne.n	800b836 <_scanf_chars+0x8e>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b7fc:	071b      	lsls	r3, r3, #28
 800b7fe:	d41a      	bmi.n	800b836 <_scanf_chars+0x8e>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	06da      	lsls	r2, r3, #27
 800b804:	bf5e      	ittt	pl
 800b806:	682b      	ldrpl	r3, [r5, #0]
 800b808:	781b      	ldrbpl	r3, [r3, #0]
 800b80a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b80e:	682a      	ldr	r2, [r5, #0]
 800b810:	686b      	ldr	r3, [r5, #4]
 800b812:	3201      	adds	r2, #1
 800b814:	602a      	str	r2, [r5, #0]
 800b816:	68a2      	ldr	r2, [r4, #8]
 800b818:	3b01      	subs	r3, #1
 800b81a:	3a01      	subs	r2, #1
 800b81c:	606b      	str	r3, [r5, #4]
 800b81e:	3701      	adds	r7, #1
 800b820:	60a2      	str	r2, [r4, #8]
 800b822:	b142      	cbz	r2, 800b836 <_scanf_chars+0x8e>
 800b824:	2b00      	cmp	r3, #0
 800b826:	dcd7      	bgt.n	800b7d8 <_scanf_chars+0x30>
 800b828:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b82c:	4629      	mov	r1, r5
 800b82e:	4640      	mov	r0, r8
 800b830:	4798      	blx	r3
 800b832:	2800      	cmp	r0, #0
 800b834:	d0d0      	beq.n	800b7d8 <_scanf_chars+0x30>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	f013 0310 	ands.w	r3, r3, #16
 800b83c:	d105      	bne.n	800b84a <_scanf_chars+0xa2>
 800b83e:	68e2      	ldr	r2, [r4, #12]
 800b840:	3201      	adds	r2, #1
 800b842:	60e2      	str	r2, [r4, #12]
 800b844:	69a2      	ldr	r2, [r4, #24]
 800b846:	b102      	cbz	r2, 800b84a <_scanf_chars+0xa2>
 800b848:	7033      	strb	r3, [r6, #0]
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	443b      	add	r3, r7
 800b84e:	6123      	str	r3, [r4, #16]
 800b850:	2000      	movs	r0, #0
 800b852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b856:	bf00      	nop
 800b858:	0800cb69 	.word	0x0800cb69

0800b85c <_scanf_i>:
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	4698      	mov	r8, r3
 800b862:	4b74      	ldr	r3, [pc, #464]	@ (800ba34 <_scanf_i+0x1d8>)
 800b864:	460c      	mov	r4, r1
 800b866:	4682      	mov	sl, r0
 800b868:	4616      	mov	r6, r2
 800b86a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b86e:	b087      	sub	sp, #28
 800b870:	ab03      	add	r3, sp, #12
 800b872:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b876:	4b70      	ldr	r3, [pc, #448]	@ (800ba38 <_scanf_i+0x1dc>)
 800b878:	69a1      	ldr	r1, [r4, #24]
 800b87a:	4a70      	ldr	r2, [pc, #448]	@ (800ba3c <_scanf_i+0x1e0>)
 800b87c:	2903      	cmp	r1, #3
 800b87e:	bf08      	it	eq
 800b880:	461a      	moveq	r2, r3
 800b882:	68a3      	ldr	r3, [r4, #8]
 800b884:	9201      	str	r2, [sp, #4]
 800b886:	1e5a      	subs	r2, r3, #1
 800b888:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b88c:	bf88      	it	hi
 800b88e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b892:	4627      	mov	r7, r4
 800b894:	bf82      	ittt	hi
 800b896:	eb03 0905 	addhi.w	r9, r3, r5
 800b89a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b89e:	60a3      	strhi	r3, [r4, #8]
 800b8a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b8a4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b8a8:	bf98      	it	ls
 800b8aa:	f04f 0900 	movls.w	r9, #0
 800b8ae:	6023      	str	r3, [r4, #0]
 800b8b0:	463d      	mov	r5, r7
 800b8b2:	f04f 0b00 	mov.w	fp, #0
 800b8b6:	6831      	ldr	r1, [r6, #0]
 800b8b8:	ab03      	add	r3, sp, #12
 800b8ba:	7809      	ldrb	r1, [r1, #0]
 800b8bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	f7f4 fc85 	bl	80001d0 <memchr>
 800b8c6:	b328      	cbz	r0, 800b914 <_scanf_i+0xb8>
 800b8c8:	f1bb 0f01 	cmp.w	fp, #1
 800b8cc:	d159      	bne.n	800b982 <_scanf_i+0x126>
 800b8ce:	6862      	ldr	r2, [r4, #4]
 800b8d0:	b92a      	cbnz	r2, 800b8de <_scanf_i+0x82>
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	2108      	movs	r1, #8
 800b8d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8da:	6061      	str	r1, [r4, #4]
 800b8dc:	6022      	str	r2, [r4, #0]
 800b8de:	6822      	ldr	r2, [r4, #0]
 800b8e0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b8e4:	6022      	str	r2, [r4, #0]
 800b8e6:	68a2      	ldr	r2, [r4, #8]
 800b8e8:	1e51      	subs	r1, r2, #1
 800b8ea:	60a1      	str	r1, [r4, #8]
 800b8ec:	b192      	cbz	r2, 800b914 <_scanf_i+0xb8>
 800b8ee:	6832      	ldr	r2, [r6, #0]
 800b8f0:	1c51      	adds	r1, r2, #1
 800b8f2:	6031      	str	r1, [r6, #0]
 800b8f4:	7812      	ldrb	r2, [r2, #0]
 800b8f6:	f805 2b01 	strb.w	r2, [r5], #1
 800b8fa:	6872      	ldr	r2, [r6, #4]
 800b8fc:	3a01      	subs	r2, #1
 800b8fe:	2a00      	cmp	r2, #0
 800b900:	6072      	str	r2, [r6, #4]
 800b902:	dc07      	bgt.n	800b914 <_scanf_i+0xb8>
 800b904:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b908:	4631      	mov	r1, r6
 800b90a:	4650      	mov	r0, sl
 800b90c:	4790      	blx	r2
 800b90e:	2800      	cmp	r0, #0
 800b910:	f040 8085 	bne.w	800ba1e <_scanf_i+0x1c2>
 800b914:	f10b 0b01 	add.w	fp, fp, #1
 800b918:	f1bb 0f03 	cmp.w	fp, #3
 800b91c:	d1cb      	bne.n	800b8b6 <_scanf_i+0x5a>
 800b91e:	6863      	ldr	r3, [r4, #4]
 800b920:	b90b      	cbnz	r3, 800b926 <_scanf_i+0xca>
 800b922:	230a      	movs	r3, #10
 800b924:	6063      	str	r3, [r4, #4]
 800b926:	6863      	ldr	r3, [r4, #4]
 800b928:	4945      	ldr	r1, [pc, #276]	@ (800ba40 <_scanf_i+0x1e4>)
 800b92a:	6960      	ldr	r0, [r4, #20]
 800b92c:	1ac9      	subs	r1, r1, r3
 800b92e:	f000 f935 	bl	800bb9c <__sccl>
 800b932:	f04f 0b00 	mov.w	fp, #0
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	6822      	ldr	r2, [r4, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d03d      	beq.n	800b9ba <_scanf_i+0x15e>
 800b93e:	6831      	ldr	r1, [r6, #0]
 800b940:	6960      	ldr	r0, [r4, #20]
 800b942:	f891 c000 	ldrb.w	ip, [r1]
 800b946:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d035      	beq.n	800b9ba <_scanf_i+0x15e>
 800b94e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b952:	d124      	bne.n	800b99e <_scanf_i+0x142>
 800b954:	0510      	lsls	r0, r2, #20
 800b956:	d522      	bpl.n	800b99e <_scanf_i+0x142>
 800b958:	f10b 0b01 	add.w	fp, fp, #1
 800b95c:	f1b9 0f00 	cmp.w	r9, #0
 800b960:	d003      	beq.n	800b96a <_scanf_i+0x10e>
 800b962:	3301      	adds	r3, #1
 800b964:	f109 39ff 	add.w	r9, r9, #4294967295
 800b968:	60a3      	str	r3, [r4, #8]
 800b96a:	6873      	ldr	r3, [r6, #4]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	2b00      	cmp	r3, #0
 800b970:	6073      	str	r3, [r6, #4]
 800b972:	dd1b      	ble.n	800b9ac <_scanf_i+0x150>
 800b974:	6833      	ldr	r3, [r6, #0]
 800b976:	3301      	adds	r3, #1
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	60a3      	str	r3, [r4, #8]
 800b980:	e7d9      	b.n	800b936 <_scanf_i+0xda>
 800b982:	f1bb 0f02 	cmp.w	fp, #2
 800b986:	d1ae      	bne.n	800b8e6 <_scanf_i+0x8a>
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b98e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b992:	d1bf      	bne.n	800b914 <_scanf_i+0xb8>
 800b994:	2110      	movs	r1, #16
 800b996:	6061      	str	r1, [r4, #4]
 800b998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b99c:	e7a2      	b.n	800b8e4 <_scanf_i+0x88>
 800b99e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	780b      	ldrb	r3, [r1, #0]
 800b9a6:	f805 3b01 	strb.w	r3, [r5], #1
 800b9aa:	e7de      	b.n	800b96a <_scanf_i+0x10e>
 800b9ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b9b0:	4631      	mov	r1, r6
 800b9b2:	4650      	mov	r0, sl
 800b9b4:	4798      	blx	r3
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d0df      	beq.n	800b97a <_scanf_i+0x11e>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	05d9      	lsls	r1, r3, #23
 800b9be:	d50d      	bpl.n	800b9dc <_scanf_i+0x180>
 800b9c0:	42bd      	cmp	r5, r7
 800b9c2:	d909      	bls.n	800b9d8 <_scanf_i+0x17c>
 800b9c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b9c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	4650      	mov	r0, sl
 800b9d0:	4798      	blx	r3
 800b9d2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b9d6:	464d      	mov	r5, r9
 800b9d8:	42bd      	cmp	r5, r7
 800b9da:	d028      	beq.n	800ba2e <_scanf_i+0x1d2>
 800b9dc:	6822      	ldr	r2, [r4, #0]
 800b9de:	f012 0210 	ands.w	r2, r2, #16
 800b9e2:	d113      	bne.n	800ba0c <_scanf_i+0x1b0>
 800b9e4:	702a      	strb	r2, [r5, #0]
 800b9e6:	6863      	ldr	r3, [r4, #4]
 800b9e8:	9e01      	ldr	r6, [sp, #4]
 800b9ea:	4639      	mov	r1, r7
 800b9ec:	4650      	mov	r0, sl
 800b9ee:	47b0      	blx	r6
 800b9f0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f4:	6821      	ldr	r1, [r4, #0]
 800b9f6:	1d1a      	adds	r2, r3, #4
 800b9f8:	f8c8 2000 	str.w	r2, [r8]
 800b9fc:	f011 0f20 	tst.w	r1, #32
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	d00f      	beq.n	800ba24 <_scanf_i+0x1c8>
 800ba04:	6018      	str	r0, [r3, #0]
 800ba06:	68e3      	ldr	r3, [r4, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	60e3      	str	r3, [r4, #12]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	1bed      	subs	r5, r5, r7
 800ba10:	445d      	add	r5, fp
 800ba12:	442b      	add	r3, r5
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	2000      	movs	r0, #0
 800ba18:	b007      	add	sp, #28
 800ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1e:	f04f 0b00 	mov.w	fp, #0
 800ba22:	e7ca      	b.n	800b9ba <_scanf_i+0x15e>
 800ba24:	07ca      	lsls	r2, r1, #31
 800ba26:	bf4c      	ite	mi
 800ba28:	8018      	strhmi	r0, [r3, #0]
 800ba2a:	6018      	strpl	r0, [r3, #0]
 800ba2c:	e7eb      	b.n	800ba06 <_scanf_i+0x1aa>
 800ba2e:	2001      	movs	r0, #1
 800ba30:	e7f2      	b.n	800ba18 <_scanf_i+0x1bc>
 800ba32:	bf00      	nop
 800ba34:	0800c8c4 	.word	0x0800c8c4
 800ba38:	0800aed9 	.word	0x0800aed9
 800ba3c:	0800c66d 	.word	0x0800c66d
 800ba40:	0800cc8a 	.word	0x0800cc8a

0800ba44 <__sflush_r>:
 800ba44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	0716      	lsls	r6, r2, #28
 800ba4e:	4605      	mov	r5, r0
 800ba50:	460c      	mov	r4, r1
 800ba52:	d454      	bmi.n	800bafe <__sflush_r+0xba>
 800ba54:	684b      	ldr	r3, [r1, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	dc02      	bgt.n	800ba60 <__sflush_r+0x1c>
 800ba5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dd48      	ble.n	800baf2 <__sflush_r+0xae>
 800ba60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	d045      	beq.n	800baf2 <__sflush_r+0xae>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba6c:	682f      	ldr	r7, [r5, #0]
 800ba6e:	6a21      	ldr	r1, [r4, #32]
 800ba70:	602b      	str	r3, [r5, #0]
 800ba72:	d030      	beq.n	800bad6 <__sflush_r+0x92>
 800ba74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	0759      	lsls	r1, r3, #29
 800ba7a:	d505      	bpl.n	800ba88 <__sflush_r+0x44>
 800ba7c:	6863      	ldr	r3, [r4, #4]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba82:	b10b      	cbz	r3, 800ba88 <__sflush_r+0x44>
 800ba84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	2300      	movs	r3, #0
 800ba8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba8c:	6a21      	ldr	r1, [r4, #32]
 800ba8e:	4628      	mov	r0, r5
 800ba90:	47b0      	blx	r6
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	d106      	bne.n	800baa6 <__sflush_r+0x62>
 800ba98:	6829      	ldr	r1, [r5, #0]
 800ba9a:	291d      	cmp	r1, #29
 800ba9c:	d82b      	bhi.n	800baf6 <__sflush_r+0xb2>
 800ba9e:	4a2a      	ldr	r2, [pc, #168]	@ (800bb48 <__sflush_r+0x104>)
 800baa0:	410a      	asrs	r2, r1
 800baa2:	07d6      	lsls	r6, r2, #31
 800baa4:	d427      	bmi.n	800baf6 <__sflush_r+0xb2>
 800baa6:	2200      	movs	r2, #0
 800baa8:	6062      	str	r2, [r4, #4]
 800baaa:	04d9      	lsls	r1, r3, #19
 800baac:	6922      	ldr	r2, [r4, #16]
 800baae:	6022      	str	r2, [r4, #0]
 800bab0:	d504      	bpl.n	800babc <__sflush_r+0x78>
 800bab2:	1c42      	adds	r2, r0, #1
 800bab4:	d101      	bne.n	800baba <__sflush_r+0x76>
 800bab6:	682b      	ldr	r3, [r5, #0]
 800bab8:	b903      	cbnz	r3, 800babc <__sflush_r+0x78>
 800baba:	6560      	str	r0, [r4, #84]	@ 0x54
 800babc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800babe:	602f      	str	r7, [r5, #0]
 800bac0:	b1b9      	cbz	r1, 800baf2 <__sflush_r+0xae>
 800bac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bac6:	4299      	cmp	r1, r3
 800bac8:	d002      	beq.n	800bad0 <__sflush_r+0x8c>
 800baca:	4628      	mov	r0, r5
 800bacc:	f7fd fdd0 	bl	8009670 <_free_r>
 800bad0:	2300      	movs	r3, #0
 800bad2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bad4:	e00d      	b.n	800baf2 <__sflush_r+0xae>
 800bad6:	2301      	movs	r3, #1
 800bad8:	4628      	mov	r0, r5
 800bada:	47b0      	blx	r6
 800badc:	4602      	mov	r2, r0
 800bade:	1c50      	adds	r0, r2, #1
 800bae0:	d1c9      	bne.n	800ba76 <__sflush_r+0x32>
 800bae2:	682b      	ldr	r3, [r5, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0c6      	beq.n	800ba76 <__sflush_r+0x32>
 800bae8:	2b1d      	cmp	r3, #29
 800baea:	d001      	beq.n	800baf0 <__sflush_r+0xac>
 800baec:	2b16      	cmp	r3, #22
 800baee:	d11e      	bne.n	800bb2e <__sflush_r+0xea>
 800baf0:	602f      	str	r7, [r5, #0]
 800baf2:	2000      	movs	r0, #0
 800baf4:	e022      	b.n	800bb3c <__sflush_r+0xf8>
 800baf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bafa:	b21b      	sxth	r3, r3
 800bafc:	e01b      	b.n	800bb36 <__sflush_r+0xf2>
 800bafe:	690f      	ldr	r7, [r1, #16]
 800bb00:	2f00      	cmp	r7, #0
 800bb02:	d0f6      	beq.n	800baf2 <__sflush_r+0xae>
 800bb04:	0793      	lsls	r3, r2, #30
 800bb06:	680e      	ldr	r6, [r1, #0]
 800bb08:	bf08      	it	eq
 800bb0a:	694b      	ldreq	r3, [r1, #20]
 800bb0c:	600f      	str	r7, [r1, #0]
 800bb0e:	bf18      	it	ne
 800bb10:	2300      	movne	r3, #0
 800bb12:	eba6 0807 	sub.w	r8, r6, r7
 800bb16:	608b      	str	r3, [r1, #8]
 800bb18:	f1b8 0f00 	cmp.w	r8, #0
 800bb1c:	dde9      	ble.n	800baf2 <__sflush_r+0xae>
 800bb1e:	6a21      	ldr	r1, [r4, #32]
 800bb20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb22:	4643      	mov	r3, r8
 800bb24:	463a      	mov	r2, r7
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b0      	blx	r6
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	dc08      	bgt.n	800bb40 <__sflush_r+0xfc>
 800bb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb40:	4407      	add	r7, r0
 800bb42:	eba8 0800 	sub.w	r8, r8, r0
 800bb46:	e7e7      	b.n	800bb18 <__sflush_r+0xd4>
 800bb48:	dfbffffe 	.word	0xdfbffffe

0800bb4c <_fflush_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	690b      	ldr	r3, [r1, #16]
 800bb50:	4605      	mov	r5, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	b913      	cbnz	r3, 800bb5c <_fflush_r+0x10>
 800bb56:	2500      	movs	r5, #0
 800bb58:	4628      	mov	r0, r5
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}
 800bb5c:	b118      	cbz	r0, 800bb66 <_fflush_r+0x1a>
 800bb5e:	6a03      	ldr	r3, [r0, #32]
 800bb60:	b90b      	cbnz	r3, 800bb66 <_fflush_r+0x1a>
 800bb62:	f7fc fdcd 	bl	8008700 <__sinit>
 800bb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0f3      	beq.n	800bb56 <_fflush_r+0xa>
 800bb6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb70:	07d0      	lsls	r0, r2, #31
 800bb72:	d404      	bmi.n	800bb7e <_fflush_r+0x32>
 800bb74:	0599      	lsls	r1, r3, #22
 800bb76:	d402      	bmi.n	800bb7e <_fflush_r+0x32>
 800bb78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb7a:	f7fc ff16 	bl	80089aa <__retarget_lock_acquire_recursive>
 800bb7e:	4628      	mov	r0, r5
 800bb80:	4621      	mov	r1, r4
 800bb82:	f7ff ff5f 	bl	800ba44 <__sflush_r>
 800bb86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb88:	07da      	lsls	r2, r3, #31
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	d4e4      	bmi.n	800bb58 <_fflush_r+0xc>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	059b      	lsls	r3, r3, #22
 800bb92:	d4e1      	bmi.n	800bb58 <_fflush_r+0xc>
 800bb94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb96:	f7fc ff09 	bl	80089ac <__retarget_lock_release_recursive>
 800bb9a:	e7dd      	b.n	800bb58 <_fflush_r+0xc>

0800bb9c <__sccl>:
 800bb9c:	b570      	push	{r4, r5, r6, lr}
 800bb9e:	780b      	ldrb	r3, [r1, #0]
 800bba0:	4604      	mov	r4, r0
 800bba2:	2b5e      	cmp	r3, #94	@ 0x5e
 800bba4:	bf0b      	itete	eq
 800bba6:	784b      	ldrbeq	r3, [r1, #1]
 800bba8:	1c4a      	addne	r2, r1, #1
 800bbaa:	1c8a      	addeq	r2, r1, #2
 800bbac:	2100      	movne	r1, #0
 800bbae:	bf08      	it	eq
 800bbb0:	2101      	moveq	r1, #1
 800bbb2:	3801      	subs	r0, #1
 800bbb4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800bbb8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bbbc:	42a8      	cmp	r0, r5
 800bbbe:	d1fb      	bne.n	800bbb8 <__sccl+0x1c>
 800bbc0:	b90b      	cbnz	r3, 800bbc6 <__sccl+0x2a>
 800bbc2:	1e50      	subs	r0, r2, #1
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	f081 0101 	eor.w	r1, r1, #1
 800bbca:	54e1      	strb	r1, [r4, r3]
 800bbcc:	4610      	mov	r0, r2
 800bbce:	4602      	mov	r2, r0
 800bbd0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bbd4:	2d2d      	cmp	r5, #45	@ 0x2d
 800bbd6:	d005      	beq.n	800bbe4 <__sccl+0x48>
 800bbd8:	2d5d      	cmp	r5, #93	@ 0x5d
 800bbda:	d016      	beq.n	800bc0a <__sccl+0x6e>
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	d0f1      	beq.n	800bbc4 <__sccl+0x28>
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	e7f2      	b.n	800bbca <__sccl+0x2e>
 800bbe4:	7846      	ldrb	r6, [r0, #1]
 800bbe6:	2e5d      	cmp	r6, #93	@ 0x5d
 800bbe8:	d0fa      	beq.n	800bbe0 <__sccl+0x44>
 800bbea:	42b3      	cmp	r3, r6
 800bbec:	dcf8      	bgt.n	800bbe0 <__sccl+0x44>
 800bbee:	3002      	adds	r0, #2
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	3201      	adds	r2, #1
 800bbf4:	4296      	cmp	r6, r2
 800bbf6:	54a1      	strb	r1, [r4, r2]
 800bbf8:	dcfb      	bgt.n	800bbf2 <__sccl+0x56>
 800bbfa:	1af2      	subs	r2, r6, r3
 800bbfc:	3a01      	subs	r2, #1
 800bbfe:	1c5d      	adds	r5, r3, #1
 800bc00:	42b3      	cmp	r3, r6
 800bc02:	bfa8      	it	ge
 800bc04:	2200      	movge	r2, #0
 800bc06:	18ab      	adds	r3, r5, r2
 800bc08:	e7e1      	b.n	800bbce <__sccl+0x32>
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	e7da      	b.n	800bbc4 <__sccl+0x28>

0800bc0e <__submore>:
 800bc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc12:	460c      	mov	r4, r1
 800bc14:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bc16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc1a:	4299      	cmp	r1, r3
 800bc1c:	d11d      	bne.n	800bc5a <__submore+0x4c>
 800bc1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bc22:	f7fd fd99 	bl	8009758 <_malloc_r>
 800bc26:	b918      	cbnz	r0, 800bc30 <__submore+0x22>
 800bc28:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc34:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bc36:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bc3a:	6360      	str	r0, [r4, #52]	@ 0x34
 800bc3c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bc40:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bc44:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bc48:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bc4c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bc50:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bc54:	6020      	str	r0, [r4, #0]
 800bc56:	2000      	movs	r0, #0
 800bc58:	e7e8      	b.n	800bc2c <__submore+0x1e>
 800bc5a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bc5c:	0077      	lsls	r7, r6, #1
 800bc5e:	463a      	mov	r2, r7
 800bc60:	f000 fc67 	bl	800c532 <_realloc_r>
 800bc64:	4605      	mov	r5, r0
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d0de      	beq.n	800bc28 <__submore+0x1a>
 800bc6a:	eb00 0806 	add.w	r8, r0, r6
 800bc6e:	4601      	mov	r1, r0
 800bc70:	4632      	mov	r2, r6
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7fc fe9b 	bl	80089ae <memcpy>
 800bc78:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bc7c:	f8c4 8000 	str.w	r8, [r4]
 800bc80:	e7e9      	b.n	800bc56 <__submore+0x48>

0800bc82 <__swbuf_r>:
 800bc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc84:	460e      	mov	r6, r1
 800bc86:	4614      	mov	r4, r2
 800bc88:	4605      	mov	r5, r0
 800bc8a:	b118      	cbz	r0, 800bc94 <__swbuf_r+0x12>
 800bc8c:	6a03      	ldr	r3, [r0, #32]
 800bc8e:	b90b      	cbnz	r3, 800bc94 <__swbuf_r+0x12>
 800bc90:	f7fc fd36 	bl	8008700 <__sinit>
 800bc94:	69a3      	ldr	r3, [r4, #24]
 800bc96:	60a3      	str	r3, [r4, #8]
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	071a      	lsls	r2, r3, #28
 800bc9c:	d501      	bpl.n	800bca2 <__swbuf_r+0x20>
 800bc9e:	6923      	ldr	r3, [r4, #16]
 800bca0:	b943      	cbnz	r3, 800bcb4 <__swbuf_r+0x32>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f000 f82b 	bl	800bd00 <__swsetup_r>
 800bcaa:	b118      	cbz	r0, 800bcb4 <__swbuf_r+0x32>
 800bcac:	f04f 37ff 	mov.w	r7, #4294967295
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb4:	6823      	ldr	r3, [r4, #0]
 800bcb6:	6922      	ldr	r2, [r4, #16]
 800bcb8:	1a98      	subs	r0, r3, r2
 800bcba:	6963      	ldr	r3, [r4, #20]
 800bcbc:	b2f6      	uxtb	r6, r6
 800bcbe:	4283      	cmp	r3, r0
 800bcc0:	4637      	mov	r7, r6
 800bcc2:	dc05      	bgt.n	800bcd0 <__swbuf_r+0x4e>
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	f7ff ff40 	bl	800bb4c <_fflush_r>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d1ed      	bne.n	800bcac <__swbuf_r+0x2a>
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	60a3      	str	r3, [r4, #8]
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	6022      	str	r2, [r4, #0]
 800bcdc:	701e      	strb	r6, [r3, #0]
 800bcde:	6962      	ldr	r2, [r4, #20]
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d004      	beq.n	800bcf0 <__swbuf_r+0x6e>
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	07db      	lsls	r3, r3, #31
 800bcea:	d5e1      	bpl.n	800bcb0 <__swbuf_r+0x2e>
 800bcec:	2e0a      	cmp	r6, #10
 800bcee:	d1df      	bne.n	800bcb0 <__swbuf_r+0x2e>
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f7ff ff2a 	bl	800bb4c <_fflush_r>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d0d9      	beq.n	800bcb0 <__swbuf_r+0x2e>
 800bcfc:	e7d6      	b.n	800bcac <__swbuf_r+0x2a>
	...

0800bd00 <__swsetup_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4b29      	ldr	r3, [pc, #164]	@ (800bda8 <__swsetup_r+0xa8>)
 800bd04:	4605      	mov	r5, r0
 800bd06:	6818      	ldr	r0, [r3, #0]
 800bd08:	460c      	mov	r4, r1
 800bd0a:	b118      	cbz	r0, 800bd14 <__swsetup_r+0x14>
 800bd0c:	6a03      	ldr	r3, [r0, #32]
 800bd0e:	b90b      	cbnz	r3, 800bd14 <__swsetup_r+0x14>
 800bd10:	f7fc fcf6 	bl	8008700 <__sinit>
 800bd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd18:	0719      	lsls	r1, r3, #28
 800bd1a:	d422      	bmi.n	800bd62 <__swsetup_r+0x62>
 800bd1c:	06da      	lsls	r2, r3, #27
 800bd1e:	d407      	bmi.n	800bd30 <__swsetup_r+0x30>
 800bd20:	2209      	movs	r2, #9
 800bd22:	602a      	str	r2, [r5, #0]
 800bd24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2e:	e033      	b.n	800bd98 <__swsetup_r+0x98>
 800bd30:	0758      	lsls	r0, r3, #29
 800bd32:	d512      	bpl.n	800bd5a <__swsetup_r+0x5a>
 800bd34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd36:	b141      	cbz	r1, 800bd4a <__swsetup_r+0x4a>
 800bd38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	d002      	beq.n	800bd46 <__swsetup_r+0x46>
 800bd40:	4628      	mov	r0, r5
 800bd42:	f7fd fc95 	bl	8009670 <_free_r>
 800bd46:	2300      	movs	r3, #0
 800bd48:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	2300      	movs	r3, #0
 800bd54:	6063      	str	r3, [r4, #4]
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f043 0308 	orr.w	r3, r3, #8
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	b94b      	cbnz	r3, 800bd7a <__swsetup_r+0x7a>
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd70:	d003      	beq.n	800bd7a <__swsetup_r+0x7a>
 800bd72:	4621      	mov	r1, r4
 800bd74:	4628      	mov	r0, r5
 800bd76:	f000 fcc1 	bl	800c6fc <__smakebuf_r>
 800bd7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7e:	f013 0201 	ands.w	r2, r3, #1
 800bd82:	d00a      	beq.n	800bd9a <__swsetup_r+0x9a>
 800bd84:	2200      	movs	r2, #0
 800bd86:	60a2      	str	r2, [r4, #8]
 800bd88:	6962      	ldr	r2, [r4, #20]
 800bd8a:	4252      	negs	r2, r2
 800bd8c:	61a2      	str	r2, [r4, #24]
 800bd8e:	6922      	ldr	r2, [r4, #16]
 800bd90:	b942      	cbnz	r2, 800bda4 <__swsetup_r+0xa4>
 800bd92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd96:	d1c5      	bne.n	800bd24 <__swsetup_r+0x24>
 800bd98:	bd38      	pop	{r3, r4, r5, pc}
 800bd9a:	0799      	lsls	r1, r3, #30
 800bd9c:	bf58      	it	pl
 800bd9e:	6962      	ldrpl	r2, [r4, #20]
 800bda0:	60a2      	str	r2, [r4, #8]
 800bda2:	e7f4      	b.n	800bd8e <__swsetup_r+0x8e>
 800bda4:	2000      	movs	r0, #0
 800bda6:	e7f7      	b.n	800bd98 <__swsetup_r+0x98>
 800bda8:	20000024 	.word	0x20000024

0800bdac <memmove>:
 800bdac:	4288      	cmp	r0, r1
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	eb01 0402 	add.w	r4, r1, r2
 800bdb4:	d902      	bls.n	800bdbc <memmove+0x10>
 800bdb6:	4284      	cmp	r4, r0
 800bdb8:	4623      	mov	r3, r4
 800bdba:	d807      	bhi.n	800bdcc <memmove+0x20>
 800bdbc:	1e43      	subs	r3, r0, #1
 800bdbe:	42a1      	cmp	r1, r4
 800bdc0:	d008      	beq.n	800bdd4 <memmove+0x28>
 800bdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdca:	e7f8      	b.n	800bdbe <memmove+0x12>
 800bdcc:	4402      	add	r2, r0
 800bdce:	4601      	mov	r1, r0
 800bdd0:	428a      	cmp	r2, r1
 800bdd2:	d100      	bne.n	800bdd6 <memmove+0x2a>
 800bdd4:	bd10      	pop	{r4, pc}
 800bdd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdde:	e7f7      	b.n	800bdd0 <memmove+0x24>

0800bde0 <strncmp>:
 800bde0:	b510      	push	{r4, lr}
 800bde2:	b16a      	cbz	r2, 800be00 <strncmp+0x20>
 800bde4:	3901      	subs	r1, #1
 800bde6:	1884      	adds	r4, r0, r2
 800bde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d103      	bne.n	800bdfc <strncmp+0x1c>
 800bdf4:	42a0      	cmp	r0, r4
 800bdf6:	d001      	beq.n	800bdfc <strncmp+0x1c>
 800bdf8:	2a00      	cmp	r2, #0
 800bdfa:	d1f5      	bne.n	800bde8 <strncmp+0x8>
 800bdfc:	1ad0      	subs	r0, r2, r3
 800bdfe:	bd10      	pop	{r4, pc}
 800be00:	4610      	mov	r0, r2
 800be02:	e7fc      	b.n	800bdfe <strncmp+0x1e>

0800be04 <_sbrk_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	4d06      	ldr	r5, [pc, #24]	@ (800be20 <_sbrk_r+0x1c>)
 800be08:	2300      	movs	r3, #0
 800be0a:	4604      	mov	r4, r0
 800be0c:	4608      	mov	r0, r1
 800be0e:	602b      	str	r3, [r5, #0]
 800be10:	f7f6 f920 	bl	8002054 <_sbrk>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d102      	bne.n	800be1e <_sbrk_r+0x1a>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	b103      	cbz	r3, 800be1e <_sbrk_r+0x1a>
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	20004678 	.word	0x20004678
 800be24:	00000000 	.word	0x00000000

0800be28 <nan>:
 800be28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be30 <nan+0x8>
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	00000000 	.word	0x00000000
 800be34:	7ff80000 	.word	0x7ff80000

0800be38 <__assert_func>:
 800be38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be3a:	4614      	mov	r4, r2
 800be3c:	461a      	mov	r2, r3
 800be3e:	4b09      	ldr	r3, [pc, #36]	@ (800be64 <__assert_func+0x2c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4605      	mov	r5, r0
 800be44:	68d8      	ldr	r0, [r3, #12]
 800be46:	b954      	cbnz	r4, 800be5e <__assert_func+0x26>
 800be48:	4b07      	ldr	r3, [pc, #28]	@ (800be68 <__assert_func+0x30>)
 800be4a:	461c      	mov	r4, r3
 800be4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be50:	9100      	str	r1, [sp, #0]
 800be52:	462b      	mov	r3, r5
 800be54:	4905      	ldr	r1, [pc, #20]	@ (800be6c <__assert_func+0x34>)
 800be56:	f000 fc19 	bl	800c68c <fiprintf>
 800be5a:	f000 fcad 	bl	800c7b8 <abort>
 800be5e:	4b04      	ldr	r3, [pc, #16]	@ (800be70 <__assert_func+0x38>)
 800be60:	e7f4      	b.n	800be4c <__assert_func+0x14>
 800be62:	bf00      	nop
 800be64:	20000024 	.word	0x20000024
 800be68:	0800ccd8 	.word	0x0800ccd8
 800be6c:	0800ccaa 	.word	0x0800ccaa
 800be70:	0800cc9d 	.word	0x0800cc9d

0800be74 <_calloc_r>:
 800be74:	b570      	push	{r4, r5, r6, lr}
 800be76:	fba1 5402 	umull	r5, r4, r1, r2
 800be7a:	b93c      	cbnz	r4, 800be8c <_calloc_r+0x18>
 800be7c:	4629      	mov	r1, r5
 800be7e:	f7fd fc6b 	bl	8009758 <_malloc_r>
 800be82:	4606      	mov	r6, r0
 800be84:	b928      	cbnz	r0, 800be92 <_calloc_r+0x1e>
 800be86:	2600      	movs	r6, #0
 800be88:	4630      	mov	r0, r6
 800be8a:	bd70      	pop	{r4, r5, r6, pc}
 800be8c:	220c      	movs	r2, #12
 800be8e:	6002      	str	r2, [r0, #0]
 800be90:	e7f9      	b.n	800be86 <_calloc_r+0x12>
 800be92:	462a      	mov	r2, r5
 800be94:	4621      	mov	r1, r4
 800be96:	f7fc fd0a 	bl	80088ae <memset>
 800be9a:	e7f5      	b.n	800be88 <_calloc_r+0x14>

0800be9c <rshift>:
 800be9c:	6903      	ldr	r3, [r0, #16]
 800be9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bea6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800beaa:	f100 0414 	add.w	r4, r0, #20
 800beae:	dd45      	ble.n	800bf3c <rshift+0xa0>
 800beb0:	f011 011f 	ands.w	r1, r1, #31
 800beb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800beb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bebc:	d10c      	bne.n	800bed8 <rshift+0x3c>
 800bebe:	f100 0710 	add.w	r7, r0, #16
 800bec2:	4629      	mov	r1, r5
 800bec4:	42b1      	cmp	r1, r6
 800bec6:	d334      	bcc.n	800bf32 <rshift+0x96>
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	1eea      	subs	r2, r5, #3
 800bece:	4296      	cmp	r6, r2
 800bed0:	bf38      	it	cc
 800bed2:	2300      	movcc	r3, #0
 800bed4:	4423      	add	r3, r4
 800bed6:	e015      	b.n	800bf04 <rshift+0x68>
 800bed8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bedc:	f1c1 0820 	rsb	r8, r1, #32
 800bee0:	40cf      	lsrs	r7, r1
 800bee2:	f105 0e04 	add.w	lr, r5, #4
 800bee6:	46a1      	mov	r9, r4
 800bee8:	4576      	cmp	r6, lr
 800beea:	46f4      	mov	ip, lr
 800beec:	d815      	bhi.n	800bf1a <rshift+0x7e>
 800beee:	1a9a      	subs	r2, r3, r2
 800bef0:	0092      	lsls	r2, r2, #2
 800bef2:	3a04      	subs	r2, #4
 800bef4:	3501      	adds	r5, #1
 800bef6:	42ae      	cmp	r6, r5
 800bef8:	bf38      	it	cc
 800befa:	2200      	movcc	r2, #0
 800befc:	18a3      	adds	r3, r4, r2
 800befe:	50a7      	str	r7, [r4, r2]
 800bf00:	b107      	cbz	r7, 800bf04 <rshift+0x68>
 800bf02:	3304      	adds	r3, #4
 800bf04:	1b1a      	subs	r2, r3, r4
 800bf06:	42a3      	cmp	r3, r4
 800bf08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf0c:	bf08      	it	eq
 800bf0e:	2300      	moveq	r3, #0
 800bf10:	6102      	str	r2, [r0, #16]
 800bf12:	bf08      	it	eq
 800bf14:	6143      	streq	r3, [r0, #20]
 800bf16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf1a:	f8dc c000 	ldr.w	ip, [ip]
 800bf1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf22:	ea4c 0707 	orr.w	r7, ip, r7
 800bf26:	f849 7b04 	str.w	r7, [r9], #4
 800bf2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf2e:	40cf      	lsrs	r7, r1
 800bf30:	e7da      	b.n	800bee8 <rshift+0x4c>
 800bf32:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf36:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf3a:	e7c3      	b.n	800bec4 <rshift+0x28>
 800bf3c:	4623      	mov	r3, r4
 800bf3e:	e7e1      	b.n	800bf04 <rshift+0x68>

0800bf40 <__hexdig_fun>:
 800bf40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bf44:	2b09      	cmp	r3, #9
 800bf46:	d802      	bhi.n	800bf4e <__hexdig_fun+0xe>
 800bf48:	3820      	subs	r0, #32
 800bf4a:	b2c0      	uxtb	r0, r0
 800bf4c:	4770      	bx	lr
 800bf4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bf52:	2b05      	cmp	r3, #5
 800bf54:	d801      	bhi.n	800bf5a <__hexdig_fun+0x1a>
 800bf56:	3847      	subs	r0, #71	@ 0x47
 800bf58:	e7f7      	b.n	800bf4a <__hexdig_fun+0xa>
 800bf5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	d801      	bhi.n	800bf66 <__hexdig_fun+0x26>
 800bf62:	3827      	subs	r0, #39	@ 0x27
 800bf64:	e7f1      	b.n	800bf4a <__hexdig_fun+0xa>
 800bf66:	2000      	movs	r0, #0
 800bf68:	4770      	bx	lr
	...

0800bf6c <__gethex>:
 800bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf70:	b085      	sub	sp, #20
 800bf72:	468a      	mov	sl, r1
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	680b      	ldr	r3, [r1, #0]
 800bf78:	9001      	str	r0, [sp, #4]
 800bf7a:	4690      	mov	r8, r2
 800bf7c:	1c9c      	adds	r4, r3, #2
 800bf7e:	46a1      	mov	r9, r4
 800bf80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bf84:	2830      	cmp	r0, #48	@ 0x30
 800bf86:	d0fa      	beq.n	800bf7e <__gethex+0x12>
 800bf88:	eba9 0303 	sub.w	r3, r9, r3
 800bf8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bf90:	f7ff ffd6 	bl	800bf40 <__hexdig_fun>
 800bf94:	4605      	mov	r5, r0
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d168      	bne.n	800c06c <__gethex+0x100>
 800bf9a:	49a0      	ldr	r1, [pc, #640]	@ (800c21c <__gethex+0x2b0>)
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	4648      	mov	r0, r9
 800bfa0:	f7ff ff1e 	bl	800bde0 <strncmp>
 800bfa4:	4607      	mov	r7, r0
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d167      	bne.n	800c07a <__gethex+0x10e>
 800bfaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bfae:	4626      	mov	r6, r4
 800bfb0:	f7ff ffc6 	bl	800bf40 <__hexdig_fun>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d062      	beq.n	800c07e <__gethex+0x112>
 800bfb8:	4623      	mov	r3, r4
 800bfba:	7818      	ldrb	r0, [r3, #0]
 800bfbc:	2830      	cmp	r0, #48	@ 0x30
 800bfbe:	4699      	mov	r9, r3
 800bfc0:	f103 0301 	add.w	r3, r3, #1
 800bfc4:	d0f9      	beq.n	800bfba <__gethex+0x4e>
 800bfc6:	f7ff ffbb 	bl	800bf40 <__hexdig_fun>
 800bfca:	fab0 f580 	clz	r5, r0
 800bfce:	096d      	lsrs	r5, r5, #5
 800bfd0:	f04f 0b01 	mov.w	fp, #1
 800bfd4:	464a      	mov	r2, r9
 800bfd6:	4616      	mov	r6, r2
 800bfd8:	3201      	adds	r2, #1
 800bfda:	7830      	ldrb	r0, [r6, #0]
 800bfdc:	f7ff ffb0 	bl	800bf40 <__hexdig_fun>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d1f8      	bne.n	800bfd6 <__gethex+0x6a>
 800bfe4:	498d      	ldr	r1, [pc, #564]	@ (800c21c <__gethex+0x2b0>)
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7ff fef9 	bl	800bde0 <strncmp>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d13f      	bne.n	800c072 <__gethex+0x106>
 800bff2:	b944      	cbnz	r4, 800c006 <__gethex+0x9a>
 800bff4:	1c74      	adds	r4, r6, #1
 800bff6:	4622      	mov	r2, r4
 800bff8:	4616      	mov	r6, r2
 800bffa:	3201      	adds	r2, #1
 800bffc:	7830      	ldrb	r0, [r6, #0]
 800bffe:	f7ff ff9f 	bl	800bf40 <__hexdig_fun>
 800c002:	2800      	cmp	r0, #0
 800c004:	d1f8      	bne.n	800bff8 <__gethex+0x8c>
 800c006:	1ba4      	subs	r4, r4, r6
 800c008:	00a7      	lsls	r7, r4, #2
 800c00a:	7833      	ldrb	r3, [r6, #0]
 800c00c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c010:	2b50      	cmp	r3, #80	@ 0x50
 800c012:	d13e      	bne.n	800c092 <__gethex+0x126>
 800c014:	7873      	ldrb	r3, [r6, #1]
 800c016:	2b2b      	cmp	r3, #43	@ 0x2b
 800c018:	d033      	beq.n	800c082 <__gethex+0x116>
 800c01a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c01c:	d034      	beq.n	800c088 <__gethex+0x11c>
 800c01e:	1c71      	adds	r1, r6, #1
 800c020:	2400      	movs	r4, #0
 800c022:	7808      	ldrb	r0, [r1, #0]
 800c024:	f7ff ff8c 	bl	800bf40 <__hexdig_fun>
 800c028:	1e43      	subs	r3, r0, #1
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b18      	cmp	r3, #24
 800c02e:	d830      	bhi.n	800c092 <__gethex+0x126>
 800c030:	f1a0 0210 	sub.w	r2, r0, #16
 800c034:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c038:	f7ff ff82 	bl	800bf40 <__hexdig_fun>
 800c03c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c040:	fa5f fc8c 	uxtb.w	ip, ip
 800c044:	f1bc 0f18 	cmp.w	ip, #24
 800c048:	f04f 030a 	mov.w	r3, #10
 800c04c:	d91e      	bls.n	800c08c <__gethex+0x120>
 800c04e:	b104      	cbz	r4, 800c052 <__gethex+0xe6>
 800c050:	4252      	negs	r2, r2
 800c052:	4417      	add	r7, r2
 800c054:	f8ca 1000 	str.w	r1, [sl]
 800c058:	b1ed      	cbz	r5, 800c096 <__gethex+0x12a>
 800c05a:	f1bb 0f00 	cmp.w	fp, #0
 800c05e:	bf0c      	ite	eq
 800c060:	2506      	moveq	r5, #6
 800c062:	2500      	movne	r5, #0
 800c064:	4628      	mov	r0, r5
 800c066:	b005      	add	sp, #20
 800c068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06c:	2500      	movs	r5, #0
 800c06e:	462c      	mov	r4, r5
 800c070:	e7b0      	b.n	800bfd4 <__gethex+0x68>
 800c072:	2c00      	cmp	r4, #0
 800c074:	d1c7      	bne.n	800c006 <__gethex+0x9a>
 800c076:	4627      	mov	r7, r4
 800c078:	e7c7      	b.n	800c00a <__gethex+0x9e>
 800c07a:	464e      	mov	r6, r9
 800c07c:	462f      	mov	r7, r5
 800c07e:	2501      	movs	r5, #1
 800c080:	e7c3      	b.n	800c00a <__gethex+0x9e>
 800c082:	2400      	movs	r4, #0
 800c084:	1cb1      	adds	r1, r6, #2
 800c086:	e7cc      	b.n	800c022 <__gethex+0xb6>
 800c088:	2401      	movs	r4, #1
 800c08a:	e7fb      	b.n	800c084 <__gethex+0x118>
 800c08c:	fb03 0002 	mla	r0, r3, r2, r0
 800c090:	e7ce      	b.n	800c030 <__gethex+0xc4>
 800c092:	4631      	mov	r1, r6
 800c094:	e7de      	b.n	800c054 <__gethex+0xe8>
 800c096:	eba6 0309 	sub.w	r3, r6, r9
 800c09a:	3b01      	subs	r3, #1
 800c09c:	4629      	mov	r1, r5
 800c09e:	2b07      	cmp	r3, #7
 800c0a0:	dc0a      	bgt.n	800c0b8 <__gethex+0x14c>
 800c0a2:	9801      	ldr	r0, [sp, #4]
 800c0a4:	f7fd fbe4 	bl	8009870 <_Balloc>
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	b940      	cbnz	r0, 800c0be <__gethex+0x152>
 800c0ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c220 <__gethex+0x2b4>)
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	21e4      	movs	r1, #228	@ 0xe4
 800c0b2:	485c      	ldr	r0, [pc, #368]	@ (800c224 <__gethex+0x2b8>)
 800c0b4:	f7ff fec0 	bl	800be38 <__assert_func>
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	105b      	asrs	r3, r3, #1
 800c0bc:	e7ef      	b.n	800c09e <__gethex+0x132>
 800c0be:	f100 0a14 	add.w	sl, r0, #20
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	4655      	mov	r5, sl
 800c0c6:	469b      	mov	fp, r3
 800c0c8:	45b1      	cmp	r9, r6
 800c0ca:	d337      	bcc.n	800c13c <__gethex+0x1d0>
 800c0cc:	f845 bb04 	str.w	fp, [r5], #4
 800c0d0:	eba5 050a 	sub.w	r5, r5, sl
 800c0d4:	10ad      	asrs	r5, r5, #2
 800c0d6:	6125      	str	r5, [r4, #16]
 800c0d8:	4658      	mov	r0, fp
 800c0da:	f7fd fcbb 	bl	8009a54 <__hi0bits>
 800c0de:	016d      	lsls	r5, r5, #5
 800c0e0:	f8d8 6000 	ldr.w	r6, [r8]
 800c0e4:	1a2d      	subs	r5, r5, r0
 800c0e6:	42b5      	cmp	r5, r6
 800c0e8:	dd54      	ble.n	800c194 <__gethex+0x228>
 800c0ea:	1bad      	subs	r5, r5, r6
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f7fe f84f 	bl	800a192 <__any_on>
 800c0f4:	4681      	mov	r9, r0
 800c0f6:	b178      	cbz	r0, 800c118 <__gethex+0x1ac>
 800c0f8:	1e6b      	subs	r3, r5, #1
 800c0fa:	1159      	asrs	r1, r3, #5
 800c0fc:	f003 021f 	and.w	r2, r3, #31
 800c100:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c104:	f04f 0901 	mov.w	r9, #1
 800c108:	fa09 f202 	lsl.w	r2, r9, r2
 800c10c:	420a      	tst	r2, r1
 800c10e:	d003      	beq.n	800c118 <__gethex+0x1ac>
 800c110:	454b      	cmp	r3, r9
 800c112:	dc36      	bgt.n	800c182 <__gethex+0x216>
 800c114:	f04f 0902 	mov.w	r9, #2
 800c118:	4629      	mov	r1, r5
 800c11a:	4620      	mov	r0, r4
 800c11c:	f7ff febe 	bl	800be9c <rshift>
 800c120:	442f      	add	r7, r5
 800c122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c126:	42bb      	cmp	r3, r7
 800c128:	da42      	bge.n	800c1b0 <__gethex+0x244>
 800c12a:	9801      	ldr	r0, [sp, #4]
 800c12c:	4621      	mov	r1, r4
 800c12e:	f7fd fbdf 	bl	80098f0 <_Bfree>
 800c132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c134:	2300      	movs	r3, #0
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	25a3      	movs	r5, #163	@ 0xa3
 800c13a:	e793      	b.n	800c064 <__gethex+0xf8>
 800c13c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c140:	2a2e      	cmp	r2, #46	@ 0x2e
 800c142:	d012      	beq.n	800c16a <__gethex+0x1fe>
 800c144:	2b20      	cmp	r3, #32
 800c146:	d104      	bne.n	800c152 <__gethex+0x1e6>
 800c148:	f845 bb04 	str.w	fp, [r5], #4
 800c14c:	f04f 0b00 	mov.w	fp, #0
 800c150:	465b      	mov	r3, fp
 800c152:	7830      	ldrb	r0, [r6, #0]
 800c154:	9303      	str	r3, [sp, #12]
 800c156:	f7ff fef3 	bl	800bf40 <__hexdig_fun>
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	f000 000f 	and.w	r0, r0, #15
 800c160:	4098      	lsls	r0, r3
 800c162:	ea4b 0b00 	orr.w	fp, fp, r0
 800c166:	3304      	adds	r3, #4
 800c168:	e7ae      	b.n	800c0c8 <__gethex+0x15c>
 800c16a:	45b1      	cmp	r9, r6
 800c16c:	d8ea      	bhi.n	800c144 <__gethex+0x1d8>
 800c16e:	492b      	ldr	r1, [pc, #172]	@ (800c21c <__gethex+0x2b0>)
 800c170:	9303      	str	r3, [sp, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	4630      	mov	r0, r6
 800c176:	f7ff fe33 	bl	800bde0 <strncmp>
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d1e1      	bne.n	800c144 <__gethex+0x1d8>
 800c180:	e7a2      	b.n	800c0c8 <__gethex+0x15c>
 800c182:	1ea9      	subs	r1, r5, #2
 800c184:	4620      	mov	r0, r4
 800c186:	f7fe f804 	bl	800a192 <__any_on>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d0c2      	beq.n	800c114 <__gethex+0x1a8>
 800c18e:	f04f 0903 	mov.w	r9, #3
 800c192:	e7c1      	b.n	800c118 <__gethex+0x1ac>
 800c194:	da09      	bge.n	800c1aa <__gethex+0x23e>
 800c196:	1b75      	subs	r5, r6, r5
 800c198:	4621      	mov	r1, r4
 800c19a:	9801      	ldr	r0, [sp, #4]
 800c19c:	462a      	mov	r2, r5
 800c19e:	f7fd fdbf 	bl	8009d20 <__lshift>
 800c1a2:	1b7f      	subs	r7, r7, r5
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	f100 0a14 	add.w	sl, r0, #20
 800c1aa:	f04f 0900 	mov.w	r9, #0
 800c1ae:	e7b8      	b.n	800c122 <__gethex+0x1b6>
 800c1b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c1b4:	42bd      	cmp	r5, r7
 800c1b6:	dd6f      	ble.n	800c298 <__gethex+0x32c>
 800c1b8:	1bed      	subs	r5, r5, r7
 800c1ba:	42ae      	cmp	r6, r5
 800c1bc:	dc34      	bgt.n	800c228 <__gethex+0x2bc>
 800c1be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d022      	beq.n	800c20c <__gethex+0x2a0>
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d024      	beq.n	800c214 <__gethex+0x2a8>
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d115      	bne.n	800c1fa <__gethex+0x28e>
 800c1ce:	42ae      	cmp	r6, r5
 800c1d0:	d113      	bne.n	800c1fa <__gethex+0x28e>
 800c1d2:	2e01      	cmp	r6, #1
 800c1d4:	d10b      	bne.n	800c1ee <__gethex+0x282>
 800c1d6:	9a02      	ldr	r2, [sp, #8]
 800c1d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1dc:	6013      	str	r3, [r2, #0]
 800c1de:	2301      	movs	r3, #1
 800c1e0:	6123      	str	r3, [r4, #16]
 800c1e2:	f8ca 3000 	str.w	r3, [sl]
 800c1e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1e8:	2562      	movs	r5, #98	@ 0x62
 800c1ea:	601c      	str	r4, [r3, #0]
 800c1ec:	e73a      	b.n	800c064 <__gethex+0xf8>
 800c1ee:	1e71      	subs	r1, r6, #1
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f7fd ffce 	bl	800a192 <__any_on>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d1ed      	bne.n	800c1d6 <__gethex+0x26a>
 800c1fa:	9801      	ldr	r0, [sp, #4]
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	f7fd fb77 	bl	80098f0 <_Bfree>
 800c202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c204:	2300      	movs	r3, #0
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	2550      	movs	r5, #80	@ 0x50
 800c20a:	e72b      	b.n	800c064 <__gethex+0xf8>
 800c20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1f3      	bne.n	800c1fa <__gethex+0x28e>
 800c212:	e7e0      	b.n	800c1d6 <__gethex+0x26a>
 800c214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1dd      	bne.n	800c1d6 <__gethex+0x26a>
 800c21a:	e7ee      	b.n	800c1fa <__gethex+0x28e>
 800c21c:	0800cb10 	.word	0x0800cb10
 800c220:	0800c9a3 	.word	0x0800c9a3
 800c224:	0800ccd9 	.word	0x0800ccd9
 800c228:	1e6f      	subs	r7, r5, #1
 800c22a:	f1b9 0f00 	cmp.w	r9, #0
 800c22e:	d130      	bne.n	800c292 <__gethex+0x326>
 800c230:	b127      	cbz	r7, 800c23c <__gethex+0x2d0>
 800c232:	4639      	mov	r1, r7
 800c234:	4620      	mov	r0, r4
 800c236:	f7fd ffac 	bl	800a192 <__any_on>
 800c23a:	4681      	mov	r9, r0
 800c23c:	117a      	asrs	r2, r7, #5
 800c23e:	2301      	movs	r3, #1
 800c240:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c244:	f007 071f 	and.w	r7, r7, #31
 800c248:	40bb      	lsls	r3, r7
 800c24a:	4213      	tst	r3, r2
 800c24c:	4629      	mov	r1, r5
 800c24e:	4620      	mov	r0, r4
 800c250:	bf18      	it	ne
 800c252:	f049 0902 	orrne.w	r9, r9, #2
 800c256:	f7ff fe21 	bl	800be9c <rshift>
 800c25a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c25e:	1b76      	subs	r6, r6, r5
 800c260:	2502      	movs	r5, #2
 800c262:	f1b9 0f00 	cmp.w	r9, #0
 800c266:	d047      	beq.n	800c2f8 <__gethex+0x38c>
 800c268:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d015      	beq.n	800c29c <__gethex+0x330>
 800c270:	2b03      	cmp	r3, #3
 800c272:	d017      	beq.n	800c2a4 <__gethex+0x338>
 800c274:	2b01      	cmp	r3, #1
 800c276:	d109      	bne.n	800c28c <__gethex+0x320>
 800c278:	f019 0f02 	tst.w	r9, #2
 800c27c:	d006      	beq.n	800c28c <__gethex+0x320>
 800c27e:	f8da 3000 	ldr.w	r3, [sl]
 800c282:	ea49 0903 	orr.w	r9, r9, r3
 800c286:	f019 0f01 	tst.w	r9, #1
 800c28a:	d10e      	bne.n	800c2aa <__gethex+0x33e>
 800c28c:	f045 0510 	orr.w	r5, r5, #16
 800c290:	e032      	b.n	800c2f8 <__gethex+0x38c>
 800c292:	f04f 0901 	mov.w	r9, #1
 800c296:	e7d1      	b.n	800c23c <__gethex+0x2d0>
 800c298:	2501      	movs	r5, #1
 800c29a:	e7e2      	b.n	800c262 <__gethex+0x2f6>
 800c29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c29e:	f1c3 0301 	rsb	r3, r3, #1
 800c2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0f0      	beq.n	800c28c <__gethex+0x320>
 800c2aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2ae:	f104 0314 	add.w	r3, r4, #20
 800c2b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c2b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c2ba:	f04f 0c00 	mov.w	ip, #0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c2c8:	d01b      	beq.n	800c302 <__gethex+0x396>
 800c2ca:	3201      	adds	r2, #1
 800c2cc:	6002      	str	r2, [r0, #0]
 800c2ce:	2d02      	cmp	r5, #2
 800c2d0:	f104 0314 	add.w	r3, r4, #20
 800c2d4:	d13c      	bne.n	800c350 <__gethex+0x3e4>
 800c2d6:	f8d8 2000 	ldr.w	r2, [r8]
 800c2da:	3a01      	subs	r2, #1
 800c2dc:	42b2      	cmp	r2, r6
 800c2de:	d109      	bne.n	800c2f4 <__gethex+0x388>
 800c2e0:	1171      	asrs	r1, r6, #5
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2e8:	f006 061f 	and.w	r6, r6, #31
 800c2ec:	fa02 f606 	lsl.w	r6, r2, r6
 800c2f0:	421e      	tst	r6, r3
 800c2f2:	d13a      	bne.n	800c36a <__gethex+0x3fe>
 800c2f4:	f045 0520 	orr.w	r5, r5, #32
 800c2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2fa:	601c      	str	r4, [r3, #0]
 800c2fc:	9b02      	ldr	r3, [sp, #8]
 800c2fe:	601f      	str	r7, [r3, #0]
 800c300:	e6b0      	b.n	800c064 <__gethex+0xf8>
 800c302:	4299      	cmp	r1, r3
 800c304:	f843 cc04 	str.w	ip, [r3, #-4]
 800c308:	d8d9      	bhi.n	800c2be <__gethex+0x352>
 800c30a:	68a3      	ldr	r3, [r4, #8]
 800c30c:	459b      	cmp	fp, r3
 800c30e:	db17      	blt.n	800c340 <__gethex+0x3d4>
 800c310:	6861      	ldr	r1, [r4, #4]
 800c312:	9801      	ldr	r0, [sp, #4]
 800c314:	3101      	adds	r1, #1
 800c316:	f7fd faab 	bl	8009870 <_Balloc>
 800c31a:	4681      	mov	r9, r0
 800c31c:	b918      	cbnz	r0, 800c326 <__gethex+0x3ba>
 800c31e:	4b1a      	ldr	r3, [pc, #104]	@ (800c388 <__gethex+0x41c>)
 800c320:	4602      	mov	r2, r0
 800c322:	2184      	movs	r1, #132	@ 0x84
 800c324:	e6c5      	b.n	800c0b2 <__gethex+0x146>
 800c326:	6922      	ldr	r2, [r4, #16]
 800c328:	3202      	adds	r2, #2
 800c32a:	f104 010c 	add.w	r1, r4, #12
 800c32e:	0092      	lsls	r2, r2, #2
 800c330:	300c      	adds	r0, #12
 800c332:	f7fc fb3c 	bl	80089ae <memcpy>
 800c336:	4621      	mov	r1, r4
 800c338:	9801      	ldr	r0, [sp, #4]
 800c33a:	f7fd fad9 	bl	80098f0 <_Bfree>
 800c33e:	464c      	mov	r4, r9
 800c340:	6923      	ldr	r3, [r4, #16]
 800c342:	1c5a      	adds	r2, r3, #1
 800c344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c348:	6122      	str	r2, [r4, #16]
 800c34a:	2201      	movs	r2, #1
 800c34c:	615a      	str	r2, [r3, #20]
 800c34e:	e7be      	b.n	800c2ce <__gethex+0x362>
 800c350:	6922      	ldr	r2, [r4, #16]
 800c352:	455a      	cmp	r2, fp
 800c354:	dd0b      	ble.n	800c36e <__gethex+0x402>
 800c356:	2101      	movs	r1, #1
 800c358:	4620      	mov	r0, r4
 800c35a:	f7ff fd9f 	bl	800be9c <rshift>
 800c35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c362:	3701      	adds	r7, #1
 800c364:	42bb      	cmp	r3, r7
 800c366:	f6ff aee0 	blt.w	800c12a <__gethex+0x1be>
 800c36a:	2501      	movs	r5, #1
 800c36c:	e7c2      	b.n	800c2f4 <__gethex+0x388>
 800c36e:	f016 061f 	ands.w	r6, r6, #31
 800c372:	d0fa      	beq.n	800c36a <__gethex+0x3fe>
 800c374:	4453      	add	r3, sl
 800c376:	f1c6 0620 	rsb	r6, r6, #32
 800c37a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c37e:	f7fd fb69 	bl	8009a54 <__hi0bits>
 800c382:	42b0      	cmp	r0, r6
 800c384:	dbe7      	blt.n	800c356 <__gethex+0x3ea>
 800c386:	e7f0      	b.n	800c36a <__gethex+0x3fe>
 800c388:	0800c9a3 	.word	0x0800c9a3

0800c38c <L_shift>:
 800c38c:	f1c2 0208 	rsb	r2, r2, #8
 800c390:	0092      	lsls	r2, r2, #2
 800c392:	b570      	push	{r4, r5, r6, lr}
 800c394:	f1c2 0620 	rsb	r6, r2, #32
 800c398:	6843      	ldr	r3, [r0, #4]
 800c39a:	6804      	ldr	r4, [r0, #0]
 800c39c:	fa03 f506 	lsl.w	r5, r3, r6
 800c3a0:	432c      	orrs	r4, r5
 800c3a2:	40d3      	lsrs	r3, r2
 800c3a4:	6004      	str	r4, [r0, #0]
 800c3a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3aa:	4288      	cmp	r0, r1
 800c3ac:	d3f4      	bcc.n	800c398 <L_shift+0xc>
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}

0800c3b0 <__match>:
 800c3b0:	b530      	push	{r4, r5, lr}
 800c3b2:	6803      	ldr	r3, [r0, #0]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3ba:	b914      	cbnz	r4, 800c3c2 <__match+0x12>
 800c3bc:	6003      	str	r3, [r0, #0]
 800c3be:	2001      	movs	r0, #1
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c3ca:	2d19      	cmp	r5, #25
 800c3cc:	bf98      	it	ls
 800c3ce:	3220      	addls	r2, #32
 800c3d0:	42a2      	cmp	r2, r4
 800c3d2:	d0f0      	beq.n	800c3b6 <__match+0x6>
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e7f3      	b.n	800c3c0 <__match+0x10>

0800c3d8 <__hexnan>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	680b      	ldr	r3, [r1, #0]
 800c3de:	6801      	ldr	r1, [r0, #0]
 800c3e0:	115e      	asrs	r6, r3, #5
 800c3e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3e6:	f013 031f 	ands.w	r3, r3, #31
 800c3ea:	b087      	sub	sp, #28
 800c3ec:	bf18      	it	ne
 800c3ee:	3604      	addne	r6, #4
 800c3f0:	2500      	movs	r5, #0
 800c3f2:	1f37      	subs	r7, r6, #4
 800c3f4:	4682      	mov	sl, r0
 800c3f6:	4690      	mov	r8, r2
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800c3fe:	46b9      	mov	r9, r7
 800c400:	463c      	mov	r4, r7
 800c402:	9502      	str	r5, [sp, #8]
 800c404:	46ab      	mov	fp, r5
 800c406:	784a      	ldrb	r2, [r1, #1]
 800c408:	1c4b      	adds	r3, r1, #1
 800c40a:	9303      	str	r3, [sp, #12]
 800c40c:	b342      	cbz	r2, 800c460 <__hexnan+0x88>
 800c40e:	4610      	mov	r0, r2
 800c410:	9105      	str	r1, [sp, #20]
 800c412:	9204      	str	r2, [sp, #16]
 800c414:	f7ff fd94 	bl	800bf40 <__hexdig_fun>
 800c418:	2800      	cmp	r0, #0
 800c41a:	d151      	bne.n	800c4c0 <__hexnan+0xe8>
 800c41c:	9a04      	ldr	r2, [sp, #16]
 800c41e:	9905      	ldr	r1, [sp, #20]
 800c420:	2a20      	cmp	r2, #32
 800c422:	d818      	bhi.n	800c456 <__hexnan+0x7e>
 800c424:	9b02      	ldr	r3, [sp, #8]
 800c426:	459b      	cmp	fp, r3
 800c428:	dd13      	ble.n	800c452 <__hexnan+0x7a>
 800c42a:	454c      	cmp	r4, r9
 800c42c:	d206      	bcs.n	800c43c <__hexnan+0x64>
 800c42e:	2d07      	cmp	r5, #7
 800c430:	dc04      	bgt.n	800c43c <__hexnan+0x64>
 800c432:	462a      	mov	r2, r5
 800c434:	4649      	mov	r1, r9
 800c436:	4620      	mov	r0, r4
 800c438:	f7ff ffa8 	bl	800c38c <L_shift>
 800c43c:	4544      	cmp	r4, r8
 800c43e:	d952      	bls.n	800c4e6 <__hexnan+0x10e>
 800c440:	2300      	movs	r3, #0
 800c442:	f1a4 0904 	sub.w	r9, r4, #4
 800c446:	f844 3c04 	str.w	r3, [r4, #-4]
 800c44a:	f8cd b008 	str.w	fp, [sp, #8]
 800c44e:	464c      	mov	r4, r9
 800c450:	461d      	mov	r5, r3
 800c452:	9903      	ldr	r1, [sp, #12]
 800c454:	e7d7      	b.n	800c406 <__hexnan+0x2e>
 800c456:	2a29      	cmp	r2, #41	@ 0x29
 800c458:	d157      	bne.n	800c50a <__hexnan+0x132>
 800c45a:	3102      	adds	r1, #2
 800c45c:	f8ca 1000 	str.w	r1, [sl]
 800c460:	f1bb 0f00 	cmp.w	fp, #0
 800c464:	d051      	beq.n	800c50a <__hexnan+0x132>
 800c466:	454c      	cmp	r4, r9
 800c468:	d206      	bcs.n	800c478 <__hexnan+0xa0>
 800c46a:	2d07      	cmp	r5, #7
 800c46c:	dc04      	bgt.n	800c478 <__hexnan+0xa0>
 800c46e:	462a      	mov	r2, r5
 800c470:	4649      	mov	r1, r9
 800c472:	4620      	mov	r0, r4
 800c474:	f7ff ff8a 	bl	800c38c <L_shift>
 800c478:	4544      	cmp	r4, r8
 800c47a:	d936      	bls.n	800c4ea <__hexnan+0x112>
 800c47c:	f1a8 0204 	sub.w	r2, r8, #4
 800c480:	4623      	mov	r3, r4
 800c482:	f853 1b04 	ldr.w	r1, [r3], #4
 800c486:	f842 1f04 	str.w	r1, [r2, #4]!
 800c48a:	429f      	cmp	r7, r3
 800c48c:	d2f9      	bcs.n	800c482 <__hexnan+0xaa>
 800c48e:	1b3b      	subs	r3, r7, r4
 800c490:	f023 0303 	bic.w	r3, r3, #3
 800c494:	3304      	adds	r3, #4
 800c496:	3401      	adds	r4, #1
 800c498:	3e03      	subs	r6, #3
 800c49a:	42b4      	cmp	r4, r6
 800c49c:	bf88      	it	hi
 800c49e:	2304      	movhi	r3, #4
 800c4a0:	4443      	add	r3, r8
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f843 2b04 	str.w	r2, [r3], #4
 800c4a8:	429f      	cmp	r7, r3
 800c4aa:	d2fb      	bcs.n	800c4a4 <__hexnan+0xcc>
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	b91b      	cbnz	r3, 800c4b8 <__hexnan+0xe0>
 800c4b0:	4547      	cmp	r7, r8
 800c4b2:	d128      	bne.n	800c506 <__hexnan+0x12e>
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	2005      	movs	r0, #5
 800c4ba:	b007      	add	sp, #28
 800c4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	2d08      	cmp	r5, #8
 800c4c4:	f10b 0b01 	add.w	fp, fp, #1
 800c4c8:	dd06      	ble.n	800c4d8 <__hexnan+0x100>
 800c4ca:	4544      	cmp	r4, r8
 800c4cc:	d9c1      	bls.n	800c452 <__hexnan+0x7a>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4d4:	2501      	movs	r5, #1
 800c4d6:	3c04      	subs	r4, #4
 800c4d8:	6822      	ldr	r2, [r4, #0]
 800c4da:	f000 000f 	and.w	r0, r0, #15
 800c4de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c4e2:	6020      	str	r0, [r4, #0]
 800c4e4:	e7b5      	b.n	800c452 <__hexnan+0x7a>
 800c4e6:	2508      	movs	r5, #8
 800c4e8:	e7b3      	b.n	800c452 <__hexnan+0x7a>
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d0dd      	beq.n	800c4ac <__hexnan+0xd4>
 800c4f0:	f1c3 0320 	rsb	r3, r3, #32
 800c4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f8:	40da      	lsrs	r2, r3
 800c4fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c4fe:	4013      	ands	r3, r2
 800c500:	f846 3c04 	str.w	r3, [r6, #-4]
 800c504:	e7d2      	b.n	800c4ac <__hexnan+0xd4>
 800c506:	3f04      	subs	r7, #4
 800c508:	e7d0      	b.n	800c4ac <__hexnan+0xd4>
 800c50a:	2004      	movs	r0, #4
 800c50c:	e7d5      	b.n	800c4ba <__hexnan+0xe2>

0800c50e <__ascii_mbtowc>:
 800c50e:	b082      	sub	sp, #8
 800c510:	b901      	cbnz	r1, 800c514 <__ascii_mbtowc+0x6>
 800c512:	a901      	add	r1, sp, #4
 800c514:	b142      	cbz	r2, 800c528 <__ascii_mbtowc+0x1a>
 800c516:	b14b      	cbz	r3, 800c52c <__ascii_mbtowc+0x1e>
 800c518:	7813      	ldrb	r3, [r2, #0]
 800c51a:	600b      	str	r3, [r1, #0]
 800c51c:	7812      	ldrb	r2, [r2, #0]
 800c51e:	1e10      	subs	r0, r2, #0
 800c520:	bf18      	it	ne
 800c522:	2001      	movne	r0, #1
 800c524:	b002      	add	sp, #8
 800c526:	4770      	bx	lr
 800c528:	4610      	mov	r0, r2
 800c52a:	e7fb      	b.n	800c524 <__ascii_mbtowc+0x16>
 800c52c:	f06f 0001 	mvn.w	r0, #1
 800c530:	e7f8      	b.n	800c524 <__ascii_mbtowc+0x16>

0800c532 <_realloc_r>:
 800c532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c536:	4680      	mov	r8, r0
 800c538:	4615      	mov	r5, r2
 800c53a:	460c      	mov	r4, r1
 800c53c:	b921      	cbnz	r1, 800c548 <_realloc_r+0x16>
 800c53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	4611      	mov	r1, r2
 800c544:	f7fd b908 	b.w	8009758 <_malloc_r>
 800c548:	b92a      	cbnz	r2, 800c556 <_realloc_r+0x24>
 800c54a:	f7fd f891 	bl	8009670 <_free_r>
 800c54e:	2400      	movs	r4, #0
 800c550:	4620      	mov	r0, r4
 800c552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c556:	f000 f936 	bl	800c7c6 <_malloc_usable_size_r>
 800c55a:	4285      	cmp	r5, r0
 800c55c:	4606      	mov	r6, r0
 800c55e:	d802      	bhi.n	800c566 <_realloc_r+0x34>
 800c560:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c564:	d8f4      	bhi.n	800c550 <_realloc_r+0x1e>
 800c566:	4629      	mov	r1, r5
 800c568:	4640      	mov	r0, r8
 800c56a:	f7fd f8f5 	bl	8009758 <_malloc_r>
 800c56e:	4607      	mov	r7, r0
 800c570:	2800      	cmp	r0, #0
 800c572:	d0ec      	beq.n	800c54e <_realloc_r+0x1c>
 800c574:	42b5      	cmp	r5, r6
 800c576:	462a      	mov	r2, r5
 800c578:	4621      	mov	r1, r4
 800c57a:	bf28      	it	cs
 800c57c:	4632      	movcs	r2, r6
 800c57e:	f7fc fa16 	bl	80089ae <memcpy>
 800c582:	4621      	mov	r1, r4
 800c584:	4640      	mov	r0, r8
 800c586:	f7fd f873 	bl	8009670 <_free_r>
 800c58a:	463c      	mov	r4, r7
 800c58c:	e7e0      	b.n	800c550 <_realloc_r+0x1e>
	...

0800c590 <_strtoul_l.constprop.0>:
 800c590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c594:	4e34      	ldr	r6, [pc, #208]	@ (800c668 <_strtoul_l.constprop.0+0xd8>)
 800c596:	4686      	mov	lr, r0
 800c598:	460d      	mov	r5, r1
 800c59a:	4628      	mov	r0, r5
 800c59c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5a0:	5d37      	ldrb	r7, [r6, r4]
 800c5a2:	f017 0708 	ands.w	r7, r7, #8
 800c5a6:	d1f8      	bne.n	800c59a <_strtoul_l.constprop.0+0xa>
 800c5a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800c5aa:	d12f      	bne.n	800c60c <_strtoul_l.constprop.0+0x7c>
 800c5ac:	782c      	ldrb	r4, [r5, #0]
 800c5ae:	2701      	movs	r7, #1
 800c5b0:	1c85      	adds	r5, r0, #2
 800c5b2:	f033 0010 	bics.w	r0, r3, #16
 800c5b6:	d109      	bne.n	800c5cc <_strtoul_l.constprop.0+0x3c>
 800c5b8:	2c30      	cmp	r4, #48	@ 0x30
 800c5ba:	d12c      	bne.n	800c616 <_strtoul_l.constprop.0+0x86>
 800c5bc:	7828      	ldrb	r0, [r5, #0]
 800c5be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c5c2:	2858      	cmp	r0, #88	@ 0x58
 800c5c4:	d127      	bne.n	800c616 <_strtoul_l.constprop.0+0x86>
 800c5c6:	786c      	ldrb	r4, [r5, #1]
 800c5c8:	2310      	movs	r3, #16
 800c5ca:	3502      	adds	r5, #2
 800c5cc:	f04f 38ff 	mov.w	r8, #4294967295
 800c5d0:	2600      	movs	r6, #0
 800c5d2:	fbb8 f8f3 	udiv	r8, r8, r3
 800c5d6:	fb03 f908 	mul.w	r9, r3, r8
 800c5da:	ea6f 0909 	mvn.w	r9, r9
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c5e4:	f1bc 0f09 	cmp.w	ip, #9
 800c5e8:	d81c      	bhi.n	800c624 <_strtoul_l.constprop.0+0x94>
 800c5ea:	4664      	mov	r4, ip
 800c5ec:	42a3      	cmp	r3, r4
 800c5ee:	dd2a      	ble.n	800c646 <_strtoul_l.constprop.0+0xb6>
 800c5f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c5f4:	d007      	beq.n	800c606 <_strtoul_l.constprop.0+0x76>
 800c5f6:	4580      	cmp	r8, r0
 800c5f8:	d322      	bcc.n	800c640 <_strtoul_l.constprop.0+0xb0>
 800c5fa:	d101      	bne.n	800c600 <_strtoul_l.constprop.0+0x70>
 800c5fc:	45a1      	cmp	r9, r4
 800c5fe:	db1f      	blt.n	800c640 <_strtoul_l.constprop.0+0xb0>
 800c600:	fb00 4003 	mla	r0, r0, r3, r4
 800c604:	2601      	movs	r6, #1
 800c606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c60a:	e7e9      	b.n	800c5e0 <_strtoul_l.constprop.0+0x50>
 800c60c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c60e:	bf04      	itt	eq
 800c610:	782c      	ldrbeq	r4, [r5, #0]
 800c612:	1c85      	addeq	r5, r0, #2
 800c614:	e7cd      	b.n	800c5b2 <_strtoul_l.constprop.0+0x22>
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1d8      	bne.n	800c5cc <_strtoul_l.constprop.0+0x3c>
 800c61a:	2c30      	cmp	r4, #48	@ 0x30
 800c61c:	bf0c      	ite	eq
 800c61e:	2308      	moveq	r3, #8
 800c620:	230a      	movne	r3, #10
 800c622:	e7d3      	b.n	800c5cc <_strtoul_l.constprop.0+0x3c>
 800c624:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c628:	f1bc 0f19 	cmp.w	ip, #25
 800c62c:	d801      	bhi.n	800c632 <_strtoul_l.constprop.0+0xa2>
 800c62e:	3c37      	subs	r4, #55	@ 0x37
 800c630:	e7dc      	b.n	800c5ec <_strtoul_l.constprop.0+0x5c>
 800c632:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c636:	f1bc 0f19 	cmp.w	ip, #25
 800c63a:	d804      	bhi.n	800c646 <_strtoul_l.constprop.0+0xb6>
 800c63c:	3c57      	subs	r4, #87	@ 0x57
 800c63e:	e7d5      	b.n	800c5ec <_strtoul_l.constprop.0+0x5c>
 800c640:	f04f 36ff 	mov.w	r6, #4294967295
 800c644:	e7df      	b.n	800c606 <_strtoul_l.constprop.0+0x76>
 800c646:	1c73      	adds	r3, r6, #1
 800c648:	d106      	bne.n	800c658 <_strtoul_l.constprop.0+0xc8>
 800c64a:	2322      	movs	r3, #34	@ 0x22
 800c64c:	f8ce 3000 	str.w	r3, [lr]
 800c650:	4630      	mov	r0, r6
 800c652:	b932      	cbnz	r2, 800c662 <_strtoul_l.constprop.0+0xd2>
 800c654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c658:	b107      	cbz	r7, 800c65c <_strtoul_l.constprop.0+0xcc>
 800c65a:	4240      	negs	r0, r0
 800c65c:	2a00      	cmp	r2, #0
 800c65e:	d0f9      	beq.n	800c654 <_strtoul_l.constprop.0+0xc4>
 800c660:	b106      	cbz	r6, 800c664 <_strtoul_l.constprop.0+0xd4>
 800c662:	1e69      	subs	r1, r5, #1
 800c664:	6011      	str	r1, [r2, #0]
 800c666:	e7f5      	b.n	800c654 <_strtoul_l.constprop.0+0xc4>
 800c668:	0800cb69 	.word	0x0800cb69

0800c66c <_strtoul_r>:
 800c66c:	f7ff bf90 	b.w	800c590 <_strtoul_l.constprop.0>

0800c670 <__ascii_wctomb>:
 800c670:	4603      	mov	r3, r0
 800c672:	4608      	mov	r0, r1
 800c674:	b141      	cbz	r1, 800c688 <__ascii_wctomb+0x18>
 800c676:	2aff      	cmp	r2, #255	@ 0xff
 800c678:	d904      	bls.n	800c684 <__ascii_wctomb+0x14>
 800c67a:	228a      	movs	r2, #138	@ 0x8a
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	f04f 30ff 	mov.w	r0, #4294967295
 800c682:	4770      	bx	lr
 800c684:	700a      	strb	r2, [r1, #0]
 800c686:	2001      	movs	r0, #1
 800c688:	4770      	bx	lr
	...

0800c68c <fiprintf>:
 800c68c:	b40e      	push	{r1, r2, r3}
 800c68e:	b503      	push	{r0, r1, lr}
 800c690:	4601      	mov	r1, r0
 800c692:	ab03      	add	r3, sp, #12
 800c694:	4805      	ldr	r0, [pc, #20]	@ (800c6ac <fiprintf+0x20>)
 800c696:	f853 2b04 	ldr.w	r2, [r3], #4
 800c69a:	6800      	ldr	r0, [r0, #0]
 800c69c:	9301      	str	r3, [sp, #4]
 800c69e:	f7fe ff6b 	bl	800b578 <_vfiprintf_r>
 800c6a2:	b002      	add	sp, #8
 800c6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a8:	b003      	add	sp, #12
 800c6aa:	4770      	bx	lr
 800c6ac:	20000024 	.word	0x20000024

0800c6b0 <__swhatbuf_r>:
 800c6b0:	b570      	push	{r4, r5, r6, lr}
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	b096      	sub	sp, #88	@ 0x58
 800c6bc:	4615      	mov	r5, r2
 800c6be:	461e      	mov	r6, r3
 800c6c0:	da0d      	bge.n	800c6de <__swhatbuf_r+0x2e>
 800c6c2:	89a3      	ldrh	r3, [r4, #12]
 800c6c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6c8:	f04f 0100 	mov.w	r1, #0
 800c6cc:	bf14      	ite	ne
 800c6ce:	2340      	movne	r3, #64	@ 0x40
 800c6d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	6031      	str	r1, [r6, #0]
 800c6d8:	602b      	str	r3, [r5, #0]
 800c6da:	b016      	add	sp, #88	@ 0x58
 800c6dc:	bd70      	pop	{r4, r5, r6, pc}
 800c6de:	466a      	mov	r2, sp
 800c6e0:	f000 f848 	bl	800c774 <_fstat_r>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	dbec      	blt.n	800c6c2 <__swhatbuf_r+0x12>
 800c6e8:	9901      	ldr	r1, [sp, #4]
 800c6ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6f2:	4259      	negs	r1, r3
 800c6f4:	4159      	adcs	r1, r3
 800c6f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6fa:	e7eb      	b.n	800c6d4 <__swhatbuf_r+0x24>

0800c6fc <__smakebuf_r>:
 800c6fc:	898b      	ldrh	r3, [r1, #12]
 800c6fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c700:	079d      	lsls	r5, r3, #30
 800c702:	4606      	mov	r6, r0
 800c704:	460c      	mov	r4, r1
 800c706:	d507      	bpl.n	800c718 <__smakebuf_r+0x1c>
 800c708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	6123      	str	r3, [r4, #16]
 800c710:	2301      	movs	r3, #1
 800c712:	6163      	str	r3, [r4, #20]
 800c714:	b003      	add	sp, #12
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c718:	ab01      	add	r3, sp, #4
 800c71a:	466a      	mov	r2, sp
 800c71c:	f7ff ffc8 	bl	800c6b0 <__swhatbuf_r>
 800c720:	9f00      	ldr	r7, [sp, #0]
 800c722:	4605      	mov	r5, r0
 800c724:	4639      	mov	r1, r7
 800c726:	4630      	mov	r0, r6
 800c728:	f7fd f816 	bl	8009758 <_malloc_r>
 800c72c:	b948      	cbnz	r0, 800c742 <__smakebuf_r+0x46>
 800c72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c732:	059a      	lsls	r2, r3, #22
 800c734:	d4ee      	bmi.n	800c714 <__smakebuf_r+0x18>
 800c736:	f023 0303 	bic.w	r3, r3, #3
 800c73a:	f043 0302 	orr.w	r3, r3, #2
 800c73e:	81a3      	strh	r3, [r4, #12]
 800c740:	e7e2      	b.n	800c708 <__smakebuf_r+0xc>
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	6020      	str	r0, [r4, #0]
 800c746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c74a:	81a3      	strh	r3, [r4, #12]
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c752:	b15b      	cbz	r3, 800c76c <__smakebuf_r+0x70>
 800c754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c758:	4630      	mov	r0, r6
 800c75a:	f000 f81d 	bl	800c798 <_isatty_r>
 800c75e:	b128      	cbz	r0, 800c76c <__smakebuf_r+0x70>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	f023 0303 	bic.w	r3, r3, #3
 800c766:	f043 0301 	orr.w	r3, r3, #1
 800c76a:	81a3      	strh	r3, [r4, #12]
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	431d      	orrs	r5, r3
 800c770:	81a5      	strh	r5, [r4, #12]
 800c772:	e7cf      	b.n	800c714 <__smakebuf_r+0x18>

0800c774 <_fstat_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4d07      	ldr	r5, [pc, #28]	@ (800c794 <_fstat_r+0x20>)
 800c778:	2300      	movs	r3, #0
 800c77a:	4604      	mov	r4, r0
 800c77c:	4608      	mov	r0, r1
 800c77e:	4611      	mov	r1, r2
 800c780:	602b      	str	r3, [r5, #0]
 800c782:	f7f5 fc3f 	bl	8002004 <_fstat>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	d102      	bne.n	800c790 <_fstat_r+0x1c>
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	b103      	cbz	r3, 800c790 <_fstat_r+0x1c>
 800c78e:	6023      	str	r3, [r4, #0]
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	bf00      	nop
 800c794:	20004678 	.word	0x20004678

0800c798 <_isatty_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d06      	ldr	r5, [pc, #24]	@ (800c7b4 <_isatty_r+0x1c>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f7f5 fc3e 	bl	8002024 <_isatty>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_isatty_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_isatty_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	20004678 	.word	0x20004678

0800c7b8 <abort>:
 800c7b8:	b508      	push	{r3, lr}
 800c7ba:	2006      	movs	r0, #6
 800c7bc:	f000 f834 	bl	800c828 <raise>
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	f7f5 fbcf 	bl	8001f64 <_exit>

0800c7c6 <_malloc_usable_size_r>:
 800c7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7ca:	1f18      	subs	r0, r3, #4
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	bfbc      	itt	lt
 800c7d0:	580b      	ldrlt	r3, [r1, r0]
 800c7d2:	18c0      	addlt	r0, r0, r3
 800c7d4:	4770      	bx	lr

0800c7d6 <_raise_r>:
 800c7d6:	291f      	cmp	r1, #31
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	4605      	mov	r5, r0
 800c7dc:	460c      	mov	r4, r1
 800c7de:	d904      	bls.n	800c7ea <_raise_r+0x14>
 800c7e0:	2316      	movs	r3, #22
 800c7e2:	6003      	str	r3, [r0, #0]
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7ec:	b112      	cbz	r2, 800c7f4 <_raise_r+0x1e>
 800c7ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7f2:	b94b      	cbnz	r3, 800c808 <_raise_r+0x32>
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	f000 f831 	bl	800c85c <_getpid_r>
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	4628      	mov	r0, r5
 800c800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c804:	f000 b818 	b.w	800c838 <_kill_r>
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d00a      	beq.n	800c822 <_raise_r+0x4c>
 800c80c:	1c59      	adds	r1, r3, #1
 800c80e:	d103      	bne.n	800c818 <_raise_r+0x42>
 800c810:	2316      	movs	r3, #22
 800c812:	6003      	str	r3, [r0, #0]
 800c814:	2001      	movs	r0, #1
 800c816:	e7e7      	b.n	800c7e8 <_raise_r+0x12>
 800c818:	2100      	movs	r1, #0
 800c81a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c81e:	4620      	mov	r0, r4
 800c820:	4798      	blx	r3
 800c822:	2000      	movs	r0, #0
 800c824:	e7e0      	b.n	800c7e8 <_raise_r+0x12>
	...

0800c828 <raise>:
 800c828:	4b02      	ldr	r3, [pc, #8]	@ (800c834 <raise+0xc>)
 800c82a:	4601      	mov	r1, r0
 800c82c:	6818      	ldr	r0, [r3, #0]
 800c82e:	f7ff bfd2 	b.w	800c7d6 <_raise_r>
 800c832:	bf00      	nop
 800c834:	20000024 	.word	0x20000024

0800c838 <_kill_r>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	4d07      	ldr	r5, [pc, #28]	@ (800c858 <_kill_r+0x20>)
 800c83c:	2300      	movs	r3, #0
 800c83e:	4604      	mov	r4, r0
 800c840:	4608      	mov	r0, r1
 800c842:	4611      	mov	r1, r2
 800c844:	602b      	str	r3, [r5, #0]
 800c846:	f7f5 fb7d 	bl	8001f44 <_kill>
 800c84a:	1c43      	adds	r3, r0, #1
 800c84c:	d102      	bne.n	800c854 <_kill_r+0x1c>
 800c84e:	682b      	ldr	r3, [r5, #0]
 800c850:	b103      	cbz	r3, 800c854 <_kill_r+0x1c>
 800c852:	6023      	str	r3, [r4, #0]
 800c854:	bd38      	pop	{r3, r4, r5, pc}
 800c856:	bf00      	nop
 800c858:	20004678 	.word	0x20004678

0800c85c <_getpid_r>:
 800c85c:	f7f5 bb6a 	b.w	8001f34 <_getpid>

0800c860 <_init>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	bf00      	nop
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr

0800c86c <_fini>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	bf00      	nop
 800c870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c872:	bc08      	pop	{r3}
 800c874:	469e      	mov	lr, r3
 800c876:	4770      	bx	lr
